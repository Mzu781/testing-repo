<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/9/2025 8:46:55 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-62JJ49T4"
  DTS:CreatorName="LAPTOP-62JJ49T4\MuzuvukileNqwiliso"
  DTS:DTSID="{E6B58391-ACF2-4EFA-B79F-FF7EC5602EA9}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="7177"
  DTS:ObjectName="LoadTimesheet"
  DTS:PackageType="5"
  DTS:VersionBuild="113"
  DTS:VersionGUID="{89AF2D2A-0564-4CA3-A9E2-4566DEC8D46F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{7C2F816B-3BF6-4284-99E2-E176C730755D}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ExcelConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="0"
          DTS:ConnectRetryInterval="0"
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.16.0;Data Source=C:\Timesheets\Muzuvukile Nqwiliso\Muzuvukile Nqwiliso May Final.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{953867F6-60BC-4801-81DA-6B94055DDBB6}"
      DTS:ObjectName="LocalHost.TimesheetDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=TimesheetDB;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Application Name=SSIS-TimesheetStaging-{953867F6-60BC-4801-81DA-6B94055DDBB6}LocalHost.TimesheetDB;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.TimesheetDB 1]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{57B8D369-A8D6-4669-BC5F-BF9B60ECEB2E}"
      DTS:ObjectName="LocalHost.TimesheetDB 1">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=TimesheetDB;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Package1-{57B8D369-A8D6-4669-BC5F-BF9B60ECEB2E}LocalHost.TimesheetDB;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="LocalHost.TimesheetDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{620534FA-AC44-41A3-BCDC-DF5F552D2A80}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EC38A1CA-25E2-405A-9517-22CE8BA13BB1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmployeeFolderPath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0FA9D28A-A4D1-4EE2-A1CC-53A67C83BEB3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmployeeName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B2F1BBF9-516D-479C-8DAA-C0F4E8FBD690}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">Provider=Microsoft.ACE.OLEDB.16.0;Data Source=C:\Timesheets\Muzuvukile Nqwiliso\Muzuvukile Nqwiliso May Final.xlsx;Extended Properties="EXCEL 12.0 XML;HDR=YES";</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7673EA2F-8533-4F4D-ABA5-77B6128CD90E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFilePath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3E34E695-4A89-4705-8579-ECCE2771DD56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelRange">
      <DTS:VariableValue
        DTS:DataType="8">A8:J58</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{775628D6-EFF5-4E49-983A-1B63CE112D7A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FolderList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2A0ED08B-B708-4873-B2F5-9437444E3AA0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Timesheets</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{86BA2F8D-5A8A-40B2-B4BE-40FC10095C2F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SelectedSheet">
      <DTS:VariableValue
        DTS:DataType="8">May$A8:J58</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">3,7,OnError,13,OnInformation,9,OnWarning</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnWarning"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{620534FA-AC44-41A3-BCDC-DF5F552D2A80}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Clean and Validate Timesheet Data"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{AF2BBFBA-D557-4D5E-9769-4D3661189764}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Clean and Validate Timesheet Data"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{953867F6-60BC-4801-81DA-6B94055DDBB6}"
          SQLTask:SqlStatementSource="-- Step 1: Clean data&#xA;UPDATE Timesheet.TimesheetStaging&#xA;SET [Date] = NULLIF(TRIM([Date]), ''),&#xA;    [DayOfWeek] = NULLIF(TRIM(UPPER([DayOfWeek])), ''),&#xA;    ClientName = NULLIF(TRIM(ClientName), ''),&#xA;    ProjectName = NULLIF(TRIM(ProjectName), ''),&#xA;    ActivityName = NULLIF(TRIM(ActivityName), ''),&#xA;    BillableStatus = NULLIF(TRIM(UPPER(BillableStatus)), ''),&#xA;    Comments = NULLIF(TRIM(Comments), ''),&#xA;    TotalHours = NULLIF(TRIM(TotalHours), ''),&#xA;    StartTime = NULLIF(TRIM(StartTime), ''),&#xA;    EndTime = NULLIF(TRIM(EndTime), ''),&#xA;    EmployeeName = NULLIF(TRIM(EmployeeName), '')&#xA;WHERE ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;-- Step 2: Fill forward Date&#xA;WITH DateFill AS (&#xA;    SELECT StagingID, [Date], EmployeeName, FileName,&#xA;           LAG([Date]) OVER (PARTITION BY EmployeeName, FileName ORDER BY StagingID) AS PrevDate&#xA;    FROM Timesheet.TimesheetStaging&#xA;    WHERE ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE())&#xA;)&#xA;UPDATE Timesheet.TimesheetStaging&#xA;SET [Date] = COALESCE(s.[Date], df.PrevDate)&#xA;FROM Timesheet.TimesheetStaging s&#xA;JOIN DateFill df ON s.StagingID = df.StagingID&#xA;WHERE s.ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;-- Step 3: Validate and standardize values&#xA;UPDATE Timesheet.TimesheetStaging&#xA;SET [DayOfWeek] = CASE &#xA;        WHEN [DayOfWeek] IN ('MON', 'MONDAY') THEN 'Monday'&#xA;        WHEN [DayOfWeek] IN ('TUE', 'TUESDAY') THEN 'Tuesday'&#xA;        WHEN [DayOfWeek] IN ('WED', 'WEDNESDAY') THEN 'Wednesday'&#xA;        WHEN [DayOfWeek] IN ('THU', 'THURSDAY') THEN 'Thursday'&#xA;        WHEN [DayOfWeek] IN ('FRI', 'FRIDAY') THEN 'Friday'&#xA;        WHEN [DayOfWeek] IN ('SAT', 'SATURDAY') THEN 'Saturday'&#xA;        WHEN [DayOfWeek] IN ('SUN', 'SUNDAY') THEN 'Sunday'&#xA;        ELSE NULL&#xA;    END,&#xA;    BillableStatus = CASE &#xA;        WHEN BillableStatus IN ('BILLABLE', 'B') THEN 'Billable'&#xA;        WHEN BillableStatus IN ('NON-BILLABLE', 'NON BILLABLE', 'NB') THEN 'Non-Billable'&#xA;        ELSE NULL&#xA;    END,&#xA;    TotalHours = CASE &#xA;        WHEN ISNUMERIC(TotalHours) = 1 AND CAST(TotalHours AS DECIMAL(5,2)) &gt;= 0 &#xA;        THEN CAST(TotalHours AS DECIMAL(5,2))&#xA;        ELSE NULL&#xA;    END&#xA;WHERE ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;-- Step 3.5: Calculate missing TotalHours from StartTime and EndTime&#xA;UPDATE Timesheet.TimesheetStaging&#xA;SET TotalHours = CAST(&#xA;    CAST(DATEDIFF(MINUTE, TRY_CONVERT(TIME, StartTime), TRY_CONVERT(TIME, EndTime)) / 60.0 AS DECIMAL(5,2)) &#xA;    AS NVARCHAR(10))&#xA;WHERE &#xA;    (TotalHours IS NULL OR TRY_CONVERT(DECIMAL(5,2), TotalHours) IS NULL)&#xA;    AND TRY_CONVERT(TIME, StartTime) IS NOT NULL&#xA;    AND TRY_CONVERT(TIME, EndTime) IS NOT NULL&#xA;    AND DATEDIFF(MINUTE, TRY_CONVERT(TIME, StartTime), TRY_CONVERT(TIME, EndTime)) &gt;= 0&#xA;    AND ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;-- Step 4: Mark valid rows&#xA;UPDATE Timesheet.TimesheetStaging&#xA;SET IsValid = 1&#xA;WHERE TRY_CONVERT(DATE, [Date]) IS NOT NULL&#xA;  AND [DayOfWeek] IS NOT NULL&#xA;  AND BillableStatus IS NOT NULL&#xA;  AND ActivityName IS NOT NULL&#xA;  AND EmployeeName IS NOT NULL&#xA;  AND TRY_CONVERT(DECIMAL(5,2), TotalHours) &gt;= 0&#xA;  AND ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Clear Timesheet Staging Data"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{EEB71888-8B2A-43CF-BDE0-349591ABE7B4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Clear Timesheet Staging Data"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{953867F6-60BC-4801-81DA-6B94055DDBB6}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE [TimesheetDB].[Timesheet].[TimesheetStaging]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Forecast Summary"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3C9768B5-C8E8-4FEC-82D9-BC3393CCFFFD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Forecast Summary"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{953867F6-60BC-4801-81DA-6B94055DDBB6}"
          SQLTask:SqlStatementSource="BEGIN TRY&#xA;    MERGE Timesheet.Forecast AS Target&#xA;    USING (&#xA;        SELECT &#xA;            T.EmployeeID,&#xA;            DATEADD(MONTH, DATEDIFF(MONTH, 0, T.[Date]), 0) AS ForecastMonth,&#xA;            SUM(CASE WHEN T.BillableStatus = 'Non-Billable' THEN T.TotalHours ELSE 0 END) AS NonBillableHours,&#xA;            SUM(CASE WHEN T.BillableStatus = 'Billable' THEN T.TotalHours ELSE 0 END) AS BillableHours,&#xA;            SUM(T.TotalHours) AS TotalHours&#xA;        FROM &#xA;            Timesheet.Timesheet T&#xA;        GROUP BY &#xA;            T.EmployeeID,&#xA;            DATEADD(MONTH, DATEDIFF(MONTH, 0, T.[Date]), 0)&#xA;    ) AS Source&#xA;    ON Target.EmployeeID = Source.EmployeeID &#xA;       AND Target.ForecastMonth = Source.ForecastMonth&#xA;    WHEN MATCHED THEN &#xA;        UPDATE SET &#xA;            Target.NonBillableHours = Source.NonBillableHours,&#xA;            Target.BillableHours = Source.BillableHours,&#xA;            Target.TotalHours = Source.TotalHours&#xA;    WHEN NOT MATCHED BY TARGET AND Source.TotalHours &gt; 168 THEN &#xA;        INSERT (&#xA;            EmployeeID, &#xA;            ForecastMonth, &#xA;            ForecastedHours, &#xA;            ForecastedWorkDays,&#xA;            NonBillableHours, &#xA;            BillableHours, &#xA;            TotalHours&#xA;        )&#xA;        VALUES (&#xA;            Source.EmployeeID, &#xA;            Source.ForecastMonth, &#xA;            168.00,   -- Default ForecastedHours&#xA;            21,       -- Default ForecastedWorkDays&#xA;            Source.NonBillableHours, &#xA;            Source.BillableHours, &#xA;            Source.TotalHours&#xA;        );&#xA;END TRY&#xA;BEGIN CATCH&#xA;    INSERT INTO ErrorLog (&#xA;        ErrorDate,&#xA;        ErrorTask,&#xA;        ErrorDescription,&#xA;        SourceComponent,&#xA;        RowData,&#xA;        UserName&#xA;    )&#xA;    VALUES (&#xA;        GETDATE(),&#xA;        'Timesheet Forecast MERGE',&#xA;        ERROR_MESSAGE(),&#xA;        'Timesheet.Forecast',&#xA;        ISNULL(&#xA;            (SELECT TOP 1 &#xA;                'EmployeeID: ' + CAST(EmployeeID AS NVARCHAR(10)) + ', ' +&#xA;                'Month: ' + CONVERT(NVARCHAR(10), ForecastMonth, 120) + ', ' +&#xA;                'BillableHrs: ' + CAST(BillableHours AS NVARCHAR(10)) + ', ' +&#xA;                'NonBillableHrs: ' + CAST(NonBillableHours AS NVARCHAR(10))&#xA;             FROM Source FOR JSON PATH),&#xA;            'No row data available'&#xA;        ),&#xA;        SUSER_SNAME()&#xA;    );&#xA;    &#xA;    THROW;&#xA;END CATCH" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Timesheet Data"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{2CBA765F-9EC2-4530-A416-77816A64D4D6}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Timesheet Data"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{953867F6-60BC-4801-81DA-6B94055DDBB6}"
          SQLTask:SqlStatementSource="&#xA;BEGIN TRY&#xA;    -- Step 1: Store invalid records (including DescriptionID 8020) in a temporary table&#xA;    SELECT &#xA;        COALESCE(s.EmployeeName, 'Unknown') AS EmployeeName,&#xA;        COALESCE(s.FileName, 'Unknown') AS FileName,&#xA;        'TimesheetStaging' AS TableName,&#xA;        'Skipped' AS Action,&#xA;        'Data error(s): ' +&#xA;            CASE WHEN e.EmployeeID IS NULL THEN 'Missing EmployeeID; ' ELSE '' END +&#xA;            CASE WHEN c.ClientID IS NULL AND s.ClientName IS NOT NULL THEN 'Missing ClientID; ' ELSE '' END +&#xA;            CASE WHEN p.ProjectID IS NULL AND s.ProjectName IS NOT NULL THEN 'Missing ProjectID; ' ELSE '' END +&#xA;            CASE WHEN d.DescriptionID IS NULL THEN 'Missing Description; ' &#xA;                 WHEN d.DescriptionID = 8020 THEN 'Public Holiday (DescriptionID 8020); ' &#xA;                 ELSE '' END +&#xA;            CASE WHEN TRY_CONVERT(DATE, s.[Date]) IS NULL THEN 'Invalid Date; ' ELSE '' END +&#xA;            CASE WHEN TRY_CONVERT(TIME, s.StartTime) IS NULL THEN 'Invalid StartTime; ' ELSE '' END +&#xA;            CASE WHEN TRY_CONVERT(TIME, s.EndTime) IS NULL THEN 'Invalid EndTime; ' ELSE '' END AS Message,&#xA;        GETDATE() AS ProcessedDate&#xA;    INTO #SkippedRecords&#xA;    FROM Timesheet.TimesheetStaging s&#xA;    LEFT JOIN Timesheet.Employee e ON s.EmployeeName = e.EmployeeName&#xA;    LEFT JOIN Timesheet.Client c ON s.ClientName = c.ClientName&#xA;    LEFT JOIN Timesheet.Project p ON s.ProjectName = p.ProjectName AND p.ClientID = c.ClientID&#xA;    LEFT JOIN Timesheet.Description d ON s.ActivityName = d.DescriptionName&#xA;    WHERE s.IsValid = 1 AND (&#xA;        e.EmployeeID IS NULL OR&#xA;        (s.ClientName IS NOT NULL AND c.ClientID IS NULL) OR&#xA;        (s.ProjectName IS NOT NULL AND p.ProjectID IS NULL) OR&#xA;        d.DescriptionID IS NULL OR&#xA;        d.DescriptionID = 8020 OR&#xA;        TRY_CONVERT(DATE, s.[Date]) IS NULL OR&#xA;        TRY_CONVERT(TIME, s.StartTime) IS NULL OR&#xA;        TRY_CONVERT(TIME, s.EndTime) IS NULL&#xA;    );&#xA;&#xA;    -- Step 2: Insert valid, non-duplicate records&#xA;    INSERT INTO Timesheet.Timesheet (&#xA;        EmployeeID, [Date], [DayOfWeek], ClientID, ProjectID, DescriptionID,&#xA;        BillableStatus, Comments, TotalHours, StartTime, EndTime&#xA;    )&#xA;    SELECT &#xA;        e.EmployeeID,&#xA;        TRY_CONVERT(DATE, s.[Date]),&#xA;        s.[DayOfWeek],&#xA;        c.ClientID,&#xA;        p.ProjectID,&#xA;        d.DescriptionID,&#xA;        s.BillableStatus,&#xA;        s.Comments,&#xA;        TRY_CONVERT(DECIMAL(5,2), s.TotalHours),&#xA;        TRY_CONVERT(TIME, s.StartTime),&#xA;        TRY_CONVERT(TIME, s.EndTime)&#xA;    FROM Timesheet.TimesheetStaging s&#xA;    JOIN Timesheet.Employee e ON s.EmployeeName = e.EmployeeName&#xA;    LEFT JOIN Timesheet.Client c ON s.ClientName = c.ClientName&#xA;    LEFT JOIN Timesheet.Project p ON s.ProjectName = p.ProjectName AND p.ClientID = c.ClientID&#xA;    JOIN Timesheet.Description d ON s.ActivityName = d.DescriptionName&#xA;    WHERE s.IsValid = 1&#xA;      AND e.EmployeeID IS NOT NULL&#xA;      AND d.DescriptionID IS NOT NULL AND d.DescriptionID &lt;&gt; 8020&#xA;      AND NOT EXISTS (&#xA;            SELECT 1&#xA;            FROM Timesheet.Timesheet t&#xA;            WHERE t.EmployeeID = e.EmployeeID&#xA;              AND t.[Date] = TRY_CONVERT(DATE, s.[Date])&#xA;              AND t.StartTime = TRY_CONVERT(TIME, s.StartTime)&#xA;              AND t.EndTime = TRY_CONVERT(TIME, s.EndTime)&#xA;              AND COALESCE(t.ClientID, -1) = COALESCE(c.ClientID, -1)&#xA;              AND COALESCE(t.ProjectID, -1) = COALESCE(p.ProjectID, -1)&#xA;        );&#xA;&#xA;    -- Step 3: Log inserted records&#xA;    INSERT INTO Timesheet.AuditLog (&#xA;        EmployeeName,&#xA;        FileName,&#xA;        TableName,&#xA;        Action,&#xA;        Message,&#xA;        ProcessedDate&#xA;    )&#xA;    SELECT &#xA;        COALESCE(s.EmployeeName, 'Unknown') AS EmployeeName,&#xA;        COALESCE(s.FileName, 'Unknown') AS FileName,&#xA;        'Timesheet' AS TableName,&#xA;        'Insert' AS Action,&#xA;        'Inserted: Project=' + COALESCE(s.ProjectName, 'Unknown') + ', Hours=' + COALESCE(CAST(s.TotalHours AS NVARCHAR(10)), '0'),&#xA;        GETDATE()&#xA;    FROM Timesheet.TimesheetStaging s&#xA;    JOIN Timesheet.Employee e ON s.EmployeeName = e.EmployeeName&#xA;    JOIN Timesheet.Timesheet t ON t.EmployeeID = e.EmployeeID&#xA;        AND t.[Date] = TRY_CONVERT(DATE, s.[Date])&#xA;        AND t.TotalHours = TRY_CONVERT(DECIMAL(5,2), s.TotalHours)&#xA;    WHERE s.IsValid = 1;&#xA;&#xA;    -- Step 4: Update existing records&#xA;    UPDATE t&#xA;    SET &#xA;        t.ClientID = c.ClientID,&#xA;        t.ProjectID = p.ProjectID,&#xA;        t.DescriptionID = d.DescriptionID,&#xA;        t.BillableStatus = s.BillableStatus,&#xA;        t.Comments = s.Comments,&#xA;        t.TotalHours = TRY_CONVERT(DECIMAL(5,2), s.TotalHours),&#xA;        t.StartTime = TRY_CONVERT(TIME, s.StartTime),&#xA;        t.EndTime = TRY_CONVERT(TIME, s.EndTime)&#xA;    FROM Timesheet.Timesheet t&#xA;    JOIN Timesheet.Employee e ON t.EmployeeID = e.EmployeeID&#xA;    JOIN Timesheet.TimesheetStaging s ON s.EmployeeName = e.EmployeeName&#xA;        AND t.[Date] = TRY_CONVERT(DATE, s.[Date])&#xA;        AND t.StartTime = TRY_CONVERT(TIME, s.StartTime)&#xA;    LEFT JOIN Timesheet.Client c ON s.ClientName = c.ClientName&#xA;    LEFT JOIN Timesheet.Project p ON s.ProjectName = p.ProjectName AND p.ClientID = c.ClientID&#xA;    JOIN Timesheet.Description d ON s.ActivityName = d.DescriptionName&#xA;    WHERE s.IsValid = 1&#xA;      AND d.DescriptionID &lt;&gt; 8020;&#xA;&#xA;    -- Step 5: Log updates&#xA;    INSERT INTO Timesheet.AuditLog (&#xA;        EmployeeName,&#xA;        FileName,&#xA;        TableName,&#xA;        Action,&#xA;        Message,&#xA;        ProcessedDate&#xA;    )&#xA;    SELECT &#xA;        COALESCE(s.EmployeeName, 'Unknown') AS EmployeeName,&#xA;        COALESCE(s.FileName, 'Unknown') AS FileName,&#xA;        'Timesheet' AS TableName,&#xA;        'Update' AS Action,&#xA;        'Updated: Project=' + COALESCE(s.ProjectName, 'Unknown') + ', Hours=' + COALESCE(CAST(s.TotalHours AS NVARCHAR(10)), '0'),&#xA;        GETDATE()&#xA;    FROM Timesheet.TimesheetStaging s&#xA;    JOIN Timesheet.Employee e ON s.EmployeeName = e.EmployeeName&#xA;    JOIN Timesheet.Timesheet t ON t.EmployeeID = e.EmployeeID&#xA;        AND t.[Date] = TRY_CONVERT(DATE, s.[Date])&#xA;        AND t.TotalHours = TRY_CONVERT(DECIMAL(5,2), s.TotalHours)&#xA;    WHERE s.IsValid = 1;&#xA;&#xA;    -- Step 6: Delete records with -1 hours, excluding DescriptionID 8020&#xA;    DELETE t&#xA;    FROM Timesheet.Timesheet t&#xA;    JOIN Timesheet.Employee e ON e.EmployeeID = t.EmployeeID&#xA;    JOIN Timesheet.TimesheetStaging s ON s.EmployeeName = e.EmployeeName&#xA;        AND t.[Date] = TRY_CONVERT(DATE, s.[Date])&#xA;        AND t.StartTime = TRY_CONVERT(TIME, s.StartTime)&#xA;        AND t.EndTime = TRY_CONVERT(TIME, s.EndTime)&#xA;    LEFT JOIN Timesheet.Description d ON s.ActivityName = d.DescriptionName&#xA;    WHERE s.IsValid = 1&#xA;      AND TRY_CONVERT(DECIMAL(5,2), s.TotalHours) = -1&#xA;      AND (d.DescriptionID IS NULL OR d.DescriptionID &lt;&gt; 8020);&#xA;&#xA;    -- Step 7: Log deleted records&#xA;    INSERT INTO Timesheet.AuditLog (&#xA;        EmployeeName,&#xA;        FileName,&#xA;        TableName,&#xA;        Action,&#xA;        Message,&#xA;        ProcessedDate&#xA;    )&#xA;    SELECT &#xA;        COALESCE(s.EmployeeName, 'Unknown') AS EmployeeName,&#xA;        COALESCE(s.FileName, 'Unknown') AS FileName,&#xA;        'Timesheet' AS TableName,&#xA;        'Delete' AS Action,&#xA;        'Deleted: Project=' + COALESCE(s.ProjectName, 'Unknown'),&#xA;        GETDATE()&#xA;    FROM Timesheet.TimesheetStaging s&#xA;    JOIN Timesheet.Employee e ON s.EmployeeName = e.EmployeeName&#xA;    JOIN Timesheet.Timesheet t ON t.EmployeeID = e.EmployeeID&#xA;        AND t.[Date] = TRY_CONVERT(DATE, s.[Date])&#xA;        AND t.StartTime = TRY_CONVERT(TIME, s.StartTime)&#xA;        AND t.EndTime = TRY_CONVERT(TIME, s.EndTime)&#xA;    LEFT JOIN Timesheet.Description d ON s.ActivityName = d.DescriptionName&#xA;    WHERE s.IsValid = 1&#xA;      AND TRY_CONVERT(DECIMAL(5,2), s.TotalHours) = -1&#xA;      AND (d.DescriptionID IS NULL OR d.DescriptionID &lt;&gt; 8020);&#xA;&#xA;    -- Clean up temporary table&#xA;    DROP TABLE IF EXISTS #SkippedRecords;&#xA;&#xA;END TRY&#xA;BEGIN CATCH&#xA;    INSERT INTO Timesheet.ErrorLog (&#xA;        ErrorDate,&#xA;        ErrorTask,&#xA;        ErrorDescription,&#xA;        SourceComponent,&#xA;        UserName&#xA;    )&#xA;    VALUES (&#xA;        GETDATE(),&#xA;        'Timesheet Import Process',&#xA;        ERROR_MESSAGE(),&#xA;        'TimesheetETL',&#xA;        SYSTEM_USER&#xA;    );&#xA;END CATCH;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Loop Employee Folders Script"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{F1C6B180-43C7-45B6-A1C5-A472FC1154C3}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop Employee Folders Script"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0"
        DTS:LoggingMode="2" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_d8511a1dac3b43d6910ee4a6b76999b3"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::FolderPath"
          ReadWriteVariables="User::FolderList">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_d8511a1dac3b43d6910ee4a6b76999b3.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{28077679-0E06-439E-BDFE-F41A9609864C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_5574ccf38d344d97a48f8e333ae51ec7</RootNamespace>
    <AssemblyName>ST_d8511a1dac3b43d6910ee4a6b76999b3</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_5574ccf38d344d97a48f8e333ae51ec7
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                string folderPath = Dts.Variables["User::FolderPath"].Value.ToString().Trim();
                if (Directory.Exists(folderPath))
                {
                    string[] folders = Directory.GetDirectories(folderPath);
                    DataTable folderTable = new DataTable();
                    folderTable.Columns.Add("FolderPath", typeof(string));
                    foreach (string folder in folders)
                    {
                        folderTable.Rows.Add(folder); 
                    }
                    Dts.Variables["User::FolderList"].Value = folderTable;
                    string folderList = folders.Length > 0 ? string.Join("\n", folders) : "No folders found";
            
                }
                else
                {
                    MessageBox.Show($"Directory not found: {folderPath}", "Error - Invalid Path");
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error - Exception");
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_d8511a1dac3b43d6910ee4a6b76999b3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_d8511a1dac3b43d6910ee4a6b76999b3</msb:DisplayName>
    <msb:ProjectId>{959D2A31-F3ED-40D7-B13A-602C459DF083}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_d8511a1dac3b43d6910ee4a6b76999b3.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Settings.get_Default():ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Sett" +
    "ings")]

namespace ST_5574ccf38d344d97a48f8e333ae51ec7.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_5574ccf38d344d97a48f8e333ae51ec7")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_5574ccf38d344d97a48f8e333ae51ec7")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_5574ccf38d344d97a48f8e333ae51ec7.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_d8511a1dac3b43d6910ee4a6b76999b3.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALVPSGgAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAAYjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABAxAABPAAAAAEAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABE
MQAAAAAAAEgAAAACAAUA3CEAAHwOAAABAAAAAAAAAFgwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBQAHAQAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAApvFQAACgoGKBYAAAo5hgAAAAYoFwAACgtzGAAACgwIbxkAAApyIwAAcNAdAAABKBoA
AApvGwAACiYHDRYTBCsjCREEmhMFCG8cAAAKF40TAAABJRYRBaJvHQAACiYRBBdYEwQRBAmOaTLW
AigQAAAKbxEAAApyOQAAcG8SAAAKCG8eAAAKB44sMHJbAABwBygfAAAKJisicl8AAHAGKCAAAApy
iwAAcCghAAAKJgIoEAAAChdvIgAACt4sEwZytQAAcBEGbyMAAAooIAAACnLFAABwKCEAAAomAigQ
AAAKF28iAAAK3gAqAAEQAAAAAAAA2toALBAAAAEeAigkAAAKKh4CKCUAAAoqrn4BAAAELR5y6QAA
cNADAAACKBoAAApvJgAACnMnAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIo
KAAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAHAE
AAAjfgAA3AQAAHgGAAAjU3RyaW5ncwAAAABUCwAAXAEAACNVUwCwDAAAEAAAACNHVUlEAAAAwAwA
ALwBAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAnAAAABQAAAAYAAAAJAAAA
AQAAACgAAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABgAAAAEAAAABAAAAAADTAwEAAAAA
AAYAeQLpBAYACAPpBAYAxQHWBA8AXQUAAAYA8gFmBAYAXAJmBAYAPQJmBAYA7wJmBAYAmQJmBAYA
sgJmBAYACQJmBAYAJAJAAwoAzQKCAwoARAGCAw4AuACDAAYAnwQEBAYAEAQEBAYAqAHWBAYAFwYE
BAYAuQQJBQYAqQRRBBIAeAG9AxIA2QG9AxIAYAE8BAYAjQHpBAoAqwOCAxYArgXvABYAwgDvAAYA
XAMEBAYAawZSAA4AeASDAAYADwEEBAYAywAEBA4AMQSDAA4AjQSDAA4ARgaDABoAUwbBBRoAKgbB
BQYAYgZmBAAAAABJAAAAAAABAAEAAQAQACEEJQA5AAEAAQAAABAAEAV7BU0AAQADAAABEAC4BXsF
YQADAAcAAwEAAPIFAABFAAQACgARABUEtgARADQBugARAJwAvgAGBnsAwgBWgOIFxQBWgBQBxQBQ
IAAAAACGACcEBgABAHQhAAAAAIYYyQQGAAEAfCEAAAAAgxjJBAYAAQCEIQAAAACTCLUEyQABALAh
AAAAAJMIHAHOAAEAtyEAAAAAkwgoAdMAAQC/IQAAAACWCB4G2QACAMYhAAAAAIYYyQQGAAIAziEA
AAAAkRjPBN4AAgAAAAEAOgMJAMkEAQARAMkEBgAZAMkECgApAMkEEAAxAMkEEAA5AMkEEABBAMkE
EABJAMkEEABRAMkEEABZAMkEEABhAMkEEABpAMkEBgCRAMkEBgC5AMkEFQDJAMkEBgBxAOoFKQDR
AKoFLgDZAPsDMwDhACYDOQCZAFoDPQDpAAsEPQDxAAAGQQDxAGwFRgB5AMkEBgB5ANYFTAABAd0A
UQD5AJgAWgB5AAcGZAAZAZgAagDhADADcgDpACwEdwDpABAGfgApAU4GhADRADcGAQCBAKwAPQBx
AMkEBgCZAMkEBgABAV4GjAChAMkEkgDBAMkEBgAIABQArAAIABgAsQApAHMAGQEuAAsA8QAuABMA
+gAuABsAGQEuACMAIgEuACsASwEuADMASwEuADsAUQEuAEMAIgEuAEsAWQEuAFMASwEuAFsAcgFD
AGMAsQBJAHMAGQFhAHsAsQBjAGsAsQAbAAMAAQAEAAMAAAC5BOIAAAA8AecAAAAiBuwAAgAEAAMA
AgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAABMJCp7AAAAAAAAAQAAAAQAAAAAAAAAAAAAAJoAjwAA
AAAAEAAAAAAAAAAAAAAAowBjAwAAAAAEAAAAAAAAAAAAAACaAIMAAAAAAAQAAAAAAAAAAAAAAJoA
BAQAAAAAEAAAAAAAAAAAAAAAowBcAAAAAAAEAAAAAAAAAAAAAACaAMEFAAAAAAAAAAABAAAAGgUA
AAUAAgAAAAAAAFNUX2Q4NTExYTFkYWMzYjQzZDY5MTBlZTRhNmI3Njk5OWIzAFNUXzU1NzRjY2Yz
OGQzNDRkOTdhNDhmOGUzMzNhZTUxZWM3ADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBBZGQAZGVmYXVs
dEluc3RhbmNlAGdldF9NZXNzYWdlAERhdGFUYWJsZQBWYXJpYWJsZQBSdW50aW1lVHlwZUhhbmRs
ZQBHZXRUeXBlRnJvbUhhbmRsZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFR5cGUA
RmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRy
aWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1i
bHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdv
cmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3Jp
cHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVBy
b2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tF
bnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0
aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAVG9TdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lz
dGVtLkNvbXBvbmVudE1vZGVsAFNUX2Q4NTExYTFkYWMzYjQzZDY5MTBlZTRhNmI3Njk5OWIzLmRs
bABnZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4ASm9pbgBE
YXRhQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3Rl
bS5SZWZsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAEV4Y2Vw
dGlvbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5jdG9yAC5jY3RvcgBTeXN0ZW0u
RGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3Vy
Y2VzAFNUXzU1NzRjY2YzOGQzNDRkOTdhNDhmOGUzMzNhZTUxZWM3LlByb3BlcnRpZXMuUmVzb3Vy
Y2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBHZXREaXJlY3RvcmllcwBTVF81NTc0Y2NmMzhk
MzQ0ZDk3YTQ4ZjhlMzMzYWU1MWVjNy5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MA
U3lzdGVtLldpbmRvd3MuRm9ybXMAZ2V0X0NvbHVtbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJl
c3VsdHMARXhpc3RzAGdldF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQARGlhbG9nUmVz
dWx0AHNldF9UYXNrUmVzdWx0AERhdGFSb3cAU2hvdwBNZXNzYWdlQm94AGdldF9Bc3NlbWJseQBE
aXJlY3RvcnkAAAAAACFVAHMAZQByADoAOgBGAG8AbABkAGUAcgBQAGEAdABoAAAVRgBvAGwAZABl
AHIAUABhAHQAaAAAIVUAcwBlAHIAOgA6AEYAbwBsAGQAZQByAEwAaQBzAHQAAAMKAAArRABpAHIA
ZQBjAHQAbwByAHkAIABuAG8AdAAgAGYAbwB1AG4AZAA6ACAAAClFAHIAcgBvAHIAIAAtACAASQBu
AHYAYQBsAGkAZAAgAFAAYQB0AGgAAQ9FAHIAcgBvAHIAOgAgAAAjRQByAHIAbwByACAALQAgAEUA
eABjAGUAcAB0AGkAbwBuAAFxUwBUAF8ANQA1ADcANABjAGMAZgAzADgAZAAzADQANABkADkANwBh
ADQAOABmADgAZQAzADMAMwBhAGUANQAxAGUAYwA3AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIA
ZQBzAG8AdQByAGMAZQBzAAAALYqHqjfsP0e6ksBegCtPAQAEIAEBCAMgAAEFIAEBEREEIAEBDgUg
AQERWQ0HBw4dDhI9HQ4IDhJBBCAAEmkEIAASbQUgARJxHAMgABwDIAAOBAABAg4FAAEdDg4EIAAS
fQgAARKAgRGAhQkgAhKAiQ4SgIEFIAASgI0HIAESgJEdHAQgAQEcBgACDg4dDgUAAg4ODgcAAhGA
mQ4OBSAAEoCdByACAQ4SgJ0It3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSUQMGElUDBhIQ
AgYIAwYRFAQAABJRBAAAElUFAAEBElUEAAASEAMAAAEECAASUQQIABJVBAgAEhAIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzU1NzRjY2YzOGQz
NDRkOTdhNDhmOGUzMzNhZTUxZWM3AAAFAQAAAAAHAQACSFAAABgBABNDb3B5cmlnaHQgQCBIUCAy
MDI1AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuN7QAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5S
ZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGlt
ZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAA4MQAAAAAAAAAAAABSMQAAACAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAARDEAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAA
AAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAIgQAAAAAAAAAAAAAIgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABACp7TCQAAAEAKntMJD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBIIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAF4DAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAmAAMAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAEgAUAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBv
AG4AAAAAAFMAVABfADUANQA3ADQAYwBjAGYAMwA4AGQAMwA0ADQAZAA5ADcAYQA0ADgAZgA4AGUA
MwAzADMAYQBlADUAMQBlAGMANwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAu
ADAALgA5ADIAOQAyAC4AMwAxADUAMwAwAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0A
ZQAAAFMAVABfAGQAOAA1ADEAMQBhADEAZABhAGMAMwBiADQAMwBkADYAOQAxADAAZQBlADQAYQA2
AGIANwA2ADkAOQA5AGIAMwAuAGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBn
AGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYA
aQBsAGUAbgBhAG0AZQAAAFMAVABfAGQAOAA1ADEAMQBhADEAZABhAGMAMwBiADQAMwBkADYAOQAx
ADAAZQBlADQAYQA2AGIANwA2ADkAOQA5AGIAMwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMA
dABOAGEAbQBlAAAAAABTAFQAXwA1ADUANwA0AGMAYwBmADMAOABkADMANAA0AGQAOQA3AGEANAA4
AGYAOABlADMAMwAzAGEAZQA1ADEAZQBjADcAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADkAMgA5ADIALgAzADEANQAzADAAAAAAAEYADwABAEEAcwBzAGUAbQBi
AGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADkAMgA5ADIALgAzADEANQAzADAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAGQxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Loop Through Employee Folders ADO"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{DDDC8665-56D7-4661-B9D1-8AFC0DA7301D}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop Through Employee Folders ADO">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{5CB7F1BB-DDD8-464A-80E0-5AC4270FD9CD}"
        DTS:ObjectName="{A3FEC5D4-4251-42A6-AB24-B26F02C9E470}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::FolderList" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0"
        DTS:LoggingMode="2" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Loop Through Employee Folders ADO\Extract Employee Names"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{8F256340-7633-4EA0-BE25-0B101C8BC722}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Extract Employee Names"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_a32f6261297546b9afdbbdc2d95d915b"
              VSTAMajorVersion="16"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::EmployeeFolderPath,User::EmployeeName">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_bf3844c7364c437a8085f9930863c98d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_bf3844c7364c437a8085f9930863c98d")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_a32f6261297546b9afdbbdc2d95d915b.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AE486A85-CE67-4B66-8F51-46E72E62ECF6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_bf3844c7364c437a8085f9930863c98d</RootNamespace>
    <AssemblyName>ST_a32f6261297546b9afdbbdc2d95d915b</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_bf3844c7364c437a8085f9930863c98d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                // 1. Get and validate folder path
                string folderPath = Dts.Variables["User::EmployeeFolderPath"].Value.ToString().Trim();

                if (string.IsNullOrWhiteSpace(folderPath))
                {
                    MessageBox.Show("Empty folder path provided!",
                                   "Validation Error",
                                   MessageBoxButtons.OK,
                                   MessageBoxIcon.Error);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                // 2. Check directory exists
                if (!Directory.Exists(folderPath))
                {
                    MessageBox.Show($"Folder not found:\n{folderPath}",
                                   "Directory Missing",
                                   MessageBoxButtons.OK,
                                   MessageBoxIcon.Warning);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                // 3. Extract employee name
                string employeeName = Path.GetFileName(folderPath.TrimEnd('\\'));

                if (string.IsNullOrWhiteSpace(employeeName))
                {
                    MessageBox.Show($"Could not extract name from path:\n{folderPath}",
                                   "Name Extraction Error",
                                   MessageBoxButtons.OK,
                                   MessageBoxIcon.Error);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                // 5. Store result and complete
                Dts.Variables["User::EmployeeName"].Value = employeeName;
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Unexpected error:\n{ex.Message}\n\nPlease contact support.",
                               "Critical Error",
                               MessageBoxButtons.OK,
                               MessageBoxIcon.Error);
                Dts.Events.FireError(0, "Employee Processing", ex.Message, "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_a32f6261297546b9afdbbdc2d95d915b</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_a32f6261297546b9afdbbdc2d95d915b</msb:DisplayName>
    <msb:ProjectId>{136AFCD7-4CA6-4563-95DB-E7263CC9DD7F}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_a32f6261297546b9afdbbdc2d95d915b.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Settings.get_Default():ST_bf3844c7364c437a8085f9930863c98d.Properties.Sett" +
    "ings")]

namespace ST_bf3844c7364c437a8085f9930863c98d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_bf3844c7364c437a8085f9930863c98d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_a32f6261297546b9afdbbdc2d95d915b.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALlSSGgAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAAnjIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAEwyAABPAAAAAEAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAApBIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACA
MgAAAAAAAEgAAAACAAUAHCIAAHgPAAABAAAAAAAAAJQxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgBIAQAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAApvFQAACgoGKBYAAAosJHIzAABwcmsAAHAWHxAoFwAACiYCKBAAAAoXbxgAAArd9gAA
AAYoGQAACi0qco0AAHAGKBoAAApyswAAcBYfMCgXAAAKJgIoEAAAChdvGAAACt3EAAAABheNIgAA
ASUWH1ydbxsAAAooHAAACgsHKBYAAAosJ3LXAABwBigaAAAKch0BAHAWHxAoFwAACiYCKBAAAAoX
bxgAAArefgIoEAAACm8RAAAKckkBAHBvEgAACgdvHQAACgIoEAAAChZvGAAACt5VDHJvAQBwCG8e
AAAKcpUBAHAoHwAACnLJAQBwFh8QKBcAAAomAigQAAAKbyAAAAoWcucBAHAIbx4AAApyDwIAcBZv
IQAACiYCKBAAAAoXbxgAAAreACoBEAAAAAAAAPLyAFUPAAABHgIoIgAACioeAigjAAAKKq5+AQAA
BC0echECAHDQAwAAAigkAAAKbyUAAApzJgAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4D
AAAEKh4CKCcAAAoqLnMIAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAF
AGwAAABUBAAAI34AAMAEAAB0BgAAI1N0cmluZ3MAAAAANAsAAIQCAAAjVVMAuA0AABAAAAAjR1VJ
RAAAAMgNAACwAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAJwAAAAUAAAAG
AAAACQAAAAEAAAAnAAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAUAAAABAAAAAQAAAAAA
5QMBAAAAAAAGAIYC9gQGABUD9gQGANIB4wQPAGoFAAAGAP8BdwQGAGkCdwQGAEoCdwQGAPwCdwQG
AKYCdwQGAL8CdwQGABYCdwQGADECTQMKANoClAMKAFEBlAMGAIkEFgQGACIEFgQGALUB4wQGAB0G
FgQGAKgEFgUGAJMEYgQOAIUBzwMOAOYBzwMOAG0BTQQGAJoB9gQKAL0DlAMSAKwF/AASAMMA/AAG
AGkDFgQWAFEGvwUWADAGvwUWANQFvwUWAD4EvwUGAGkGCgAGAJ8EFgQGAHADCgAKALgElAMGABwB
FgQGAMwAFgQGAGAGdwQAAAAAAQAAAAAAAQABAAEAEAAzBGgAOQABAAEAAAAQAB0FeQVJAAEAAwAA
ARAAtgV5BV0AAwAHAAMBAAD2BQAAQQAEAAoAEQAnBKoAEQBBAa4AEQCnALIABgYzALYAVoDmBbkA
VoAhAbkAUCAAAAAAhgA5BAYAAQC0IQAAAACGGNYEBgABALwhAAAAAIMY1gQGAAEAxCEAAAAAkwik
BL0AAQDwIQAAAACTCCkBwgABAPchAAAAAJMINQHHAAEA/yEAAAAAlggkBs0AAgAGIgAAAACGGNYE
BgACAA4iAAAAAJEY3ATSAAIAAAABAEcDCQDWBAEAEQDWBAYAGQDWBAoAKQDWBBAAMQDWBBAAOQDW
BBAAQQDWBBAASQDWBBAAUQDWBBAAWQDWBBAAYQDWBBAAaQDWBAYAiQDWBAYAsQDWBBUAwQDWBAYA
cQDuBSIAyQCoBScA0QANBCwA2QAzAzIAkQBnAzYA4QAdBDYA4QCUADoA6QBMBj8AyQA9BgEACQEP
BjoA4QAWBksA4QCMAFEAGQHwAFcA2QA9A1wAeQC3ADYA4QAWBmEAyQAEBmgAIQHMBG4AcQDWBAYA
kQDWBAYAKQHeAHcAKQFcBoAAmQDWBIYAuQDWBAYACAAUAKAACAAYAKUAKQBzAA0BLgALAOUALgAT
AO4ALgAbAA0BLgAjABYBLgArAD8BLgAzAD8BLgA7AEUBLgBDABYBLgBLAE0BLgBTAD8BLgBbAGYB
QwBjAKUASQBzAA0BYQB7AKUAYwBrAKUAGwADAAEABAADAAAAqATWAAAASQHbAAAAKAbgAAIABAAD
AAIABQAFAAEABgAFAAIABwAHAASAAAABAAAATCSsfAAAAAAAADsAAAAEAAAAAAAAAAAAAACOAF8A
AAAAABAAAAAAAAAAAAAAAJcAdQMAAAAABAAAAAAAAAAAAAAAjgAWBAAAAAAQAAAAAAAAAAAAAACX
ABQAAAAAAAQAAAAAAAAAAAAAAI4AvwUAAAAAAAAAAAEAAAAnBQAABQACAAAAADxNb2R1bGU+AFN5
c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTVF9hMzJmNjI2
MTI5NzU0NmI5YWZkYmJkYzJkOTVkOTE1YgBtc2NvcmxpYgBTVF9iZjM4NDRjNzM2NGM0MzdhODA4
NWY5OTMwODYzYzk4ZABUcmltRW5kAElzTnVsbE9yV2hpdGVTcGFjZQBkZWZhdWx0SW5zdGFuY2UA
Z2V0X01lc3NhZ2UAVmFyaWFibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUA
R2V0RmlsZU5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUA
Z2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVj
dE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFRvU3RyaW5nAFBhdGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVt
LkNvbXBvbmVudE1vZGVsAFNUX2EzMmY2MjYxMjk3NTQ2YjlhZmRiYmRjMmQ5NWQ5MTViLmRsbABn
ZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4ATWVzc2FnZUJv
eEljb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJl
ZmxlY3Rpb24ARXhjZXB0aW9uAEN1bHR1cmVJbmZvAENoYXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBF
dmVudHNPYmplY3RXcmFwcGVyAEZpcmVFcnJvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0
aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9i
ZjM4NDRjNzM2NGM0MzdhODA4NWY5OTMwODYzYzk4ZC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNv
dXJjZXMARGVidWdnaW5nTW9kZXMAU1RfYmYzODQ0YzczNjRjNDM3YTgwODVmOTkzMDg2M2M5OGQu
UHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAE1l
c3NhZ2VCb3hCdXR0b25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMA
RXhpc3RzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVz
dWx0AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkARGlyZWN0b3J5AAAAMVUAcwBlAHIAOgA6
AEUAbQBwAGwAbwB5AGUAZQBGAG8AbABkAGUAcgBQAGEAdABoAAA3RQBtAHAAdAB5ACAAZgBvAGwA
ZABlAHIAIABwAGEAdABoACAAcAByAG8AdgBpAGQAZQBkACEAACFWAGEAbABpAGQAYQB0AGkAbwBu
ACAARQByAHIAbwByAAAlRgBvAGwAZABlAHIAIABuAG8AdAAgAGYAbwB1AG4AZAA6AAoAACNEAGkA
cgBlAGMAdABvAHIAeQAgAE0AaQBzAHMAaQBuAGcAAEVDAG8AdQBsAGQAIABuAG8AdAAgAGUAeAB0
AHIAYQBjAHQAIABuAGEAbQBlACAAZgByAG8AbQAgAHAAYQB0AGgAOgAKAAArTgBhAG0AZQAgAEUA
eAB0AHIAYQBjAHQAaQBvAG4AIABFAHIAcgBvAHIAACVVAHMAZQByADoAOgBFAG0AcABsAG8AeQBl
AGUATgBhAG0AZQAAJVUAbgBlAHgAcABlAGMAdABlAGQAIABlAHIAcgBvAHIAOgAKAAAzCgAKAFAA
bABlAGEAcwBlACAAYwBvAG4AdABhAGMAdAAgAHMAdQBwAHAAbwByAHQALgAAHUMAcgBpAHQAaQBj
AGEAbAAgAEUAcgByAG8AcgAAJ0UAbQBwAGwAbwB5AGUAZQAgAFAAcgBvAGMAZQBzAHMAaQBuAGcA
AAEAcVMAVABfAGIAZgAzADgANAA0AGMANwAzADYANABjADQAMwA3AGEAOAAwADgANQBmADkAOQAz
ADAAOAA2ADMAYwA5ADgAZAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAAALv2CNhD4ZRJgO0Q12tDS34ABCABAQgDIAABBSABARERBCABAQ4FIAEBEVUGBwMODhI9BCAA
EmUEIAASaQUgARJtHAMgABwDIAAOBAABAg4LAAQReQ4OEX0RgIEFAAIODg4FIAEOHQMEAAEODgQg
AQEcBgADDg4ODgUgABKAkQggBQIIDg4OCAgAARKAlRGAmQUgABKAnQcgAgEOEoCdCLd6XFYZNOCJ
CImEXc2AgMyRBAAAAAAEAQAAAAMGEk0DBhJRAwYSEAIGCAMGERQEAAASTQQAABJRBQABARJRBAAA
EhADAAABBAgAEk0ECAASUQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQgBAAIAAAAAACgBACNTVF9iZjM4NDRjNzM2NGM0MzdhODA4NWY5OTMwODYzYzk4ZAAABQEA
AAAABwEAAkhQAAAYAQATQ29weXJpZ2h0IEAgSFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0Lje0AAAA
zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBW
ZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYx
OTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBB
RFBBRFC0AAAAdDIAAAAAAAAAAAAAjjIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAyAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAAiBAAAAAAAAAAAAAAiBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEArHxMJAAAAQCsfEwkPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEggMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAXgMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBUAF8AYgBmADMAOAA0ADQAYwA3ADMANgA0AGMANAAzADcAYQA4ADAAOAA1AGYAOQA5
ADMAMAA4ADYAMwBjADkAOABkAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADkAMgA5ADIALgAzADEAOQAxADYAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBl
AAAAUwBUAF8AYQAzADIAZgA2ADIANgAxADIAOQA3ADUANAA2AGIAOQBhAGYAZABiAGIAZABjADIA
ZAA5ADUAZAA5ADEANQBiAC4AZABsAGwAAABMABQAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBo
AHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAFAAIAAyADAAMgA1AAAAKgABAAEATABlAGcA
YQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBp
AGwAZQBuAGEAbQBlAAAAUwBUAF8AYQAzADIAZgA2ADIANgAxADIAOQA3ADUANAA2AGIAOQBhAGYA
ZABiAGIAZABjADIAZAA5ADUAZAA5ADEANQBiAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0
AE4AYQBtAGUAAAAAAFMAVABfAGIAZgAzADgANAA0AGMANwAzADYANABjADQAMwA3AGEAOAAwADgA
NQBmADkAOQAzADAAOAA2ADMAYwA5ADgAZAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOQAyADkAMgAuADMAMQA5ADEANgAAAAAARgAPAAEAQQBzAHMAZQBtAGIA
bAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOQAyADkAMgAuADMAMQA5ADEANgAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAoDIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{580FDCEF-B04C-403A-B324-DE546BC64C3F}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop through each Excel File">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.ForEachFileEnumerator"
            DTS:DTSID="{6F5F2D21-10F4-45DE-850E-702B886B5923}"
            DTS:ObjectName="{33912B39-F78A-4A7B-BC4C-010A56CAD77A}">
            <DTS:PropertyExpression
              DTS:Name="Directory">@[User::EmployeeFolderPath]</DTS:PropertyExpression>
            <DTS:ObjectData>
              <ForEachFileEnumeratorProperties>
                <FEFEProperty
                  Folder="" />
                <FEFEProperty
                  FileSpec="*.xlsx" />
                <FEFEProperty
                  FileNameRetrievalType="0" />
                <FEFEProperty
                  Recurse="0" />
              </ForEachFileEnumeratorProperties>
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0"
            DTS:LoggingMode="2" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{0D6C0196-5791-4D38-9C19-002EA5DEA211}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:ObjectName="Load Raw Data"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add EmployeeNameAndFileName"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[FileName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="RedirectRow"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[FileName]"
                              name="FileName"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">[REVERSE]([LEFT]([REVERSE](@[User::ExcelFilePath]),[FINDSTRING]([REVERSE](@[User::ExcelFilePath]),"\\",1) - 1))</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">REVERSE(LEFT(REVERSE(@[User::ExcelFilePath]),FINDSTRING(REVERSE(@[User::ExcelFilePath]),"\\",1) - 1))</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="RedirectRow"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]"
                              name="EmployeeName"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::EmployeeName]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::EmployeeName]</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion"
                      componentClassID="Microsoft.DataConvert"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input].Columns[Date]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input].Columns[D of Week]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="D of Week"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input].Columns[Client]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input].Columns[Client Project Name]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client Project Name"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input].Columns[Description]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Description"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input].Columns[Billable or Non Billable]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Billable or Non Billable"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDate]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="RedirectRow"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDate]"
                              name="ConvertedDate"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDOfWeek]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="RedirectRow"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDOfWeek]"
                              name="ConvertedDOfWeek"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClient]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="RedirectRow"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClient]"
                              name="ConvertedClient"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClientProject Name]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="RedirectRow"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClientProject Name]"
                              name="ConvertedClientProject Name"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDescription]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="RedirectRow"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDescription]"
                              name="ConvertedDescription"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedBillableorNon Billable]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="RedirectRow"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedBillableorNon Billable]"
                              name="ConvertedBillableorNon Billable"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="ErrorLog"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Inputs[Derived Column Input].Columns[ErrorDescription]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorDescription]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Output].Columns[ErrorDescription]"
                              dataType="nText"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Output].Columns[ErrorDescription]"
                              name="ErrorDescription"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NTEXT)#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorDescription]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NTEXT)ErrorDescription</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="ErrorLog 1"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input].Columns[ErrorDescription]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorDescription]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorTask]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[SourceComponent]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[UserName]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorDescription2]"
                              dataType="nText"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorDescription2]"
                              name="ErrorDescription2"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NTEXT)#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorDescription]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NTEXT)ErrorDescription</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorCode2]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorCode2]"
                              name="ErrorCode2"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">ErrorCode</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorTask2]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorTask2]"
                              name="ErrorTask2"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorTask]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">ErrorTask</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[SourceComponent2]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[SourceComponent2]"
                              name="SourceComponent2"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[SourceComponent]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">SourceComponent</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[UserName2]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[UserName2]"
                              name="UserName2"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[UserName]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">UserName</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert Errors"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[Timesheet].[ErrorLog]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[LocalHost.TimesheetDB 1]"
                          connectionManagerRefId="Package.ConnectionManagers[LocalHost.TimesheetDB 1]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[ErrorTask]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].Columns[ErrorDescription]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="ErrorDescription"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[SourceComponent]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[UserName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[ErrorLogID]"
                              dataType="i4"
                              name="ErrorLogID" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDate]"
                              dataType="dbTimeStamp"
                              name="ErrorDate" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              name="ErrorTask" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                              dataType="nText"
                              name="ErrorDescription" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              name="SourceComponent" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input].ExternalColumns[UserName]"
                              dataType="wstr"
                              length="100"
                              name="UserName" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert into Timesheet Staging"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[Timesheet].[TimesheetStaging]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">0</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          connectionManagerRefId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[Comments]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="Comments"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[Comments]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Comments]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[FileName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="FileName"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[FileName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[FileName]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[Total Hours]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Total Hours"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[TotalHours]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Total Hours]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[Start Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Time"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[StartTime]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[End Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Time"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[EndTime]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[EmployeeName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="EmployeeName"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[EmployeeName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[ConvertedDate]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="ConvertedDate"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[Date]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDate]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[ConvertedDOfWeek]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="255"
                              cachedName="ConvertedDOfWeek"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[DayOfWeek]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDOfWeek]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[ConvertedClient]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="255"
                              cachedName="ConvertedClient"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ClientName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClient]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[ConvertedClientProject Name]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="ConvertedClientProject Name"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ProjectName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClientProject Name]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[ConvertedDescription]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="ConvertedDescription"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ActivityName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDescription]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].Columns[ConvertedBillableorNon Billable]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="ConvertedBillableorNon Billable"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[BillableStatus]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedBillableorNon Billable]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                              dataType="i4"
                              name="StagingID" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[Date]"
                              dataType="wstr"
                              length="50"
                              name="Date" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[DayOfWeek]"
                              codePage="1252"
                              dataType="str"
                              length="10"
                              name="DayOfWeek" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ClientName]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="ClientName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ProjectName]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="ProjectName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ActivityName]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="ActivityName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[BillableStatus]"
                              codePage="1252"
                              dataType="str"
                              length="20"
                              name="BillableStatus" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[Comments]"
                              dataType="nText"
                              name="Comments" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[TotalHours]"
                              dataType="wstr"
                              length="50"
                              name="TotalHours" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[StartTime]"
                              dataType="wstr"
                              length="50"
                              name="StartTime" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[EndTime]"
                              dataType="wstr"
                              length="50"
                              name="EndTime" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[EmployeeName]"
                              dataType="wstr"
                              length="255"
                              name="EmployeeName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[FileName]"
                              dataType="wstr"
                              length="255"
                              name="FileName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[ProcessedDate]"
                              dataType="dbTimeStamp"
                              name="ProcessedDate" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input].ExternalColumns[IsValid]"
                              dataType="bool"
                              name="IsValid" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet"
                      componentClassID="Microsoft.ExcelSource"
                      contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Excel Source"
                      name="Read Timesheet Sheet"
                      usesDispositions="true"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::SelectedSheet</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT * FROM [May$A8:J31]</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">1</property>
                        <property
                          dataType="System.String"
                          description="The mapping from parameters in the SQL command to variables."
                          name="ParameterMapping"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                          connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output]"
                          name="Excel Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Date]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]"
                              name="Date"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[D of Week]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]"
                              name="D of Week"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Client]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]"
                              name="Client"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Client Project Name]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]"
                              name="Client Project Name"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Description]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]"
                              name="Description"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Billable or Non Billable]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]"
                              name="Billable or Non Billable"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Comments]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Comments]"
                              length="4000"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Comments]"
                              name="Comments"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Total Hours]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Total Hours]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Total Hours]"
                              name="Total Hours"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Start Time]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]"
                              name="Start Time"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[End Time]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]"
                              name="End Time"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Date]"
                              dataType="date"
                              name="Date" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[D of Week]"
                              dataType="wstr"
                              length="255"
                              name="D of Week" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Client]"
                              dataType="wstr"
                              length="255"
                              name="Client" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Client Project Name]"
                              dataType="wstr"
                              length="255"
                              name="Client Project Name" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Description]"
                              dataType="wstr"
                              length="255"
                              name="Description" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Billable or Non Billable]"
                              dataType="wstr"
                              length="255"
                              name="Billable or Non Billable" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Comments]"
                              dataType="wstr"
                              length="255"
                              name="Comments" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Total Hours]"
                              dataType="date"
                              name="Total Hours" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[Start Time]"
                              dataType="date"
                              name="Start Time" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].ExternalColumns[End Time]"
                              dataType="date"
                              name="End Time" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output]"
                          isErrorOut="true"
                          name="Excel Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Date]"
                              dataType="date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Date]"
                              name="Date" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[D of Week]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[D of Week]"
                              name="D of Week" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Client]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Client]"
                              name="Client" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Client Project Name]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Client Project Name]"
                              name="Client Project Name" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Description]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Description]"
                              name="Description" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Billable or Non Billable]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Billable or Non Billable]"
                              name="Billable or Non Billable" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Comments]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Comments]"
                              name="Comments" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Total Hours]"
                              dataType="date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Total Hours]"
                              name="Total Hours" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Start Time]"
                              dataType="date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[Start Time]"
                              name="Start Time" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[End Time]"
                              dataType="date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[End Time]"
                              name="End Time" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                      description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                      name="Script Component"
                      version="13">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_7f485a135909439ba085fa7d4eb22148")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_7f485a135909439ba085fa7d4eb22148")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        string taskName = Variables.TaskName;

        

        if (!Row.ErrorCode_IsNull)
        {
            Row.ErrorDescription = ComponentMetaData.GetErrorDescription(Row.ErrorCode);
            Row.ErrorTask = "Data Flow Task: " + taskName;
            Row.SourceComponent = "Derived Column";  
            Row.UserName = Environment.UserName;
        }
    }



}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 ErrorCode
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool ErrorCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 ErrorColumn
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool ErrorColumn_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String ErrorDescription
    {
        set
        {
            this[2] = value;
        }
    }
    public bool ErrorDescription_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorTask
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ErrorTask_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SourceComponent
    {
        set
        {
            this[4] = value;
        }
    }
    public bool SourceComponent_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String UserName
    {
        set
        {
            this[5] = value;
        }
    }
    public bool UserName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Settings.get_Default():SC_7f485a135909439ba085fa7d4eb22148.Properties.Sett" +
    "ings")]

namespace SC_7f485a135909439ba085fa7d4eb22148.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String TaskName
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["TaskName"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Project]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_7f485a135909439ba085fa7d4eb22148</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_7f485a135909439ba085fa7d4eb22148</msb:DisplayName>
    <msb:ProjectId>{3DBBB9AC-7827-409F-B98E-C3D76AC29810}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_7f485a135909439ba085fa7d4eb22148.csproj" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_7f485a135909439ba085fa7d4eb22148.csproj]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0514D14C-2201-4C7E-8CED-A9C14B711308}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_7f485a135909439ba085fa7d4eb22148</RootNamespace>
    <AssemblyName>SC_854ED73ED04B4C19A43BE3A0BDD9DA87</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_7f485a135909439ba085fa7d4eb22148.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_854ED73ED04B4C19A43BE3A0BDD9DA87.dll]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAIz4TWgAAAAAAAAAAOAAIiALATAAABgAAAAIAAAAAAAAgjcA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADA3AABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAiBcAAAAgAAAAGAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAaAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABk
NwAAAAAAAEgAAAACAAUAxCIAALQTAAABAAAAAAAAAHg2AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACioTMAMAUwAAAAEAABECewIAAARv
HAAABgoDbwgAAAYtPgMCKBIAAAoDbwYAAAZvEwAACm8MAAAGA3IBAABwBigUAAAKbw4AAAYDciMA
AHBvEAAABgMoFQAACm8SAAAGKh4CKBYAAAYqKgIDBAUoFgAACipSAnsXAAAKAnsYAAAKFpRvGQAA
Cio6AhYDjB0AAAEoGgAACioiAhYoGwAACipaAywIAhYoHAAACipyQQAAcHMdAAAKelICexcAAAoC
exgAAAoXlG8ZAAAKKiICFygbAAAKKiYCGAMoGgAACipaAywIAhgoHAAACipyQQAAcHMdAAAKeiYC
GQMoGgAACipaAywIAhkoHAAACipyQQAAcHMdAAAKeiYCGgMoGgAACipaAywIAhooHAAACipyQQAA
cHMdAAAKeiYCGwMoGgAACipaAywIAhsoHAAACipyQQAAcHMdAAAKeh4CKB4AAAoqHgIoHwAACip+
AiggAAAKAgJzGgAABn0BAAAEAgJzGwAABn0CAAAEKpIEct4AAHAabyEAAAosFQIFAgMoIgAACg4E
cwUAAAZvGAAABipKKwcCA28ZAAAGA28UAAAGLfEqBio6AigjAAAKAgN9AwAABCo6AigjAAAKAgN9
BAAABCqWAnsEAAAEbyQAAApy7gAAcG8lAAAKKCYAAApvJwAACnQbAAABKh4CKCMAAAoqrn4FAAAE
LR5yAAEAcNAHAAACKCgAAApvKQAACnMqAAAKgAUAAAR+BQAABCoafgYAAAQqHgKABgAABCoafgcA
AAQqHgIoKwAACioucyIAAAaABwAABCpCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwA
AAA0BwAAI34AAKAHAACoCAAAI1N0cmluZ3MAAAAASBAAAHQBAAAjVVMAvBEAABAAAAAjR1VJRAAA
AMwRAADoAQAAI0Jsb2IAAAAAAAAAAgAAAVcVogEJAQAAAPoBMwAWAAABAAAAJgAAAAgAAAAHAAAA
IwAAABcAAAArAAAAEAAAAAEAAAAEAAAAEAAAABMAAAABAAAABgAAAAEAAAAAAKwDAQAAAAAABgCY
AmYGBgAsA2YGBgDkAVMGDwDaBgAABgARAucEBgB7AucEBgBcAucEBgATA+cEBgC4AucEBgDRAucE
BgAoAucEBgBDAmcDCgDsAjEBCgDUBTEBDgDFBTEBCgBZBTEBCgDTBzEBBgB2B48EBgDHAVMGBgDl
BYYGBgBNBdIEEgCXAZYDEgD4AZYDEgB/Ab0EBgCsAWYGFgABAB0GBgCBA48EBgCVB48EBgBWAI8E
BgD5BI8EBgA8BY8EGgAqAPUFGgAaAPUFRwBJCAAAGgA7APUFBgBSAY8EBgDcAI8EBgCcCOcEAAAA
AIAAAAAAAAEAAQABABAAogQAABAAAQABAAEAEAC4BQAAOQABAAUAAQAQALUHAABFAAEAFgABABAA
YwcAAEkAAwAaAAEAEAAkBwAASQAEABsAAAAQAI0G6QZJAAUAHQAAARAAUwfpBmEABwAhAAYAYwep
AAYAJAetAAEAwwexAAEAwwexABEAlgS1ABEAbwG5ABEAsAC9AFAgAAAAAMYASgMGAAEAWCAAAAAA
xgBVAwYAAQBgIAAAAADGAHkIwQABAL8gAAAAAIYYRgYGAAIAxyAAAAAAhhhGBjMAAgDSIAAAAACG
CMAAxwAFAOcgAAAAAIYIzgABAAUA9iAAAAAAhgjUA1UABgD/IAAAAACGCOkDywAGABYhAAAAAIYI
rQTHAAcAKyEAAAAAhggnBFUABwA0IQAAAACGCBMFEAAHAD4hAAAAAIYIPgTLAAgAVSEAAAAAhgiI
AxAACQBfIQAAAACGCBIEywAKAHYhAAAAAIYIoQcQAAsAgCEAAAAAhghaBMsADACXIQAAAACGCBoB
EAANAKEhAAAAAIYI/gPLAA4AuCEAAAAAhgCQCFUADwDAIQAAAACGAH0HVQAPAMghAAAAAIYYRgYG
AA8A6CEAAAAAxgAoCNAADwANIgAAAADGASEIwQATACAiAAAAAMYBeQjBABQAIiIAAAAAhhhGBtoA
FQAxIgAAAACGGEYG2gAWAEAiAAAAAIYIAAHgABcAZiIAAAAAgxhGBgYAFwBuIgAAAACTCOEF5AAX
AJoiAAAAAJMIVwHpABcAoSIAAAAAkwhjAe4AFwCpIgAAAACWCIkH9AAYALAiAAAAAIYYRgYGABgA
uCIAAAAAkRhMBvkAGAAAAAEAlAgAAAEA2gUAAAIALgcAAAMAZwUAAAEAYQMAAAEAYQMAAAEAYQMA
AAEAYQMAAAEAYQMAAAEAYQMAAAEAYQMAAAEAYQMAAAEAYQMAAAEAYQMAAAEAiQAAAAIAJwEAAAMA
2gUAAAQAZwUAAAEA2gUAAAEAlAgAAAEA2QcAAAEA2QcAAAEAYQMJAEYGAQARAEYGBgAZAEYGCgAp
AEYGEAAxAEYGEAA5AEYGEABBAEYGEABJAEYGEABRAEYGEABZAEYGEABhAEYGEABpAEYGBgCZAEYG
BgC5AEYGFQDJAEYGBgCJAEoDBgCJAFUDBgCJAJEAHwDRACgFJADZAG8HKQDhAA0BLwBxAEYGMwBx
ANoFPQBxAC4HQQB5AFMARQBxAIYESgBxAG4EUABxAHUEAQDxAEYGEABxAJAIVQBxAH0HVQCJAEYG
BgDZAFwHWQCJAEIHYACRAEYGBgCJABgHZgABAX0EbACJAGQIcwAJATUIeQAhAe4AgAAhAZgIiQCh
AEYGjwDBAEYGBgAuAAsAGAEuABMAIQEuABsAQAEuACMASQEuACsAcgEuADMAcgEuADsAeAEuAEMA
SQEuAEsAgAEuAFMAcgEuAFsAmQFDAGMA4wHhAHsA4wHjAGsA4wHJAXMAQAHpAXMAQAEbAAMAAQAG
AA0ABwAOAAgAEAAAANIA/QAAAO0DAQEAALEE/QAAACsEAQEAACsFBQEAAEIEAQEAAIwDBQEAABYE
AQEAAKUHBQEAAF4EAQEAAB4BBQEAAAIEAQEAAAQBBQEAAOUFCQEAAHcBDgEAAI0HEwECAAYAAwAB
AAcAAwACAAgABQABAAkABQACAAoABwACAAsACQABAAwACwABAA0ADQABAA4ADwABAA8AEQABABAA
EwABABEAFQABABIAFwABABMAGQACABwAGwACAB4AHQACAB8AHwABACAAHwACACEAIQAEgAAAAQAA
AAAAAAAAAAAAAABcAAAABAAAAAAAAAAAAAAAlwCnAAAAAAAQAAAAAAAAAAAAAACgAOMHAAAAABAA
AAAAAAAAAAAAAKAAAAgAAAAABAAAAAAAAAAAAAAAlwCPBAAAAAAQAAAAAAAAAAAAAACgAJQFAAAA
ABAAAAAAAAAAAAAAAKAAcQUAAAAAAAAAAAEAAACXBgAAAAAAAABJRFRTQ29tcG9uZW50TWV0YURh
dGExMDAASURUU1ZhcmlhYmxlMTAwAElEVFNWYXJpYWJsZXMxMDAASURUU0V2YWx1YXRvckNvbnRl
eHQxMDAAR2V0SW50MzIAU0NfODU0RUQ3M0VEMDRCNEMxOUE0M0JFM0EwQkREOURBODcAPE1vZHVs
ZT4ASW5wdXRJRABnZXRfQ29tcG9uZW50TWV0YURhdGEAbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNl
AGdldF9FcnJvckNvZGUAc2V0X0Vycm9yQ29kZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJv
bUhhbmRsZQBnZXRfVGFza05hbWUAZ2V0X1VzZXJOYW1lAHNldF9Vc2VyTmFtZQBJbnB1dE5hbWUA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAVHlwZQBnZXRfQ3VsdHVyZQBzZXRfQ3Vs
dHVyZQByZXNvdXJjZUN1bHR1cmUAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9yQnJvd3Nh
YmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0
dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3Nl
bWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1l
d29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNj
cmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5
UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29t
cG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQB2YWx1ZQBTeXN0
ZW0uUnVudGltZS5WZXJzaW9uaW5nAFN0cmluZwBzZXRfRXJyb3JUYXNrAFN5c3RlbS5Db21wb25l
bnRNb2RlbABTQ184NTRFRDczRUQwNEI0QzE5QTQzQkUzQTBCREQ5REE4Ny5kbGwAZ2V0X0Vycm9y
Q29kZV9Jc051bGwAc2V0X0Vycm9yQ29kZV9Jc051bGwAc2V0X1VzZXJOYW1lX0lzTnVsbABzZXRf
RXJyb3JUYXNrX0lzTnVsbABnZXRfRXJyb3JDb2x1bW5fSXNOdWxsAHNldF9FcnJvckRlc2NyaXB0
aW9uX0lzTnVsbABzZXRfU291cmNlQ29tcG9uZW50X0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNl
dF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAGdldF9FcnJvckNvbHVtbgBTeXN0
ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBJ
bnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uAHNldF9FcnJvckRlc2NyaXB0aW9uAEdldEVycm9yRGVz
Y3JpcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1
dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRFRTUGlwZWxpbmVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZm
ZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldy
YXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgAuY3RvcgAuY2N0
b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lz
dGVtLlJlc291cmNlcwBTQ183ZjQ4NWExMzU5MDk0MzliYTA4NWZhN2Q0ZWIyMjE0OC5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU0NfN2Y0ODVhMTM1OTA5NDM5
YmEwODVmYTdkNGViMjIxNDguUHJvcGVydGllcwBnZXRfUmVhZE9ubHlWYXJpYWJsZXMAQnVmZmVy
Q29sdW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRleGVzAFNldHRpbmdzAEVxdWFscwBDb25uZWN0aW9u
cwBDb25jYXQAT2JqZWN0AEVuZE9mUm93c2V0AGdldF9EZWZhdWx0AEVudmlyb25tZW50AHNldF9T
b3VyY2VDb21wb25lbnQAVXNlckNvbXBvbmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9u
ZW50AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBl
bGluZUhvc3QASW5wdXQwX1Byb2Nlc3NJbnB1dABHZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlwdENv
bXBvbmVudEV2YWxDb250ZXh0AGdldF9FdmFsdWF0b3JDb250ZXh0AElucHV0MF9Qcm9jZXNzSW5w
dXRSb3cATmV4dFJvdwBnZXRfQXNzZW1ibHkAAAAAACFEAGEAdABhACAARgBsAG8AdwAgAFQAYQBz
AGsAOgAgAAAdRABlAHIAaQB2AGUAZAAgAEMAbwBsAHUAbQBuAACAm0kAcwBOAHUAbABsACAAcABy
AG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMA
ZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1
AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAABFUAGEAcwBrAE4AYQBtAGUA
AHFTAEMAXwA3AGYANAA4ADUAYQAxADMANQA5ADAAOQA0ADMAOQBiAGEAMAA4ADUAZgBhADcAZAA0
AGUAYgAyADIAMQA0ADgALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMA
AAAA57kzb21DWkGX5yHlYe4wdQAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERWQMHAQ4EIAASaQQg
AQ4IBQACDg4OAwAADgkgAwESPR0IEkEDBhI9AwYdCAQgAQgIBSACAQgcBCABAggDIAACBiACAg4R
fQUgAR0ICAUgABKAgQYgARKAhRwFAAASgIkGIAEcEoCNCAABEoCREYCVBSAAEoCZByACAQ4SgJkI
t3pcVhk04IkIiYRdzYCAzJEDBhIUAwYSGAMGEkUDBhJRAwYSVQMGEiAFIAEBEgwDIAAIBCABAQIJ
IAQBCA4SPRJBBSABARJFAyAADgQAABJRBAAAElUFAAEBElUEAAASIAMAAAEDKAAIAygAAgMoAA4E
CAASUQQIABJVBAgAEiAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEA
AgAAAAAAKAEAI1NDXzdmNDg1YTEzNTkwOTQzOWJhMDg1ZmE3ZDRlYjIyMTQ4AAAFAQAAAAAHAQAC
SFAAABgBABNDb3B5cmlnaHQgQCBIUCAyMDI1AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwQBAAAAtAAAAM7K
774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVy
c2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkz
NGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQ
QURQtAAAAFg3AAAAAAAAAAAAAHI3AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkNwAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAA9AMAAAAAAAAAAAAA9AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBFQDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAADADAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAmAAMAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAEgAUAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAQwBfADcAZgA0ADgANQBhADEAMwA1ADkAMAA5ADQAMwA5AGIAYQAwADgANQBmAGEANwBk
ADQAZQBiADIAMgAxADQAOAAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgAwAC4AMAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AOAA1ADQARQBE
ADcAMwBFAEQAMAA0AEIANABDADEAOQBBADQAMwBCAEUAMwBBADAAQgBEAEQAOQBEAEEAOAA3AC4A
ZABsAGwAAABMABQAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBn
AGgAdAAgAEAAIABIAFAAIAAyADAAMgA1AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEA
cgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBD
AF8AOAA1ADQARQBEADcAMwBFAEQAMAA0AEIANABDADEAOQBBADQAMwBCAEUAMwBBADAAQgBEAEQA
OQBEAEEAOAA3AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBf
ADcAZgA0ADgANQBhADEAMwA1ADkAMAA5ADQAMwA5AGIAYQAwADgANQBmAGEANwBkADQAZQBiADIA
MgAxADQAOAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAu
ADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4A
MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAIQ3AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">SC_854ed73ed04b4c19a43be3a0bdd9da87</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">System::TaskName</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum140"
                          typeConverter="NOTBROWSABLE">58</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Inputs[Input 0]"
                          hasSideEffects="true"
                          name="Input 0">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Inputs[Input 0].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              usageType="readWrite" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Inputs[Input 0].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0]"
                          name="Output 0"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Inputs[Input 0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorDescription]"
                              dataType="wstr"
                              length="4000"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorDescription]"
                              name="ErrorDescription" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorTask]"
                              name="ErrorTask" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[SourceComponent]"
                              name="SourceComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[UserName]"
                              dataType="wstr"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[UserName]"
                              name="UserName" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                      description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                      name="Script Component 1"
                      version="13">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_7f485a135909439ba085fa7d4eb22148")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_7f485a135909439ba085fa7d4eb22148")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        if (!Row.ErrorCode_IsNull)
        {
            Row.ErrorDescription = ComponentMetaData.GetErrorDescription(Row.ErrorCode);
            Row.ErrorTask = "Data Flow Task";  
            Row.SourceComponent = "Data Convertion";  
            Row.UserName = Environment.UserName;
        }
    }



}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 ErrorCode
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool ErrorCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 ErrorColumn
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool ErrorColumn_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String ErrorDescription
    {
        set
        {
            this[2] = value;
        }
    }
    public bool ErrorDescription_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorTask
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ErrorTask_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SourceComponent
    {
        set
        {
            this[4] = value;
        }
    }
    public bool SourceComponent_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String UserName
    {
        set
        {
            this[5] = value;
        }
    }
    public bool UserName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Settings.get_Default():SC_7f485a135909439ba085fa7d4eb22148.Properties.Sett" +
    "ings")]

namespace SC_7f485a135909439ba085fa7d4eb22148.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Project]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_7f485a135909439ba085fa7d4eb22148</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_7f485a135909439ba085fa7d4eb22148</msb:DisplayName>
    <msb:ProjectId>{E9FBBC1C-35E3-4A5B-860F-5EC6C5BB9385}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_7f485a135909439ba085fa7d4eb22148.csproj" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_7f485a135909439ba085fa7d4eb22148.csproj]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0514D14C-2201-4C7E-8CED-A9C14B711308}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_7f485a135909439ba085fa7d4eb22148</RootNamespace>
    <AssemblyName>SC_38BD50ABFB4E4AF9B8ACCE1F1E11827D</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_7f485a135909439ba085fa7d4eb22148.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_38BD50ABFB4E4AF9B8ACCE1F1E11827D.dll]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALzzTWgAAAAAAAAAAOAAIiALATAAABYAAAAIAAAAAAAAqjUA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFg1AABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAsBUAAAAgAAAAFgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAYAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACM
NQAAAAAAAEgAAAACAAUAjCIAABQSAAABAAAAAAAAAKA0AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACioTMAMAQQAAAAAAAAADbwgAAAYt
OAMCKBIAAAoDbwYAAAZvEwAACm8MAAAGA3IBAABwbw4AAAYDch8AAHBvEAAABgMoFAAACm8SAAAG
Kh4CKBYAAAYqKgIDBAUoFQAACipSAnsWAAAKAnsXAAAKFpRvGAAACio6AhYDjBwAAAEoGQAACioi
AhYoGgAACipaAywIAhYoGwAACipyPwAAcHMcAAAKelICexYAAAoCexcAAAoXlG8YAAAKKiICFyga
AAAKKiYCGAMoGQAACipaAywIAhgoGwAACipyPwAAcHMcAAAKeiYCGQMoGQAACipaAywIAhkoGwAA
CipyPwAAcHMcAAAKeiYCGgMoGQAACipaAywIAhooGwAACipyPwAAcHMcAAAKeiYCGwMoGQAACipa
AywIAhsoGwAACipyPwAAcHMcAAAKeh4CKB0AAAoqHgIoHgAACip+AigfAAAKAgJzGgAABn0BAAAE
AgJzGwAABn0CAAAEKpIEctwAAHAabyAAAAosFQIFAgMoIQAACg4EcwUAAAZvGAAABipKKwcCA28Z
AAAGA28UAAAGLfEqBio6AigiAAAKAgN9AwAABCo6AigiAAAKAgN9BAAABCoeAigiAAAKKq5+BQAA
BC0ecuwAAHDQBwAAAigjAAAKbyQAAApzJQAACoAFAAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqGn4H
AAAEKh4CKCYAAAoqLnMhAAAGgAcAAAQqQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBs
AAAAxAYAACN+AAAwBwAAtAcAACNTdHJpbmdzAAAAAOQOAABgAQAAI1VTAEQQAAAQAAAAI0dVSUQA
AABUEAAAwAEAACNCbG9iAAAAAAAAAAIAAAFXFaABCQEAAAD6ATMAFgAAAQAAACIAAAAIAAAABwAA
ACIAAAAXAAAAJgAAABAAAAADAAAADwAAABIAAAABAAAABQAAAAEAAAAAAGYDAQAAAAAABgBSAswF
BgDmAswFBgCeAbkFDwBABgAABgDLAZgEBgA1ApgEBgAWApgEBgDNApgEBgByApgEBgCLApgEBgDi
AZgEBgD9ASEDCgCmAusACgBiBesADgBTBesACgAKBesACgAmB+sABgDJBkAEBgCBAbkFBgBzBewF
BgD+BIMEEgBRAVADEgCyAVADEgA5AW4EBgBmAcwFFgABAIMFBgDoBkAEBgAdAEAEBgCqBEAEBgA7
A0AEBgDtBEAEBgAMAUAEBgCjAEAEBgCrB5gEAAAAACMAAAAAAAEAAQABABAAUwQAABAAAQABAAEA
EABGBQAAOQABAAUAAQAQAAgHAABFAAEAFgABABAAvQYAAEkAAwAaAAEAEAB+BgAASQAEABsAAAAQ
APMFTwZJAAUAHAAAARAArQZPBmEABwAgAAYAvQaFAAYAfgaJAAEAFgeNAAEAFgeNABEARwSRABEA
KQGVABEAdwCZAFAgAAAAAMYABAMGAAEAWCAAAAAAxgAPAwYAAQBgIAAAAADGAIgHnQABAK0gAAAA
AIYYrAUGAAIAtSAAAAAAhhisBSkAAgDAIAAAAACGCIcAowAFANUgAAAAAIYIlQABAAUA5CAAAAAA
hgiOA0sABgDtIAAAAACGCKMDpwAGAAQhAAAAAIYIXgSjAAcAGSEAAAAAhgjhA0sABwAiIQAAAACG
CMQEEAAHACwhAAAAAIYI+AOnAAgAQyEAAAAAhghCAxAACQBNIQAAAACGCMwDpwAKAGQhAAAAAIYI
9AYQAAsAbiEAAAAAhggUBKcADACFIQAAAACGCNQAEAANAI8hAAAAAIYIuAOnAA4ApiEAAAAAhgCf
B0sADwCuIQAAAACGANAGSwAPALYhAAAAAIYYrAUGAA8A1iEAAAAAxgB7B6wADwD7IQAAAADGAXQH
nQATAA4iAAAAAMYBiAedABQAECIAAAAAhhisBbYAFQAfIgAAAACGGKwFtgAWAC4iAAAAAIMYrAUG
ABcANiIAAAAAkwhvBbwAFwBiIgAAAACTCBEBwQAXAGkiAAAAAJMIHQHGABcAcSIAAAAAlgjcBswA
GAB4IgAAAACGGKwFBgAYAIAiAAAAAJEYsgXRABgAAAABAKMHAAABAGgFAAACAIgGAAADABgFAAAB
ABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsD
AAABAFAAAAACAOEAAAADAGgFAAAEABgFAAABAGgFAAABAKMHAAABACwHAAABACwHAAABABsDCQCs
BQEAEQCsBQYAGQCsBQoAKQCsBRAAMQCsBRAAOQCsBRAAQQCsBRAASQCsBRAAUQCsBRAAWQCsBRAA
YQCsBRAAaQCsBQYAmQCsBQYAuQCsBRUAyQCsBQYAiQAEAwYAiQAPAwYAiQBYABsA0QDZBCAA2QDH
ACUAcQCsBSkAcQBoBTMAcQCIBjcAeQAaADsAcQA3BEAAcQAoBEYAcQAvBAEA6QCsBRAAcQCfB0sA
cQDQBksAiQCsBQYA8QC2Bk8AiQCcBlYAkQCsBQYAAQG1AFwAAQGnB2UAoQCsBWsAwQCsBQYALgAL
APAALgATAPkALgAbABgBLgAjACEBLgArAEoBLgAzAEoBLgA7AFABLgBDACEBLgBLAFgBLgBTAEoB
LgBbAHEBQwBjALsB4QB7ALsB4wBrALsBqQFzABgByQFzABgBAwABAAcADQAIAA8AAACZANUAAACn
A9kAAABiBNUAAADlA9kAAADcBN0AAAD8A9kAAABGA90AAADQA9kAAAD4Bt0AAAAYBNkAAADYAN0A
AAC8A9kAAABzBeEAAAAxAeYAAADgBusAAgAGAAMAAQAHAAMAAgAIAAUAAQAJAAUAAgAKAAcAAgAL
AAkAAQAMAAsAAQANAA0AAQAOAA8AAQAPABEAAQAQABMAAQARABUAAQASABcAAQATABkAAgAdABsA
AgAeAB0AAQAfAB0AAgAgAB8ABIAAAAEAAAAAAAAAAAAAAAAALAAAAAQAAAAAAAAAAAAAAHMAbgAA
AAAAEAAAAAAAAAAAAAAAfAA2BwAAAAAQAAAAAAAAAAAAAAB8AFMHAAAAAAQAAAAAAAAAAAAAAHMA
QAQAAAAAEAAAAAAAAAAAAAAAfAAiBQAAAAAAAAAAAQAAAP0FAAAAAABJRFRTQ29tcG9uZW50TWV0
YURhdGExMDAAR2V0SW50MzIAPE1vZHVsZT4AU0NfMzhCRDUwQUJGQjRFNEFGOUI4QUNDRTFGMUUx
MTgyN0QASW5wdXRJRABnZXRfQ29tcG9uZW50TWV0YURhdGEAbXNjb3JsaWIAZGVmYXVsdEluc3Rh
bmNlAGdldF9FcnJvckNvZGUAc2V0X0Vycm9yQ29kZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBnZXRfVXNlck5hbWUAc2V0X1VzZXJOYW1lAElucHV0TmFtZQBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5QaXBlbGluZQBUeXBlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291
cmNlQ3VsdHVyZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAU3RyaW5nAHNldF9FcnJvclRhc2sAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFND
XzM4QkQ1MEFCRkI0RTRBRjlCOEFDQ0UxRjFFMTE4MjdELmRsbABnZXRfRXJyb3JDb2RlX0lzTnVs
bABzZXRfRXJyb3JDb2RlX0lzTnVsbABzZXRfVXNlck5hbWVfSXNOdWxsAHNldF9FcnJvclRhc2tf
SXNOdWxsAGdldF9FcnJvckNvbHVtbl9Jc051bGwAc2V0X0Vycm9yRGVzY3JpcHRpb25fSXNOdWxs
AHNldF9Tb3VyY2VDb21wb25lbnRfSXNOdWxsAFNldE51bGwAc2V0X0l0ZW0AU3lzdGVtAHJlc291
cmNlTWFuAFNjcmlwdE1haW4AZ2V0X0Vycm9yQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNl
cHRpb24Ac2V0X0Vycm9yRGVzY3JpcHRpb24AR2V0RXJyb3JEZXNjcmlwdGlvbgBTdHJpbmdDb21w
YXJpc29uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRC
dWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGlu
ZS5XcmFwcGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUu
Q29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzdmNDg1YTEzNTkwOTQzOWJhMDg1
ZmE3ZDRlYjIyMTQ4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2Rl
cwBTQ183ZjQ4NWExMzU5MDk0MzliYTA4NWZhN2Q0ZWIyMjE0OC5Qcm9wZXJ0aWVzAFZhcmlhYmxl
cwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENv
bm5lY3Rpb25zAE9iamVjdABFbmRPZlJvd3NldABnZXRfRGVmYXVsdABFbnZpcm9ubWVudABzZXRf
U291cmNlQ29tcG9uZW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBv
bmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlw
ZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQASW5wdXQwX1Byb2Nlc3NJbnB1dFJvdwBOZXh0
Um93AGdldF9Bc3NlbWJseQAAHUQAYQB0AGEAIABGAGwAbwB3ACAAVABhAHMAawAAH0QAYQB0AGEA
IABDAG8AbgB2AGUAcgB0AGkAbwBuAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5ACAA
YwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMAaQBn
AG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBzAHQA
ZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAAHFTAEMAXwA3AGYANAA4ADUAYQAxADMANQA5ADAAOQA0
ADMAOQBiAGEAMAA4ADUAZgBhADcAZAA0AGUAYgAyADIAMQA0ADgALgBQAHIAbwBwAGUAcgB0AGkA
ZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAIH0FHfeAoEiZ7A4MgISBYgAEIAEBCAMgAAEFIAEB
EREEIAEBDgUgAQERWQQgABJpBCABDggDAAAOCSADARI9HQgSQQMGEj0DBh0IBCABCAgFIAIBCBwE
IAECCAMgAAIGIAICDhF9BSABHQgICAABEoCBEYCFBSAAEoCJByACAQ4SgIkIt3pcVhk04IkIiYRd
zYCAzJEDBhIUAwYSGAMGEkUDBhJRAwYSVQMGEiAFIAEBEgwDIAAIBCABAQIJIAQBCA4SPRJBBSAB
ARJFBAAAElEEAAASVQUAAQESVQQAABIgAwAAAQMoAAgDKAACAygADgQIABJRBAgAElUECAASIAgB
AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfN2Y0
ODVhMTM1OTA5NDM5YmEwODVmYTdkNGViMjIxNDgAAAUBAAAAAAcBAAJIUAAAGAEAE0NvcHlyaWdo
dCBAIEhQIDIwMjUAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3Jr
RGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43BAEAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3Rl
bS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1
bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVz
b3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAgDUAAAAAAAAA
AAAAmjUAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIw1AAAAAAAAAAAAAAAAX0NvckRsbE1haW4A
bXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAPQDAAAAAAAAAAAAAPQDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsARUAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAwAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAJgADAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAABIAFAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBu
AAAAAABTAEMAXwA3AGYANAA4ADUAYQAxADMANQA5ADAAOQA0ADMAOQBiAGEAMAA4ADUAZgBhADcA
ZAA0AGUAYgAyADIAMQA0ADgAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4AMAAuADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADMAOABCAEQA
NQAwAEEAQgBGAEIANABFADQAQQBGADkAQgA4AEEAQwBDAEUAMQBGADEARQAxADEAOAAyADcARAAu
AGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBh
AHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMA
QwBfADMAOABCAEQANQAwAEEAQgBGAEIANABFADQAQQBGADkAQgA4AEEAQwBDAEUAMQBGADEARQAx
ADEAOAAyADcARAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMA
XwA3AGYANAA4ADUAYQAxADMANQA5ADAAOQA0ADMAOQBiAGEAMAA4ADUAZgBhADcAZAA0AGUAYgAy
ADIAMQA0ADgAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAOAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAu
ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAACsNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">SC_38bd50abfb4e4af9b8acce1f1e11827d</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum140"
                          typeConverter="NOTBROWSABLE">4B</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Inputs[Input 0]"
                          hasSideEffects="true"
                          name="Input 0">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Inputs[Input 0].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              usageType="readWrite" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Inputs[Input 0].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0]"
                          name="Output 0"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Inputs[Input 0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorDescription]"
                              dataType="wstr"
                              length="4000"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorDescription]"
                              name="ErrorDescription" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorTask]"
                              name="ErrorTask" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[SourceComponent]"
                              name="SourceComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[UserName]"
                              dataType="wstr"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[UserName]"
                              name="UserName" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All"
                      componentClassID="Microsoft.UnionAll"
                      contactInfo="Union All;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Combines rows from multiple data flows without sorting. For example, add rows back to a data flow after correction of errors. If sorting is important, we recommend using the Merge transformation."
                      name="Union All"
                      version="1">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1]"
                          name="Union All Input 1">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Date]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[D of Week]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="D of Week"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[D of Week]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Client]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Client Project Name]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client Project Name"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client Project Name]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Description]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Description"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Description]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Billable or Non Billable]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Billable or Non Billable"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Billable or Non Billable]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Comments]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="Comments"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Comments]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Comments]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Total Hours]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Total Hours"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Total Hours]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Total Hours]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[Start Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Start Time]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[End Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[End Time]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[FileName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="FileName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[FileName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[FileName]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[EmployeeName]"
                              cachedDataType="wstr"
                              cachedName="EmployeeName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[EmployeeName]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorDescription]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorDescription]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[ErrorTask]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[SourceComponent]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0].Columns[UserName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorDescription2]"
                              cachedDataType="nText"
                              cachedName="ErrorDescription2"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorDescription2]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription2]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorCode2]"
                              cachedDataType="i4"
                              cachedName="ErrorCode2"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorCode2]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode2]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[ErrorTask2]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask2"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[ErrorTask2]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask2]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[SourceComponent2]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent2"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[SourceComponent2]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent2]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1].Columns[UserName2]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName2"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output].Columns[UserName2]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName2]}</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2]"
                          hasSideEffects="true"
                          name="Union All Input 2">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Date]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[D of Week]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="D of Week"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[D of Week]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Client]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Client Project Name]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client Project Name"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client Project Name]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Description]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Description"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Description]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Billable or Non Billable]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Billable or Non Billable"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Billable or Non Billable]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Comments]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="Comments"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Comments]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Comments]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Total Hours]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Total Hours"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Total Hours]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Total Hours]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[Start Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Start Time]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[End Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[End Time]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorCode]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[ErrorDescription]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorDescription]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[ErrorTask]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[SourceComponent]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0].Columns[UserName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2].Columns[ErrorDescription1]"
                              cachedDataType="nText"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Output].Columns[ErrorDescription]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription2]}</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3]"
                          hasSideEffects="true"
                          name="Union All Input 3">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Date]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[D of Week]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="D of Week"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[D of Week]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[D of Week]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Client]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Client Project Name]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Client Project Name"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Client Project Name]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client Project Name]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Description]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Description"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Description]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Description]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Billable or Non Billable]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Billable or Non Billable"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Billable or Non Billable]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Billable or Non Billable]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Comments]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="Comments"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Comments]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Comments]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Total Hours]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Total Hours"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Total Hours]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Total Hours]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[Start Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Start Time]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[End Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[End Time]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[FileName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="FileName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[FileName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[FileName]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3].Columns[EmployeeName]"
                              cachedDataType="wstr"
                              cachedName="EmployeeName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[EmployeeName]}</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 4]"
                          dangling="true"
                          hasSideEffects="true"
                          name="Union All Input 4">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1]"
                          name="Union All Output 1">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Date]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Date]"
                              name="Date" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[D of Week]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[D of Week]"
                              name="D of Week" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client]"
                              name="Client" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client Project Name]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Client Project Name]"
                              name="Client Project Name" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Description]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Description]"
                              name="Description" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Billable or Non Billable]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Billable or Non Billable]"
                              name="Billable or Non Billable" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Comments]"
                              dataType="wstr"
                              length="4000"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Comments]"
                              name="Comments" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Total Hours]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Total Hours]"
                              name="Total Hours" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Start Time]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[Start Time]"
                              name="Start Time" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[End Time]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[End Time]"
                              name="End Time" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[FileName]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[FileName]"
                              name="FileName" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[EmployeeName]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[EmployeeName]"
                              name="EmployeeName" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode]"
                              name="ErrorCode" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]"
                              name="ErrorColumn" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]"
                              dataType="wstr"
                              length="4000"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]"
                              name="ErrorDescription" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask]"
                              name="ErrorTask" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent]"
                              name="SourceComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName]"
                              dataType="wstr"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName]"
                              name="UserName" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription2]"
                              dataType="nText"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorDescription2]"
                              name="ErrorDescription2" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode2]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorCode2]"
                              name="ErrorCode2" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask2]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[ErrorTask2]"
                              name="ErrorTask2" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent2]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[SourceComponent2]"
                              name="SourceComponent2" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName2]"
                              dataType="wstr"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1].Columns[UserName2]"
                              name="UserName2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance"
                      componentClassID="Microsoft.Lookup"
                      contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                      description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                      name="Validate Data Exsistance"
                      usesDispositions="true"
                      version="6">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the SQL statement that generates the lookup table."
                          expressionType="Notify"
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT 
    [Date],
    [EmployeeName],
    [StartTime],
    [EndTime],
    [ClientName],
    [ProjectName]
FROM [TimesheetDB].[Timesheet].[TimesheetStaging]</property>
                        <property
                          dataType="System.String"
                          description="Specifies a SQL statement that uses parameters to generate the lookup table."
                          expressionType="Notify"
                          name="SqlCommandParam"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (SELECT 
    [Date],
    [EmployeeName],
    [StartTime],
    [EndTime],
    [ClientName],
    [ProjectName]
FROM [TimesheetDB].[Timesheet].[TimesheetStaging]) [refTable]
where [refTable].[StartTime] = ? and [refTable].[EndTime] = ? and [refTable].[EmployeeName] = ? and [refTable].[Date] = ? and [refTable].[ClientName] = ?</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the type of connection used to access the reference dataset."
                          name="ConnectionType"
                          typeConverter="LookupConnectionType">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the cache type of the lookup table."
                          name="CacheType"
                          typeConverter="CacheType">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                          name="NoMatchBehavior"
                          typeConverter="LookupNoMatchBehavior">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                          name="NoMatchCachePercentage">0</property>
                        <property
                          dataType="System.Int32"
                          description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                          name="MaxMemoryUsage">25</property>
                        <property
                          dataType="System.Int64"
                          description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                          name="MaxMemoryUsage64">25</property>
                        <property
                          dataType="System.String"
                          description="Indicates whether to reference metadata in an XML format."
                          name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="Date" dataType="DT_WSTR" length="50" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="EmployeeName" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="StartTime" dataType="DT_WSTR" length="50" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="EndTime" dataType="DT_WSTR" length="50" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="ClientName" dataType="DT_STR" length="100" precision="0" scale="0" codePage="1252"/&gt;&lt;referenceColumn name="ProjectName" dataType="DT_STR" length="100" precision="0" scale="0" codePage="1252"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                          name="ParameterMap">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]};#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]};#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]};#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDate]};#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClient]};</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                          name="TreatDuplicateKeysAsError">false</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          connectionManagerRefId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          description="Connection manager used to access lookup data."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input]"
                          name="Lookup Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input].Columns[EmployeeName]"
                              cachedDataType="wstr"
                              cachedName="EmployeeName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output].Columns[EmployeeName]">
                              <properties>
                                <property
                                  dataType="System.String"
                                  description="Specifies the column in the reference table that a column joins."
                                  name="JoinToReferenceColumn">EmployeeName</property>
                                <property
                                  dataType="System.Null"
                                  description="Specifies the column in the reference table from which a column is copied."
                                  name="CopyFromReferenceColumn" />
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input].Columns[ConvertedDate]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="ConvertedDate"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedDate]">
                              <properties>
                                <property
                                  dataType="System.String"
                                  description="Specifies the column in the reference table that a column joins."
                                  name="JoinToReferenceColumn">Date</property>
                                <property
                                  dataType="System.Null"
                                  description="Specifies the column in the reference table from which a column is copied."
                                  name="CopyFromReferenceColumn" />
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input].Columns[Start Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[Start Time]">
                              <properties>
                                <property
                                  dataType="System.String"
                                  description="Specifies the column in the reference table that a column joins."
                                  name="JoinToReferenceColumn">StartTime</property>
                                <property
                                  dataType="System.Null"
                                  description="Specifies the column in the reference table from which a column is copied."
                                  name="CopyFromReferenceColumn" />
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input].Columns[End Time]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Time"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output].Columns[End Time]">
                              <properties>
                                <property
                                  dataType="System.String"
                                  description="Specifies the column in the reference table that a column joins."
                                  name="JoinToReferenceColumn">EndTime</property>
                                <property
                                  dataType="System.Null"
                                  description="Specifies the column in the reference table from which a column is copied."
                                  name="CopyFromReferenceColumn" />
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input].Columns[ConvertedClient]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="255"
                              cachedName="ConvertedClient"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output].Columns[ConvertedClient]">
                              <properties>
                                <property
                                  dataType="System.String"
                                  description="Specifies the column in the reference table that a column joins."
                                  name="JoinToReferenceColumn">ClientName</property>
                                <property
                                  dataType="System.Null"
                                  description="Specifies the column in the reference table from which a column is copied."
                                  name="CopyFromReferenceColumn" />
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Match Output]"
                          errorOrTruncationOperation="Lookup"
                          errorRowDisposition="RedirectRow"
                          exclusionGroup="1"
                          name="Lookup Match Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input]">
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup No Match Output]"
                          description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                          exclusionGroup="1"
                          name="Lookup No Match Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input]">
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Lookup Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Data Conversion Error Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Inputs[Input 0]"
                      name="Data Conversion Error Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Error Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Data Conversion Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Inputs[Lookup Input]"
                      name="Data Conversion Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Error Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Inputs[Input 0]"
                      name="Derived Column Error Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Error Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion.Inputs[Data Conversion Input]"
                      name="Derived Column Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Output1]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 1]"
                      name="Derived Column Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Output2]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 2]"
                      name="Derived Column Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Excel Source Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName.Inputs[Derived Column Input]"
                      name="Excel Source Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet.Outputs[Excel Source Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Lookup Error Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging.Inputs[OLE DB Destination Input]"
                      name="Lookup Error Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Error Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Lookup Match Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Inputs[Union All Input 3]"
                      name="Lookup Match Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance.Outputs[Lookup Match Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Output 0]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog.Inputs[Derived Column Input]"
                      name="Output 0"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component.Outputs[Output 0]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Output 01]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1.Inputs[Derived Column Input]"
                      name="Output 0"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1.Outputs[Output 0]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Union All Output 1]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors.Inputs[OLE DB Destination Input]"
                      name="Union All Output 1"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All.Outputs[Union All Output 1]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Select Month Sheet"
              DTS:CreationName="Microsoft.ScriptTask"
              DTS:Description="Script Task"
              DTS:DTSID="{AE3D2C96-57BF-412D-A8BC-EB5280469655}"
              DTS:ExecutableType="Microsoft.ScriptTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Select Month Sheet"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_336a9463f4a8472591ee1c7d192a0a94"
                  VSTAMajorVersion="16"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::ExcelFilePath"
                  ReadWriteVariables="User::ExcelConnectionString,User::SelectedSheet">
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Settings.get_Default():ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Sett" +
    "ings")]

namespace ST_a136fd41f7184a7a96b8e8a480790b29.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Windows.Forms;
using System.Data.OleDb;
using Microsoft.SqlServer.Dts.Runtime;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
#endregion

namespace ST_a136fd41f7184a7a96b8e8a480790b29
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 



        private DateTime firstValidDate = DateTime.MinValue;
        private int targetYear = 0;
        private int targetMonth = 0;
        private bool firstDateFound = false;
        private int validRowCount = 0;

        public void Main()
        {
            string logFilePath = @"C:\Timesheets\Log.txt";
            StringBuilder debugInfo = new StringBuilder();
            debugInfo.AppendLine($"{DateTime.Now}: Starting Excel sheet range test");

            // Clear the log
            try
            {
                File.WriteAllText(logFilePath, string.Empty);
                debugInfo.AppendLine("Log file cleared.");
            }
            catch (Exception ex)
            {
                File.WriteAllText(logFilePath, $"Error clearing log: {ex.Message}");
                Dts.TaskResult = (int)ScriptResults.Failure;
                return;
            }

            try
            {
                string excelFilePath = Dts.Variables["User::ExcelFilePath"].Value.ToString();
                string[] monthSheets = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

                // Month detection from filename
                string fileName = Path.GetFileNameWithoutExtension(excelFilePath);
                string detectedMonth = monthSheets.FirstOrDefault(m => fileName.IndexOf(m, StringComparison.OrdinalIgnoreCase) >= 0);

                if (string.IsNullOrEmpty(detectedMonth))
                {
                    string errorMsg = $"No month detected in filename: {fileName}";
                    MessageBox.Show(errorMsg, "Month Detection Error");
                    debugInfo.AppendLine(errorMsg);
                    File.AppendAllText(logFilePath, debugInfo.ToString());
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                string[] expectedHeaders = {
            "Date", "D of Week", "Client", "Client Project Name", "Description",
            "Billable or Non Billable", "Comments", "Total Hours", "Start Time", "End Time"
        };

                if (!File.Exists(excelFilePath))
                {
                    string errorMsg = $"Excel file not found:\n{excelFilePath}";
                    MessageBox.Show(errorMsg, "File Error");
                    debugInfo.AppendLine(errorMsg);
                    File.AppendAllText(logFilePath, debugInfo.ToString());
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                string excelConnStr = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelFilePath};Extended Properties=\"Excel 12.0 Xml;HDR=YES;IMEX=1\";";
                string validSheetRange = $"{detectedMonth}$A8:J1000";
                string firstDateValue = string.Empty;
                bool isValidDate = false;
                DateTime parsedDate = DateTime.MinValue;

                using (var conn = new OleDbConnection(excelConnStr))
                {
                    conn.Open();
                    debugInfo.AppendLine($"Processing file: {Path.GetFileName(excelFilePath)}");
                    debugInfo.AppendLine("-------------------------------");

                    DataTable allSheets = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    debugInfo.AppendLine("Sheets found in workbook:");
                    foreach (DataRow sheet in allSheets.Rows)
                    {
                        debugInfo.AppendLine($"- {sheet["TABLE_NAME"]}");
                    }
                    debugInfo.AppendLine("");

                    string sheetName = $"{detectedMonth}$";
                    debugInfo.AppendLine($"Checking detected sheet: {sheetName}");

                    if (!allSheets.Rows.Cast<DataRow>().Any(r => r["TABLE_NAME"].ToString().Equals(sheetName, StringComparison.OrdinalIgnoreCase)))
                    {
                        string errorMsg = $"Sheet '{sheetName}' not found in workbook";
                        MessageBox.Show(errorMsg, "Sheet Error");
                        debugInfo.AppendLine(errorMsg);
                        File.AppendAllText(logFilePath, debugInfo.ToString());
                        Dts.TaskResult = (int)ScriptResults.Failure;
                        return;
                    }

                    string headerRange = $"{sheetName}A8:J8";
                    string exampleCheckRange = $"{sheetName}C8:D14";

                    try
                    {
                        // 1. HEADER VALIDATION
                        debugInfo.AppendLine("Checking headers...");
                        var headerCmd = new OleDbCommand($"SELECT * FROM [{headerRange}]", conn);
                        var headerAdapter = new OleDbDataAdapter(headerCmd);
                        var headerTable = new DataTable();
                        headerAdapter.Fill(headerTable);

                        bool headersValid = true;
                        List<string> headerMismatches = new List<string>();

                        for (int i = 0; i < expectedHeaders.Length; i++)
                        {
                            if (headerTable.Columns.Count <= i)
                            {
                                headersValid = false;
                                headerMismatches.Add($"Column {i + 1}: Missing (expected '{expectedHeaders[i]}')");
                                continue;
                            }

                            string actualHeader = headerTable.Columns[i].ColumnName.Trim();
                            if (!actualHeader.Equals(expectedHeaders[i], StringComparison.OrdinalIgnoreCase))
                            {
                                headersValid = false;
                                headerMismatches.Add($"Column {i + 1}: Found '{actualHeader}' (expected '{expectedHeaders[i]}')");
                            }
                        }

                        if (!headersValid)
                        {
                            debugInfo.AppendLine("Header validation failed:");
                            debugInfo.AppendLine(string.Join("\n", headerMismatches));
                            File.AppendAllText(logFilePath, debugInfo.ToString());
                            string errorMsg = $"Header validation failed for sheet '{sheetName}'. See log for details.";
                            MessageBox.Show(errorMsg, "Validation Failed");
                            Dts.TaskResult = (int)ScriptResults.Failure;
                            return;
                        }
                        debugInfo.AppendLine("Headers OK");

                        // 2. EXAMPLE CHECK
                        debugInfo.AppendLine("Checking for 'Example' text...");
                        var exampleCmd = new OleDbCommand($"SELECT * FROM [{exampleCheckRange}]", conn);
                        var exampleAdapter = new OleDbDataAdapter(exampleCmd);
                        var exampleTable = new DataTable();
                        exampleAdapter.Fill(exampleTable);

                        bool hasExample = false;
                        for (int i = 0; i < exampleTable.Rows.Count; i++)
                        {
                            for (int j = 0; j < exampleTable.Columns.Count; j++)
                            {
                                var cellValue = exampleTable.Rows[i][j]?.ToString().Trim();
                                if (!string.IsNullOrEmpty(cellValue) && cellValue.Equals("Example", StringComparison.OrdinalIgnoreCase))
                                {
                                    hasExample = true;
                                    debugInfo.AppendLine($"Found 'Example' in cell [Row {i + 8}, Col {j + 3}]");
                                    break;
                                }
                            }
                            if (hasExample) break;
                        }

                        if (hasExample)
                        {
                            string errorMsg = $"Sheet '{sheetName}' contains 'Example' text - skipping validation.";
                            debugInfo.AppendLine(errorMsg);
                            File.AppendAllText(logFilePath, debugInfo.ToString());
                            MessageBox.Show(errorMsg, "Validation Failed");
                            Dts.TaskResult = (int)ScriptResults.Failure;
                            return;
                        }
                        debugInfo.AppendLine("No 'Example' found");

                        // 3. DATA VALIDATION
                        debugInfo.AppendLine("Checking for data...");
                        if (exampleTable.Rows.Count == 0)
                        {
                            string errorMsg = $"No data found in validation range in sheet '{sheetName}'";
                            debugInfo.AppendLine(errorMsg);
                            File.AppendAllText(logFilePath, debugInfo.ToString());
                            MessageBox.Show(errorMsg, "Validation Failed");
                            Dts.TaskResult = (int)ScriptResults.Failure;
                            return;
                        }

                        // 4. GET FIRST DATE AND CALCULATE TARGET MONTH/YEAR
                        debugInfo.AppendLine("Retrieving first Date value...");
                        var dateCmd = new OleDbCommand($"SELECT TOP 1 [Date] FROM [{sheetName}A8:J15] WHERE [Date] IS NOT NULL", conn);
                        object dateResult = dateCmd.ExecuteScalar();

                        if (dateResult != null)
                        {
                            firstDateValue = dateResult.ToString();
                            debugInfo.AppendLine($"First Date value found: {firstDateValue}");

                            // Try to parse the date with multiple formats
                            string[] dateFormats = {
                        "M/d/yyyy", "MM/dd/yyyy", "d/M/yyyy", "dd/MM/yyyy", "yyyy-MM-dd",
                        "yyyy/MM/dd HH:mm:ss"
                    };
                            isValidDate = DateTime.TryParseExact(firstDateValue, dateFormats,
                                CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate);

                            // Fallback to TryParse if TryParseExact fails
                            if (!isValidDate)
                            {
                                isValidDate = DateTime.TryParse(firstDateValue, CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate);
                                if (isValidDate)
                                {
                                    debugInfo.AppendLine($"Fallback parsing succeeded: {parsedDate.ToString("yyyy-MM-dd")}");
                                }
                            }

                            if (isValidDate)
                            {
                                firstValidDate = parsedDate;
                                targetYear = parsedDate.Year;
                                targetMonth = Array.IndexOf(monthSheets, detectedMonth) + 1; // Match filename month
                                firstDateFound = true;
                                debugInfo.AppendLine($"Valid date detected: {firstValidDate.ToString("yyyy-MM-dd")}");
                                debugInfo.AppendLine($"Target Month: {detectedMonth}");
                                debugInfo.AppendLine($"Target Year: {targetYear}");
                            }
                            else
                            {
                                debugInfo.AppendLine("First date value is not a valid date format");
                                MessageBox.Show($"First date value '{firstDateValue}' is not a valid date format",
                                                "Invalid Date Format");
                            }
                        }
                        else
                        {
                            debugInfo.AppendLine("No Date values found in the sheet");
                            MessageBox.Show("No Date values found in the sheet", "Date Value Not Found");
                        }

                        if (firstDateFound)
                        {
                            debugInfo.AppendLine("Scanning for valid rows...");

                            var scanCmd = new OleDbCommand($"SELECT * FROM [{validSheetRange}]", conn);
                            var adapter = new OleDbDataAdapter(scanCmd);
                            var dataTable = new DataTable();
                            adapter.Fill(dataTable);

                            int emptyRowStreak = 0;
                            const int maxEmptyRows = 5;
                            int currentRow = 9;

                            foreach (DataRow row in dataTable.Rows)
                            {
                                // Footer logic
                                if (row.ItemArray.Any(cell => cell?.ToString().ToLower().Contains("forecast") == true ||
                                                              cell?.ToString().ToLower().Contains("billable hours") == true ||
                                                              cell?.ToString().ToLower().Contains("non billable hours") == true ||
                                                              cell?.ToString().ToLower().Contains("line manager") == true))
                                {
                                    debugInfo.AppendLine($"Row {currentRow}: Footer detected. Stopping.");
                                    break;
                                }

                                string dateValue = row[0]?.ToString();
                                if (!string.IsNullOrWhiteSpace(dateValue))
                                {
                                    DateTime rowDate;
                                    bool isRowValid = double.TryParse(dateValue, out double serialDate)
                                        ? TryParseExcelDate(serialDate, out rowDate)
                                        : DateTime.TryParse(dateValue, CultureInfo.InvariantCulture, DateTimeStyles.None, out rowDate);

                                    if (isRowValid && rowDate.Month == targetMonth && rowDate.Year == targetYear)
                                    {
                                        validRowCount++;
                                        emptyRowStreak = 0;
                                        debugInfo.AppendLine($"Row {currentRow}: Valid (Date: {rowDate:yyyy-MM-dd})");
                                    }
                                    else
                                    {
                                        emptyRowStreak++;
                                        debugInfo.AppendLine($"Row {currentRow}: Invalid or out-of-month date.");
                                    }
                                }
                                else
                                {
                                    emptyRowStreak++;
                                    debugInfo.AppendLine($"Row {currentRow}: Empty date.");
                                }

                                if (emptyRowStreak >= maxEmptyRows)
                                {
                                    debugInfo.AppendLine($"Stopping scan after {maxEmptyRows} consecutive empty rows.");
                                    break;
                                }

                                currentRow++;
                            }

                            // Update validSheetRange to the last valid row
                            int lastValidRow = currentRow - emptyRowStreak -1;
                            validSheetRange = $"{sheetName}A8:J{lastValidRow}";
                            debugInfo.AppendLine($"Adjusted valid sheet range: {validSheetRange}");
                        }

                        // Log the valid file name if first date is found
                        if (firstDateFound)
                        {
                            debugInfo.AppendLine($"Valid file: {Path.GetFileName(excelFilePath)}");
                        }
                    }
                    catch (Exception ex)
                    {
                        string errorMsg = $"Error checking sheet '{sheetName}': {ex.Message}";
                        debugInfo.AppendLine(errorMsg);
                        File.AppendAllText(logFilePath, debugInfo.ToString());
                        MessageBox.Show(errorMsg, "Validation Error");
                        Dts.TaskResult = (int)ScriptResults.Failure;
                        return;
                    }

                    File.AppendAllText(logFilePath, debugInfo.ToString());

                    if (string.IsNullOrEmpty(validSheetRange))
                    {
                        string errorMsg = $"No valid sheet found in:\n{Path.GetFileName(excelFilePath)}\n\nDebug Info:\n{debugInfo}";
                        MessageBox.Show(errorMsg, "Validation Failed");
                        Dts.TaskResult = (int)ScriptResults.Failure;
                        return;
                    }

            
                    Dts.Variables["User::SelectedSheet"].Value = validSheetRange;
                    Dts.Variables["User::ExcelConnectionString"].Value = excelConnStr;
                    

                    debugInfo.AppendLine($"Expected valid rows for file '{fileName}': {validRowCount}");
                    File.WriteAllText(logFilePath, debugInfo.ToString());
                    debugInfo.AppendLine($"\nUsing sheet range: {validSheetRange}");
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
            }
            catch (Exception ex)
            {
                string errorMsg = $"CRITICAL ERROR:\n{ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
                MessageBox.Show(errorMsg, "Fatal Error");
                debugInfo.AppendLine(errorMsg);
                File.AppendAllText(logFilePath, debugInfo.ToString());
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private bool TryParseExcelDate(double serialDate, out DateTime date)
        {
            try
            {
                date = DateTime.FromOADate(serialDate);
                return date.Year >= 1900;
            }
            catch
            {
                date = DateTime.MinValue;
                return false;
            }
        }

    }


    #region ScriptResults declaration
    /// <summary>
    /// This enum provides a convenient shorthand within the scope of this class for setting the
    /// result of the script.
    /// 
    /// This code was generated automatically.
    /// </summary>
    enum ScriptResults
    {
        Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
        Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
    };
    #endregion
    
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_336a9463f4a8472591ee1c7d192a0a94</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_336a9463f4a8472591ee1c7d192a0a94</msb:DisplayName>
    <msb:ProjectId>{BDD112C7-5489-426D-857C-8B4D19625A44}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_336a9463f4a8472591ee1c7d192a0a94.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a136fd41f7184a7a96b8e8a480790b29")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_a136fd41f7184a7a96b8e8a480790b29")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="ST_336a9463f4a8472591ee1c7d192a0a94.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{3FE4EA49-40F9-438C-A0E3-7CB51A234E05}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_a136fd41f7184a7a96b8e8a480790b29</RootNamespace>
    <AssemblyName>ST_336a9463f4a8472591ee1c7d192a0a94</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a136fd41f7184a7a96b8e8a480790b29.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_336a9463f4a8472591ee1c7d192a0a94.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGJ2R2gAAAAAAAAAAOAAIiALATAAADgAAAAIAAAAAAAABlYA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALRVAABPAAAAAGAAAHQEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAADDYAAAAgAAAAOAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHQEAAAAYAAAAAYAAAA6AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAQAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADo
VQAAAAAAAEgAAAACAAUAXC4AAKAmAAABAAAAAAAAAPxUAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgDuCwAAAQAAEXIBAABwCnMQAAAKCwdyLQAAcCgRAAAK
jA8AAAEoEgAACm8TAAAKJgZ+FAAACigVAAAKB3J3AABwbxMAAAom3igMBnKbAABwCG8WAAAKKBcA
AAooFQAACgIoGAAAChdvGQAACt2FCwAAAHMOAAAGDQIoGAAACm8aAAAKcsUAAHBvGwAACm8cAAAK
bx0AAAoTBB8MjSIAAAElFnLtAABwoiUXcvUAAHCiJRhy/QAAcKIlGXIFAQBwoiUacg0BAHCiJRty
FQEAcKIlHHIdAQBwoiUdciUBAHCiJR5yLQEAcKIlHwlyNQEAcKIlHwpyPQEAcKIlHwtyRQEAcKIT
BQkRBCgeAAAKfQ4AAAQRBQn+Bg8AAAZzHwAACigBAAArEwYRBighAAAKLEVyTQEAcAl7DgAABCgX
AAAKEw0RDXKNAQBwKCIAAAomBxENbxMAAAomBgdvHQAACigjAAAKAigYAAAKF28ZAAAK3YEKAAAf
Co0iAAABJRZyuQEAcKIlF3LDAQBwoiUYctcBAHCiJRly5QEAcKIlGnINAgBwoiUbciUCAHCiJRxy
VwIAcKIlHXJpAgBwoiUecoECAHCiJR8JcpcCAHCiEwcRBCgkAAAKLUFyqQIAcBEEKBcAAAoTDhEO
ctcCAHAoIgAACiYHEQ5vEwAACiYGB28dAAAKKCMAAAoCKBgAAAoXbxkAAArd3QkAAHLtAgBwEQRy
SwMAcCglAAAKEwgRBnK3AwBwKBcAAAoTCX4UAAAKEwoWEwt+JgAAChMMEQhzJwAAChMPcxAAAAYT
EBEPbygAAAoHcssDAHARBCgpAAAKKBcAAApvEwAACiYHcu8DAHBvEwAACiYRD34qAAAKFG8rAAAK
ExEHci8EAHBvEwAACiYREW8sAAAKby0AAAoTFCsrERRvLgAACnQVAAABExUHcmMEAHARFXJvBABw
by8AAAooEgAACm8TAAAKJhEUbzAAAAotzN4VERR1FgAAARMWERYsBxEWbzEAAArcB3KFBABwbxMA
AAomERARBnKHBABwKBcAAAp9DwAABAdyiwQAcBEQew8AAAQoFwAACm8TAAAKJhERbywAAAooAgAA
KxEQ/gYRAAAGczMAAAooAwAAKy1Lcr8EAHAREHsPAAAEcs8EAHAoJQAAChMXERdy/wQAcCgiAAAK
JgcRF28TAAAKJgYHbx0AAAooIwAACgIoGAAAChdvGQAACt1YCAAAERB7DwAABHIXBQBwKBcAAAoT
EhEQew8AAARyIwUAcCgXAAAKExMHcjEFAHBvEwAACiZyWQUAcBEScnkFAHAoJQAAChEPczUAAApz
NgAACnM3AAAKExgRGG84AAAKJhcTGXM5AAAKExoWEx44hwAAABEYbzoAAApvOwAAChEeMCQWExkR
GnJ9BQBwER4XWIw2AAABEQcRHpooPAAACm89AAAKK00RGG86AAAKER5vPgAACm8/AAAKb0AAAAoT
HxEfEQcRHpobb0EAAAotJBYTGREacscFAHARHhdYjDYAAAERHxEHER6aKEIAAApvPQAAChEeF1gT
HhEeEQeOaT9u////ERktXQdyGQYAcG8TAAAKJgdyTQYAcBEaKEMAAApvEwAACiYGB28dAAAKKCMA
AApyUQYAcBEQew8AAARymwYAcCglAAAKcssGAHAoIgAACiYCKBgAAAoXbxkAAArd9QYAAAdy7wYA
cG8TAAAKJgdyBQcAcG8TAAAKJnJZBQBwERNyeQUAcCglAAAKEQ9zNQAACnM2AAAKczcAAAoTGxEb
bzgAAAomFhMcFhMgOI0AAAAWEyErbhEbbywAAAoRIG9EAAAKESFvRQAACiUtBCYUKwpvHQAACm9A
AAAKEyIRIighAAAKLTcRInJDBwBwG29BAAAKLCgXExwHclMHAHARIB5YjDYAAAERIRlYjDYAAAEo
PAAACm8TAAAKJisWESEXWBMhESERG286AAAKbzsAAAoyghEcLRkRIBdYEyARIBEbbywAAApvOwAA
Cj9g////ERwsS3K/BABwERB7DwAABHKpBwBwKCUAAAoTIwcRI28TAAAKJgYHbx0AAAooIwAAChEj
cssGAHAoIgAACiYCKBgAAAoXbxkAAArdtwUAAAdyCwgAcG8TAAAKJgdyMQgAcG8TAAAKJhEbbywA
AApvOwAACi1LclsIAHAREHsPAAAEcrUIAHAoJQAAChMkBxEkbxMAAAomBgdvHQAACigjAAAKESRy
ywYAcCgiAAAKJgIoGAAAChdvGQAACt1GBQAAB3K5CABwbxMAAAomcvcIAHAREHsPAAAEci0JAHAo
JQAAChEPczUAAApvRgAAChMdER05SgEAABEdbx0AAAoTCgdybwkAcBEKKBcAAApvEwAACiYcjSIA
AAElFnKhCQBwoiUXcrMJAHCiJRhyyQkAcKIlGXLbCQBwoiUacvEJAHCiJRtyBwoAcKITJREKESUo
RwAAChYSDChIAAAKEwsRCy0yEQooRwAAChYSDChJAAAKEwsRCywdB3IvCgBwEgxy8QkAcChKAAAK
KBcAAApvEwAACiYRCyx/AhEMfQEAAAQCEgwoSwAACn0CAAAEAhEFEQYoBAAAKxdYfQMAAAQCF30E
AAAEB3JpCgBwAnwBAAAEcvEJAHAoSgAACigXAAAKbxMAAAomB3KVCgBwEQYoFwAACm8TAAAKJgdy
swoAcAJ7AgAABIw2AAABKBIAAApvEwAACiYrRgdy1QoAcG8TAAAKJnItCwBwEQpyUwsAcCglAAAK
co0LAHAoIgAACiYrHAdytQsAcG8TAAAKJnK1CwBwcvkLAHAoIgAACiYCewQAAAQ5/wEAAAdyIwwA
cG8TAAAKJnJZBQBwEQlyeQUAcCglAAAKEQ9zNQAACnM2AAAKczcAAAoTJhEmbzgAAAomFhMnHwkT
KBEmbywAAApvLQAAChMUOFQBAAARFG8uAAAKdBUAAAETKhEqb00AAAp+DQAABCUtFyZ+DAAABP4G
DQAABnNOAAAKJYANAAAEKAUAACssHQdyWQwAcBEojDYAAAEoEgAACm8TAAAKJjgIAQAAESoWb0UA
AAolLQQmFCsFbx0AAAoTKxErKE8AAAo6mAAAABErEi0oUAAACi0RESsoRwAAChYSLChJAAAKKwoC
ES0SLCgCAAAGLFASLChRAAAKAnsDAAAEM0ESLChLAAAKAnsCAAAEMzICAnsFAAAEF1h9BQAABBYT
JwdyoQwAcBEojDYAAAERLIwPAAABKDwAAApvEwAACiYrPhEnF1gTJwdy7QwAcBEojDYAAAEoEgAA
Cm8TAAAKJiseEScXWBMnB3I7DQBwESiMNgAAASgSAAAKbxMAAAomEScbMhkHcmUNAHAbjDYAAAEo
EgAACm8TAAAKJisSESgXWBMoERRvMAAACjqg/v//3hURFHUWAAABExYRFiwHERZvMQAACtwRKBEn
WRdZEylyxQ0AcBEQew8AAAQRKYw2AAABKDwAAAoTCQdy2w0AcBEJKBcAAApvEwAACiYCewQAAAQs
GAdyFQ4AcBEEKCkAAAooFwAACm8TAAAKJt5UEy5yLw4AcBEQew8AAARyXQ4AcBEubxYAAAooUgAA
ChMvBxEvbxMAAAomBgdvHQAACigjAAAKES9yZQ4AcCgiAAAKJgIoGAAAChdvGQAACt0pAQAABgdv
HQAACigjAAAKEQkoIQAACiwucocOAHARBCgpAAAKByg8AAAKcssGAHAoIgAACiYCKBgAAAoXbxkA
AArd5gAAAAIoGAAACm8aAAAKcuMOAHBvGwAAChEJb1MAAAoCKBgAAApvGgAACnILDwBwbxsAAAoR
CG9TAAAKB3JDDwBwCXsOAAAEAnsFAAAEjDYAAAEoPAAACm8TAAAKJgYHbx0AAAooFQAACgdykw8A
cBEJKBcAAApvEwAACiYCKBgAAAoWbxkAAAreDBEPLAcRD28xAAAK3N5REzByvQ8AcBEwbxYAAApy
3w8AcBEwb1QAAAooUgAAChMxETFy/w8AcCgiAAAKJgcRMW8TAAAKJgYHbx0AAAooIwAACgIoGAAA
ChdvGQAACt4AKgAAQZQAAAAAAAAnAAAAGQAAAEAAAAAoAAAAEQAAAQIAAACmAgAAOAAAAN4CAAAV
AAAAAAAAAAIAAACcCAAAZwEAAAMKAAAVAAAAAAAAAAAAAAC7AwAAtQYAAHAKAABUAAAAEQAAAQIA
AABLAgAAQwkAAI4LAAAMAAAAAAAAAAAAAABpAAAAMwsAAJwLAABRAAAAEQAAARswAgAxAAAAAgAA
EQQDKFUAAAqBDwAAAQQoSwAACiBsBwAA/gQW/gEK3hAmBH4mAAAKgQ8AAAEWCt4ABioAAAABEAAA
AAAAAB8fABAYAAABSgJ+JgAACn0BAAAEAihWAAAKKh4CKFcAAAoqrn4JAAAELR5yFxAAcNAEAAAC
KFgAAApvWQAACnNaAAAKgAkAAAR+CQAABCoafgoAAAQqHgKACgAABCoafgsAAAQqHgIoWwAACiou
cwkAAAaACwAABCoucwwAAAaADAAABCoAAAATMAIAawAAAAAAAAADLBcDbx0AAApvXAAACnKJEABw
b10AAAotTwMsFwNvHQAACm9cAAAKcpsQAHBvXQAACi01AywXA28dAAAKb1wAAApyuRAAcG9dAAAK
LRsDLQIWKgNvHQAACm9cAAAKct8QAHBvXQAACioXKlICew4AAAQDG29eAAAKFv4EFv4BKnYDcm8E
AHBvLwAACm8dAAAKAnsPAAAEG29BAAAKKgAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAA
BQBsAAAAjAcAACN+AAD4BwAARAoAACNTdHJpbmdzAAAAADwSAAD8EAAAI1VTADgjAAAQAAAAI0dV
SUQAAABIIwAAWAMAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsAAAD6ATMAFgAAAQAAAEAAAAAIAAAA
DwAAABEAAAAGAAAAXgAAAAIAAAATAAAAAgAAAAIAAAADAAAABAAAAAQAAAABAAAABwAAAAEAAAAD
AAAABQAAAAAA/QUBAAAAAAAGAHcE8QcGAAYF8QcGAMMD3gcPAGUIAAAGAPADuwYGAFoEuwYGADsE
uwYGAO0EuwYGAJcEuwYGALAEuwYGAAcEuwYGACIETwUKAMsErAUKANoCrAUGAFACOAYGAHwHzgkG
AAQHOAYOAPQGCwEOAMcB/wAGALcHAQkOAP0J/wAGAOYBOAYGAE8AKgEGAF4JOAYGAIsD8QcGAHIA
OAYGAEQGOAYGAKYD3gcGAI4HEQgGADIHpgYSAHYD5wUSANcD5wUSABEDkQYGAGsFOAYGAB0CzgAK
ANUFrAUWAK4IWQIWANEBWQIGAHIFzgAaANsBPgcGAEEAKgEeAAoK1wgeAIAJ1wgOAPcGDgcOAEkB
CwEGAFQBOAYOAOIG/wAOAPYC/wAGANoBAQkOAFkBCwEOAJ4HCwEOAKEHDgcOAM0G/wAGAFYAOAYO
AGoG/wAGACEHOAYOAFwBDgcGAGwHOAYGALgIpgYGAB0KOAYGAPIBOAYGAIQCOAYGAPkBOAYGACcK
uwYAAAAAxQAAAAAAAQABAAEAEABaBp0AOQABAAEAAAEAACQJnQBtAAYABAAAABAAGAh0CGEACQAE
AAABEADHCHQIhQALAAgAAyEQACYBAABhAAwACwADARAAAQAAAGEADgAOAAMBEAAhAAAAYQAPABAA
AQBFA+EAAQBTBzQCAQCBBTQCAQBmATcCAQCyCTQCBgb3ADQCVoAUCToCVoCVAjoCEQBJBj4CEQC1
AkICEQCXAUYCNgDBAEoCFgBcAE4CBgAuAnkABgBGAnkAUCAAAAAAhgBgBgYAAQDgLAAAAACBAF8D
VgIBADAtAAAAAIYY0QcGAAMAQy0AAAAAgxjRBwYAAwBLLQAAAACTCIoHXgIDAHctAAAAAJMInQKU
AQMAfi0AAAAAkwipAmMCAwCGLQAAAACWCGUJaQIEAI0tAAAAAIYY0QcGAAQAlS0AAAAAkRjXB24C
BAChLQAAAACRGNcHbgIEAEMtAAAAAIYY0QcGAAQAsC0AAAAAgwBlAHICBABDLQAAAACGGNEHBgAF
ACcuAAAAAIMAFgALAgUAQy0AAAAAhhjRBwYABgA8LgAAAACDADYAdwIGAAAAAQBUAwIAAgBxAwAA
AQBBBQAAAQAlBgAAAQBHBgAAAQDcBwkA0QcBABEA0QcGABkA0QcKACkA0QcQADEA0QcQADkA0QcQ
AEEA0QcQAEkA0QcQAFEA0QcQAFkA0QcQAGEA0QcQAGkA0QcGAMkA0QcGAOEA0QcGAAEB0QcVAIEA
0QcGAHkA9QloABEBSQltAIEAeQJzABEBPAp5ABkB6Al8AIkApwGCABEBQgmGAHEAHAmMACEBjQkB
ACEBqgiSACkBLwaYADEBJAWfAMEAaQWCADkBdQajAAwA0QevAEEBcQm1ABEBNArNAFEBBQrSABkB
2gl8ABkBMgnNABEBQgnaAHkAOAXhAJEA0QcQAGEBVQYGADkBIgKjAGkBowjlAJEAswHqAJkAOQn0
AIEBwwf6AKEAnAmfAKkALwb/AKEAxQkEAbEAKQMGAEEBwAkIARQA0QevAEEBMAojAZEB0Qc2AZkB
0Qc9AZkA0QcGAKEBKgZEARwA0QcGAJkA9QhQAYEBqAlWAREBSQlaARwARQFhAakBLwZnAbkBNwKC
ABEBPwaCABEB0AhuAREBSQl2AREBZQZ+AXkBLwaJAakALwaPAckBXgefAPEAxQKUAXkAUAmZAXkA
MQOpAXkAaQW3AXkASgdWAeEBRwW8AakAFQrGASQA0QevABEBdQHNAOkBMQPWAXkAdwVWAREBQgnd
ATEBLgXlAYkAiAGCAHkAOgPuAXEA0QcGAMEA0QcGAPEBCwL0AfEBIwr9AekA0QcDAgkB0QcGABEB
rweCABEB7AgLAhEBRwUQAggAHAAqAggAIAAvAikAewC0Ai4ACwCMAi4AEwCVAi4AGwC0Ai4AIwC9
Ai4AKwDmAi4AMwDmAi4AOwDsAi4AQwC9Ai4ASwD0Ai4AUwDmAi4AWwANA0MAYwAvAkkAewC0AoMA
cwAvAsMAawAvAuMAawAvAgMBawAvAmEBawAvAhsA6gEEAAEABQADAAAAjgd9AgAA0gKCAgAAeAmH
AgIABQADAAIABgAFAAEABwAFAAIACAAHAKgAGwFKAcsBBIAAAAEAAABMJIEOAAAAAAAAeQAAAAQA
AAAAAAAAAAAAABgCHQEAAAAAEAAAAAAAAAAAAAAAIQKNBQAAAAAEAAAAAAAAAAAAAAAYAv8AAAAA
AAQAAAAAAAAAAAAAABgCOAYAAAAAEAAAAAAAAAAAAAAAIQLYAAAAAAAEAAAAAAAAAAAAAAAYAokC
AAAAAAQAAAAAAAAAAAAAABgC1wgAAAAAAAAAAAEAAAAiCAAABgACAAcAAgAIAAIAQQDJAGUAFgFp
ABYBmQDJAGkA0gEAAAAAADw+Y19fRGlzcGxheUNsYXNzNV8wADxNYWluPmJfXzAAPD5jX19EaXNw
bGF5Q2xhc3M1XzEAPE1haW4+Yl9fMQBJRW51bWVyYWJsZWAxAExpc3RgMQBJbnQzMgA8PjlfXzVf
MgA8TWFpbj5iX181XzIARnVuY2AyAFNUXzMzNmE5NDYzZjRhODQ3MjU5MWVlMWM3ZDE5MmEwYTk0
AFNUX2ExMzZmZDQxZjcxODRhN2E5NmI4ZThhNDgwNzkwYjI5ADw+OQA8TW9kdWxlPgBTeXN0ZW0u
SU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAU3lz
dGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAPD5jAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAEFk
ZABPbGVEYlNjaGVtYUd1aWQAT2xlRGJDb21tYW5kAGZpcnN0RGF0ZUZvdW5kAElzTnVsbE9yV2hp
dGVTcGFjZQBnZXRfU3RhY2tUcmFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UAR2V0T2xl
RGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASUVudW1lcmFibGUASURpc3Bvc2FibGUA
RG91YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpbGUAR2V0RmlsZU5h
bWUAZmlsZU5hbWUAZ2V0X0NvbHVtbk5hbWUAc2hlZXROYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAQXBwZW5kTGluZQBUeXBlAFN5c3RlbS5Db3JlAEZhaWx1cmUA
Z2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAGdldF9JbnZhcmlhbnRDdWx0
dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFz
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAFRyeVBhcnNlAEZyb21PQURhdGUAZmly
c3RWYWxpZERhdGUAc2VyaWFsRGF0ZQBUcnlQYXJzZUV4Y2VsRGF0ZQBkYXRlAEVkaXRvckJyb3dz
YWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVB
dHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNz
ZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFt
ZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVz
Y3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJs
eVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRh
c2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29t
cGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAE1pblZhbHVlAHZhbHVlAElu
ZGV4T2YAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBQYXRoAGdldF9Nb250aAB0
YXJnZXRNb250aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9u
ZW50TW9kZWwAU1RfMzM2YTk0NjNmNGE4NDcyNTkxZWUxYzdkMTkyYTBhOTQuZGxsAGNlbGwARmls
bABnZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBK
b2luAERhdGFDb2x1bW4AR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uAFN5c3RlbS5Db25maWd1
cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERhdGFDb2x1bW5D
b2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAE9sZURiQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lz
dGVtLkRhdGEuQ29tbW9uAFN0cmluZ0NvbXBhcmlzb24AQ3VsdHVyZUluZm8AU3lzdGVtLkxpbnEA
Z2V0X1llYXIAdGFyZ2V0WWVhcgBFeGVjdXRlU2NhbGFyAElGb3JtYXRQcm92aWRlcgBTdHJpbmdC
dWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAT2xlRGJEYXRhQWRhcHRlcgBUb0xvd2VyAElFbnVt
ZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfYTEzNmZkNDFm
NzE4NGE3YTk2YjhlOGE0ODA3OTBiMjkuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERl
YnVnZ2luZ01vZGVzAFNUX2ExMzZmZDQxZjcxODRhN2E5NmI4ZThhNDgwNzkwYjI5LlByb3BlcnRp
ZXMAVGFibGVzAGdldF9WYXJpYWJsZXMARGF0ZVRpbWVTdHlsZXMAU2V0dGluZ3MARXF1YWxzAFN5
c3RlbS5XaW5kb3dzLkZvcm1zAENvbnRhaW5zAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9u
cwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBFeGlzdHMAZ2V0X1Jvd3MAQ29uY2F0AEZv
cm1hdABUcnlQYXJzZUV4YWN0AE9iamVjdABnZXRfRGVmYXVsdABGaXJzdE9yRGVmYXVsdABEaWFs
b2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AHZhbGlkUm93Q291
bnQAQ2FzdABNb3ZlTmV4dABTeXN0ZW0uVGV4dABBcHBlbmRBbGxUZXh0AFdyaXRlQWxsVGV4dABn
ZXRfTm93AERhdGFSb3cAU2hvdwBNZXNzYWdlQm94AGdldF9JdGVtQXJyYXkAZ2V0X0Fzc2VtYmx5
AEFueQBJc051bGxPckVtcHR5AAAAACtDADoAXABUAGkAbQBlAHMAaABlAGUAdABzAFwATABvAGcA
LgB0AHgAdAAASXsAMAB9ADoAIABTAHQAYQByAHQAaQBuAGcAIABFAHgAYwBlAGwAIABzAGgAZQBl
AHQAIAByAGEAbgBnAGUAIAB0AGUAcwB0AAAjTABvAGcAIABmAGkAbABlACAAYwBsAGUAYQByAGUA
ZAAuAAApRQByAHIAbwByACAAYwBsAGUAYQByAGkAbgBnACAAbABvAGcAOgAgAAAnVQBzAGUAcgA6
ADoARQB4AGMAZQBsAEYAaQBsAGUAUABhAHQAaAAAB0oAYQBuAAAHRgBlAGIAAAdNAGEAcgAAB0EA
cAByAAAHTQBhAHkAAAdKAHUAbgAAB0oAdQBsAAAHQQB1AGcAAAdTAGUAcAAAB08AYwB0AAAHTgBv
AHYAAAdEAGUAYwAAP04AbwAgAG0AbwBuAHQAaAAgAGQAZQB0AGUAYwB0AGUAZAAgAGkAbgAgAGYA
aQBsAGUAbgBhAG0AZQA6ACAAACtNAG8AbgB0AGgAIABEAGUAdABlAGMAdABpAG8AbgAgAEUAcgBy
AG8AcgAACUQAYQB0AGUAABNEACAAbwBmACAAVwBlAGUAawAADUMAbABpAGUAbgB0AAAnQwBsAGkA
ZQBuAHQAIABQAHIAbwBqAGUAYwB0ACAATgBhAG0AZQAAF0QAZQBzAGMAcgBpAHAAdABpAG8AbgAA
MUIAaQBsAGwAYQBiAGwAZQAgAG8AcgAgAE4AbwBuACAAQgBpAGwAbABhAGIAbABlAAARQwBvAG0A
bQBlAG4AdABzAAAXVABvAHQAYQBsACAASABvAHUAcgBzAAAVUwB0AGEAcgB0ACAAVABpAG0AZQAA
EUUAbgBkACAAVABpAG0AZQAALUUAeABjAGUAbAAgAGYAaQBsAGUAIABuAG8AdAAgAGYAbwB1AG4A
ZAA6AAoAABVGAGkAbABlACAARQByAHIAbwByAABdUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBv
AHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQAQgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUA
cgBjAGUAPQAAazsARQB4AHQAZQBuAGQAZQBkACAAUAByAG8AcABlAHIAdABpAGUAcwA9ACIARQB4
AGMAZQBsACAAMQAyAC4AMAAgAFgAbQBsADsASABEAFIAPQBZAEUAUwA7AEkATQBFAFgAPQAxACIA
OwAAEyQAQQA4ADoASgAxADAAMAAwAAAjUAByAG8AYwBlAHMAcwBpAG4AZwAgAGYAaQBsAGUAOgAg
AAA/LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A
LQAtAC0ALQABM1MAaABlAGUAdABzACAAZgBvAHUAbgBkACAAaQBuACAAdwBvAHIAawBiAG8AbwBr
ADoAAAstACAAewAwAH0AARVUAEEAQgBMAEUAXwBOAEEATQBFAAABAAMkAAAzQwBoAGUAYwBrAGkA
bgBnACAAZABlAHQAZQBjAHQAZQBkACAAcwBoAGUAZQB0ADoAIAAAD1MAaABlAGUAdAAgACcAAS8n
ACAAbgBvAHQAIABmAG8AdQBuAGQAIABpAG4AIAB3AG8AcgBrAGIAbwBvAGsAARdTAGgAZQBlAHQA
IABFAHIAcgBvAHIAAAtBADgAOgBKADgAAA1DADgAOgBEADEANAAAJ0MAaABlAGMAawBpAG4AZwAg
AGgAZQBhAGQAZQByAHMALgAuAC4AAB9TAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAWwAAA10A
AElDAG8AbAB1AG0AbgAgAHsAMAB9ADoAIABNAGkAcwBzAGkAbgBnACAAKABlAHgAcABlAGMAdABl
AGQAIAAnAHsAMQB9ACcAKQABUUMAbwBsAHUAbQBuACAAewAwAH0AOgAgAEYAbwB1AG4AZAAgACcA
ewAxAH0AJwAgACgAZQB4AHAAZQBjAHQAZQBkACAAJwB7ADIAfQAnACkAATNIAGUAYQBkAGUAcgAg
AHYAYQBsAGkAZABhAHQAaQBvAG4AIABmAGEAaQBsAGUAZAA6AAADCgAASUgAZQBhAGQAZQByACAA
dgBhAGwAaQBkAGEAdABpAG8AbgAgAGYAYQBpAGwAZQBkACAAZgBvAHIAIABzAGgAZQBlAHQAIAAn
AAEvJwAuACAAUwBlAGUAIABsAG8AZwAgAGYAbwByACAAZABlAHQAYQBpAGwAcwAuAAEjVgBhAGwA
aQBkAGEAdABpAG8AbgAgAEYAYQBpAGwAZQBkAAAVSABlAGEAZABlAHIAcwAgAE8ASwAAPUMAaABl
AGMAawBpAG4AZwAgAGYAbwByACAAJwBFAHgAYQBtAHAAbABlACcAIAB0AGUAeAB0AC4ALgAuAAEP
RQB4AGEAbQBwAGwAZQAAVUYAbwB1AG4AZAAgACcARQB4AGEAbQBwAGwAZQAnACAAaQBuACAAYwBl
AGwAbAAgAFsAUgBvAHcAIAB7ADAAfQAsACAAQwBvAGwAIAB7ADEAfQBdAAFhJwAgAGMAbwBuAHQA
YQBpAG4AcwAgACcARQB4AGEAbQBwAGwAZQAnACAAdABlAHgAdAAgAC0AIABzAGsAaQBwAHAAaQBu
AGcAIAB2AGEAbABpAGQAYQB0AGkAbwBuAC4AASVOAG8AIAAnAEUAeABhAG0AcABsAGUAJwAgAGYA
bwB1AG4AZAABKUMAaABlAGMAawBpAG4AZwAgAGYAbwByACAAZABhAHQAYQAuAC4ALgAAWU4AbwAg
AGQAYQB0AGEAIABmAG8AdQBuAGQAIABpAG4AIAB2AGEAbABpAGQAYQB0AGkAbwBuACAAcgBhAG4A
ZwBlACAAaQBuACAAcwBoAGUAZQB0ACAAJwABAycAAT1SAGUAdAByAGkAZQB2AGkAbgBnACAAZgBp
AHIAcwB0ACAARABhAHQAZQAgAHYAYQBsAHUAZQAuAC4ALgAANVMARQBMAEUAQwBUACAAVABPAFAA
IAAxACAAWwBEAGEAdABlAF0AIABGAFIATwBNACAAWwAAQUEAOAA6AEoAMQA1AF0AIABXAEgARQBS
AEUAIABbAEQAYQB0AGUAXQAgAEkAUwAgAE4ATwBUACAATgBVAEwATAAAMUYAaQByAHMAdAAgAEQA
YQB0AGUAIAB2AGEAbAB1AGUAIABmAG8AdQBuAGQAOgAgAAARTQAvAGQALwB5AHkAeQB5AAAVTQBN
AC8AZABkAC8AeQB5AHkAeQAAEWQALwBNAC8AeQB5AHkAeQAAFWQAZAAvAE0ATQAvAHkAeQB5AHkA
ABV5AHkAeQB5AC0ATQBNAC0AZABkAAEneQB5AHkAeQAvAE0ATQAvAGQAZAAgAEgASAA6AG0AbQA6
AHMAcwAAOUYAYQBsAGwAYgBhAGMAawAgAHAAYQByAHMAaQBuAGcAIABzAHUAYwBjAGUAZQBkAGUA
ZAA6ACAAACtWAGEAbABpAGQAIABkAGEAdABlACAAZABlAHQAZQBjAHQAZQBkADoAIAAAHVQAYQBy
AGcAZQB0ACAATQBvAG4AdABoADoAIAAAIVQAYQByAGcAZQB0ACAAWQBlAGEAcgA6ACAAewAwAH0A
AFdGAGkAcgBzAHQAIABkAGEAdABlACAAdgBhAGwAdQBlACAAaQBzACAAbgBvAHQAIABhACAAdgBh
AGwAaQBkACAAZABhAHQAZQAgAGYAbwByAG0AYQB0AAAlRgBpAHIAcwB0ACAAZABhAHQAZQAgAHYA
YQBsAHUAZQAgACcAATknACAAaQBzACAAbgBvAHQAIABhACAAdgBhAGwAaQBkACAAZABhAHQAZQAg
AGYAbwByAG0AYQB0AAEnSQBuAHYAYQBsAGkAZAAgAEQAYQB0AGUAIABGAG8AcgBtAGEAdAAAQ04A
bwAgAEQAYQB0AGUAIAB2AGEAbAB1AGUAcwAgAGYAbwB1AG4AZAAgAGkAbgAgAHQAaABlACAAcwBo
AGUAZQB0AAApRABhAHQAZQAgAFYAYQBsAHUAZQAgAE4AbwB0ACAARgBvAHUAbgBkAAA1UwBjAGEA
bgBuAGkAbgBnACAAZgBvAHIAIAB2AGEAbABpAGQAIAByAG8AdwBzAC4ALgAuAABHUgBvAHcAIAB7
ADAAfQA6ACAARgBvAG8AdABlAHIAIABkAGUAdABlAGMAdABlAGQALgAgAFMAdABvAHAAcABpAG4A
ZwAuAABLUgBvAHcAIAB7ADAAfQA6ACAAVgBhAGwAaQBkACAAKABEAGEAdABlADoAIAB7ADEAOgB5
AHkAeQB5AC0ATQBNAC0AZABkAH0AKQABTVIAbwB3ACAAewAwAH0AOgAgAEkAbgB2AGEAbABpAGQA
IABvAHIAIABvAHUAdAAtAG8AZgAtAG0AbwBuAHQAaAAgAGQAYQB0AGUALgABKVIAbwB3ACAAewAw
AH0AOgAgAEUAbQBwAHQAeQAgAGQAYQB0AGUALgAAX1MAdABvAHAAcABpAG4AZwAgAHMAYwBhAG4A
IABhAGYAdABlAHIAIAB7ADAAfQAgAGMAbwBuAHMAZQBjAHUAdABpAHYAZQAgAGUAbQBwAHQAeQAg
AHIAbwB3AHMALgAAFXsAMAB9AEEAOAA6AEoAewAxAH0AADlBAGQAagB1AHMAdABlAGQAIAB2AGEA
bABpAGQAIABzAGgAZQBlAHQAIAByAGEAbgBnAGUAOgAgAAAZVgBhAGwAaQBkACAAZgBpAGwAZQA6
ACAAAC1FAHIAcgBvAHIAIABjAGgAZQBjAGsAaQBuAGcAIABzAGgAZQBlAHQAIAAnAAEHJwA6ACAA
ASFWAGEAbABpAGQAYQB0AGkAbwBuACAARQByAHIAbwByAABbTgBvACAAdgBhAGwAaQBkACAAcwBo
AGUAZQB0ACAAZgBvAHUAbgBkACAAaQBuADoACgB7ADAAfQAKAAoARABlAGIAdQBnACAASQBuAGYA
bwA6AAoAewAxAH0AACdVAHMAZQByADoAOgBTAGUAbABlAGMAdABlAGQAUwBoAGUAZQB0AAA3VQBz
AGUAcgA6ADoARQB4AGMAZQBsAEMAbwBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAAE9FAHgA
cABlAGMAdABlAGQAIAB2AGEAbABpAGQAIAByAG8AdwBzACAAZgBvAHIAIABmAGkAbABlACAAJwB7
ADAAfQAnADoAIAB7ADEAfQABKQoAVQBzAGkAbgBnACAAcwBoAGUAZQB0ACAAcgBhAG4AZwBlADoA
IAAAIUMAUgBJAFQASQBDAEEATAAgAEUAUgBSAE8AUgA6AAoAAB8KAAoAUwB0AGEAYwBrACAAVABy
AGEAYwBlADoACgAAF0YAYQB0AGEAbAAgAEUAcgByAG8AcgAAcVMAVABfAGEAMQAzADYAZgBkADQA
MQBmADcAMQA4ADQAYQA3AGEAOQA2AGIAOABlADgAYQA0ADgAMAA3ADkAMABiADIAOQAuAFAAcgBv
AHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAEWYAbwByAGUAYwBhAHMAdAAAHWIA
aQBsAGwAYQBiAGwAZQAgAGgAbwB1AHIAcwAAJW4AbwBuACAAYgBpAGwAbABhAGIAbABlACAAaABv
AHUAcgBzAAAZbABpAG4AZQAgAG0AYQBuAGEAZwBlAHIAAAAAAEv5BY+F65xCpC2nXB3kHWYABCAB
AQgDIAABBSABARERBCABAQ4FIAEBEX1MBzIOEkESRRIcDh0ODh0ODg4OAhE9Dg4SSRIgEk0ODhJR
ElUSWQ4STQIVEl0BDhJNAhwIDggIDg4OHQ4STQgICBJVDhE9DRJFDhJFDgQAABE9BQACDg4cBSAB
EkEOAgYOBQACAQ4OAyAADgUAAg4ODgUgABKAkQUgABKAlQYgARKAmRwDIAAcBAABDg4GFRJpAg4C
BSACARwYExABAh4AFRKApQEeABUSaQIeAAIDCgEOBAABAg4HAAIRgK0ODgYAAw4ODg4DBhE9BAYR
gLkJIAISTRGAuR0cBSAAEoC9BCAAElEEIAEcDgMgAAINEAEBFRKApQEeABKAxQQKARJVBxUSaQIS
VQISEAECAhUSgKUBHgAVEmkCHgACBiACAQ4SSQYgAQESgMkFIAEIEk0FFRJdAQ4FIAASgNUDIAAI
BgADDg4cHAUgAQETAAYgARKA3QgHIAICDhGA4QcABA4OHBwcCgACDg4VEoClAQ4FIAESVQgEIAEc
CAQAABJ5DwAFAg4dDhKA6RGA7RARPQ0ABAIOEoDpEYDtEBE9BCABDg4JEAECCB0eAB4ABCAAHRwG
FRJpAhwCAwoBHAYAAgIOEA0HAAQODg4ODgQgAQEcAwcBAgUAARE9DQgAARKA+RGA/QUgABKBAQcg
AgEOEoEBBCABAg4HIAIIDhGA4Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAACBggCBgIDBhEM
AwYSdQMGEnkDBhIUAwYSGAcGFRJpAhwCByACAg0QET0EAAASdQUAAQESeQQAABIUAwAAAQQgAQIc
BSABAhJVBAgAEnUECAASeQQIABIUCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQgBAAIAAAAAACgBACNTVF9hMTM2ZmQ0MWY3MTg0YTdhOTZiOGU4YTQ4MDc5MGIyOQAABQEA
AAAABwEAAkhQAAAYAQATQ29weXJpZ2h0IEAgSFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAtAAA
AM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwg
VmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2
MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQ
QURQQURQtAAAANxVAAAAAAAAAAAAAPZVAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADoVQAAAAAA
AAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAA
AAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAYBAAAAAAAAAAA
AAAYBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAgQ5M
JAAAAQCBDkwkPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUA
SQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEeAMAAAEAUwB0
AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVAMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEA
QwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAASABQ
AAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYQAxADMA
NgBmAGQANAAxAGYANwAxADgANABhADcAYQA5ADYAYgA4AGUAOABhADQAOAAwADcAOQAwAGIAMgA5
AAAAPAAOAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADkAMgA5ADIALgAzADcA
MQAzAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAzADMANgBhADkANAA2
ADMAZgA0AGEAOAA0ADcAMgA1ADkAMQBlAGUAMQBjADcAZAAxADkAMgBhADAAYQA5ADQALgBkAGwA
bAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgAEgAUAAgADIAMAAyADUAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsA
cwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAz
ADMANgBhADkANAA2ADMAZgA0AGEAOAA0ADcAMgA1ADkAMQBlAGUAMQBjADcAZAAxADkAMgBhADAA
YQA5ADQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYQAx
ADMANgBmAGQANAAxAGYANwAxADgANABhADcAYQA5ADYAYgA4AGUAOABhADQAOAAwADcAOQAwAGIA
MgA5AAAAQAAOAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA5ADIAOQAy
AC4AMwA3ADEAMwAAAEQADgABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADkAMgA5ADIALgAzADcAMQAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAACDYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Test valid sheets"
              DTS:CreationName="Microsoft.ScriptTask"
              DTS:Description="Script Task"
              DTS:Disabled="True"
              DTS:DTSID="{E0C4EC97-46CD-40AB-83D0-4C580B55481C}"
              DTS:ExecutableType="Microsoft.ScriptTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Test valid sheets"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_5b08711bd4b24d93ac2dd2e5e91aa559"
                  VSTAMajorVersion="16"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::ExcelFilePath,User::ExcelRange,User::SQLConnectionString">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Settings.get_Default():ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Sett" +
    "ings")]

namespace ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_5b08711bd4b24d93ac2dd2e5e91aa559.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{8E73A9BA-AE6C-4A3B-953C-4A29C92E31EC}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_6ec43d5a6ebf48289a877e0f94ecd669</RootNamespace><AssemblyName>ST_5b08711bd4b24d93ac2dd2e5e91aa559</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Data.SqlClient;

#endregion

namespace ST_6ec43d5a6ebf48289a877e0f94ecd669
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            try
            {
                string excelFilePath = Dts.Variables["User::ExcelFilePath"].Value.ToString();
                string[] monthSheets = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

                if (!File.Exists(excelFilePath))
                {
                    MessageBox.Show("Excel file not found at:\n" + excelFilePath,
                                    "File Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                string excelConnStr = $@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelFilePath};Extended Properties='Excel 12.0 Xml;HDR=YES;IMEX=1';";
                var validSheets = new List<string>();
                var sheetData = new Dictionary<string, List<string>>(); // To store data for valid sheets

                using (var conn = new OleDbConnection(excelConnStr))
                {
                    conn.Open();

                    foreach (string sheet in monthSheets)
                    {
                        string sheetName = $"{sheet}$";
                        string range = $"{sheetName}C8:D57";

                        try
                        {
                            var cmd = new OleDbCommand($"SELECT TOP 4 * FROM [{range}]", conn);
                            var adapter = new OleDbDataAdapter(cmd);
                            var table = new DataTable();
                            adapter.Fill(table);

                            // Check if there's any meaningful data in C8:D57
                            if (table.Rows.Count == 0)
                                continue;

                            bool hasExample = false;

                            // Collect data for display, ensuring no nulls or empty values
                            var dataValues = new List<string>();
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                var colC = table.Rows[i][0]?.ToString().Trim();
                                var colD = table.Rows[i][1]?.ToString().Trim();

                                // Skip rows where either column C or D is null or empty
                                if (string.IsNullOrEmpty(colC) || string.IsNullOrEmpty(colD))
                                    continue;

                                dataValues.Add($"Row {i + 8}: C={colC}, D={colD}");

                                // Check D8 to D14 (i.e., rows 0–6 in column index 1) for "Example"
                                if (i < 7 && colD.Equals("Example", StringComparison.OrdinalIgnoreCase))
                                {
                                    hasExample = true;
                                    break;
                                }

                                // INSERT INTO SQL STAGING TABLE
                                try
                                {
                                    string sqlConnStr = Dts.Variables["User::SQLConnectionString"].Value.ToString();
                                    using (SqlConnection sqlConn = new SqlConnection(sqlConnStr))
                                    {
                                        sqlConn.Open();
                                        string insertQuery = "INSERT INTO Timesheet.ProjectStaging (ClientName, ProjectName, FileName) VALUES (@ClientName, @ProjectName, @FileName)";

                                        using (SqlCommand insertCmd = new SqlCommand(insertQuery, sqlConn))
                                        {
                                            insertCmd.Parameters.AddWithValue("@ClientName", colC);
                                            insertCmd.Parameters.AddWithValue("@ProjectName", colD);
                                            insertCmd.Parameters.AddWithValue("@FileName", excelFilePath);
                                            insertCmd.ExecuteNonQuery();
                                        }
                                    }
                                }
                                catch (Exception sqlEx)
                                {
                                    MessageBox.Show($"SQL Insert Error: {sqlEx.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    Dts.TaskResult = (int)ScriptResults.Failure;
                                    return;
                                }
                            }

                            // Only add to valid sheets if there are rows with non-null data and no "Example"
                            if (!hasExample && dataValues.Count > 0)
                            {
                                validSheets.Add(sheet);
                                sheetData[sheet] = dataValues; // Store the data for this sheet
                            }
                        }
                        catch
                        {
                            // If sheet not found or bad format, just skip
                            continue;
                        }
                    }

                    if (validSheets.Count == 0)
                    {
                        MessageBox.Show("No valid month sheet with non-null data found in:\n" + excelFilePath,
                                        "Validation Error", MessageBoxButtons.OK);
                        Dts.TaskResult = (int)ScriptResults.Failure;
                        return;
                    }

                    // Prepare message with selected sheet and its data
                    string chosenSheet = validSheets.First();
                    string message = $"Timesheet: {Path.GetFileName(excelFilePath)}\n\n" +
                                    $"✅ Using Sheet: {chosenSheet}\n" +
                                    $"\nData from {chosenSheet}$C8:D57 (Top 4 rows, non-null):\n" +
                                    string.Join("\n", sheetData[chosenSheet]);

                    if (validSheets.Count > 1)
                    {
                        message += $"\n\n⚠️ Warning: Multiple valid sheets found: {string.Join(", ", validSheets)}\nOnly the first one will be used.";
                    }

                    MessageBox.Show(message, "Sheet Selected", MessageBoxButtons.OK);

                    // Save selected sheet range back to SSIS variable (optional)
                    Dts.Variables["User::ExcelRange"].Value = $"{chosenSheet}$C8:D57";
                }

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message,
                                "Exception", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_6ec43d5a6ebf48289a877e0f94ecd669</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_6ec43d5a6ebf48289a877e0f94ecd669</msb:DisplayName>
    <msb:ProjectId>{C7FE7393-7C36-446E-8882-F1EE0D39D58B}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_5b08711bd4b24d93ac2dd2e5e91aa559.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_6ec43d5a6ebf48289a877e0f94ecd669")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_6ec43d5a6ebf48289a877e0f94ecd669")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_6ec43d5a6ebf48289a877e0f94ecd669.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJhVQWgAAAAAAAAAAOAAIiALATAAAB4AAAAIAAAAAAAAsj0A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGA9AABPAAAAAEAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAuB0AAAAgAAAAHgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAQAAAAAYAAAAgAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACU
PQAAAAAAAEgAAAACAAUArCUAAPwWAAABAAAAAAAAAKg8AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgBUBAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKHwyNIgAAASUWcikAAHCiJRdyMQAAcKIlGHI5AABwoiUZckEAAHCiJRpySQAAcKIl
G3JRAABwoiUcclkAAHCiJR1yYQAAcKIlHnJpAABwoiUfCXJxAABwoiUfCnJ5AABwoiUfC3KBAABw
ogsGKBUAAAotKnKJAABwBigWAAAKcr0AAHAWHxAoFwAACiYCKBAAAAoXbxgAAArdlgMAAHLTAABw
BnIxAQBwKBkAAApzGgAACgxzGwAACg1zHAAAChMEEQRvHQAACgcTBxYTCDgjAgAAEQcRCJoTCREJ
cp0BAHAoFgAACnKhAQBwKBYAAAoTCnKvAQBwEQpy2wEAcCgZAAAKEQRzHgAACnMfAAAKcyAAAAoT
CxELbyEAAAomEQtvIgAACm8jAAAKLQXdvwEAABYTDHMaAAAKEw0WEw44dQEAABELbyIAAAoRDm8k
AAAKFm8lAAAKJS0EJhQrCm8UAAAKbyYAAAoTDxELbyIAAAoRDm8kAAAKF28lAAAKJS0EJhQrCm8U
AAAKbyYAAAoTEBEPKCcAAAo6FQEAABEQKCcAAAo6CQEAABENct8BAHARDh5YjC8AAAERDxEQKCgA
AApvKQAAChEOHS8XERByCwIAcBtvKgAACiwIFxMMOOgAAAAAAigQAAAKbxEAAApyGwIAcG8SAAAK
bxMAAApvFAAACnMrAAAKExEREW8dAAAKck8CAHAREXMsAAAKExIREm8tAAAKcj4DAHARD28uAAAK
JhESby0AAApyVgMAcBEQby4AAAomERJvLQAACnJwAwBwBm8uAAAKJhESby8AAAom3gwREiwHERJv
MAAACtzeDBERLAcREW8wAAAK3N4yExNyhAMAcBETbzEAAAooFgAACnKqAwBwFh8QKBcAAAomAigQ
AAAKF28YAAAK3YIBAAARDhdYEw4RDhELbyIAAApvIwAACj94/v//EQwtHBENbzIAAAoWMRIIEQlv
KQAACgkRCRENbzMAAAreAybeABEIF1gTCBEIEQeOaT/S/f//CG8yAAAKLShyyAMAcAYoFgAACnIu
BABwFig0AAAKJgIoEAAAChdvGAAACt0DAQAACCgBAAArEwUejSIAAAElFnJQBABwoiUXBig2AAAK
oiUYcmgEAHCiJRkRBaIlGnKMBABwoiUbEQWiJRxypgQAcKIlHXLoBABwCREFbzcAAAooOAAACqIo
OQAAChMGCG8yAAAKFzEeEQZy7AQAcHJEBQBwCCg4AAAKckoFAHAoOgAAChMGEQZyjgUAcBYoNAAA
CiYCKBAAAApvEQAACnKsBQBwbxIAAAoRBXLOBQBwKBYAAApvOwAACt4MEQQsBxEEbzAAAArcAigQ
AAAKFm8YAAAK3i8TFHLeBQBwERRvMQAACigWAAAKcu4FAHAWHxAoFwAACiYCKBAAAAoXbxgAAAre
ACpBlAAAAgAAAD4CAABFAAAAgwIAAAwAAAAAAAAAAgAAACkCAABoAAAAkQIAAAwAAAAAAAAAAAAA
AAMCAACcAAAAnwIAADIAAAAVAAABAAAAABEBAAD7AQAADAMAAAMAAAAWAAABAgAAAOAAAAAqAwAA
CgQAAAwAAAAAAAAAAAAAAAAAAAAkBAAAJAQAAC8AAAAVAAABHgIoPAAACioeAig9AAAKKq5+AQAA
BC0ecgIGAHDQAwAAAig+AAAKbz8AAApzQAAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4D
AAAEKh4CKEEAAAoqLnMIAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAF
AGwAAACcBQAAI34AAAgGAAD8BwAAI1N0cmluZ3MAAAAABA4AAHQGAAAjVVMAeBQAABAAAAAjR1VJ
RAAAAIgUAAB0AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPoBMwAWAAABAAAAOgAAAAUAAAAG
AAAACQAAAAEAAABBAAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAgAAAAEAAAAHAAAAAQAAAAEA
AAABAAAAAACFBAEAAAAAAAYAGQMgBgYAqAMgBgYAZQINBg8AlAYAAAYAkgIvBQYA/AIvBQYA3QIv
BQYAjwMvBQYAOQMvBQYAUgMvBQYAqQIvBQYAxALtAwoAbQM0BAoAwQE0BAYADwCuAAYAHACuAA4A
agWTAA4AAQGHAA4AegWRBw4A2gCRBwYAiAXEBAYAYgfEBAYA0ATEBAYASAINBgYA0gVABgYAtgUa
BRIAGAJvBBIAeQJvBBIA+AEFBQYALQIgBgoAXQQ0BBYA1gZgARYACwFgAQYACQTEBAYATwFWABoA
xAfwBhoAdQfwBhoABQfwBhoA9gTwBg4AbQWSBQ4AzQCTAA4A7wWTAA4A8gWSBQ4AWAWHAA4A3QGH
AA4AtweHAAYAFgDEBAYApQXEBA4AQQWRBw4A4gWRBw4A0ACSBQYAHwHEBB4AFAHCBQYAAQCuAAYA
EARWAAYAgAHEBAYAKwHEBAYA0wcvBQAAAABNAAAAAAABAAEAAQAQAOYEKQA5AAEAAQAAABAARwaj
BlkAAQADAAABEADgBqMGdQADAAcAAwEAADYHAABdAAQACgARANUEbQERALEBcQERAOUAdQEGBn8A
eQFWgCYHfAFWgJEBfAFQIAAAAACGAOwEBgABAEQlAAAAAIYYAAYGAAEATCUAAAAAgxgABgYAAQBU
JQAAAACTCM4FgAEBAIAlAAAAAJMImQGFAQEAhyUAAAAAkwilAYoBAQCPJQAAAACWCGkHkAECAJYl
AAAAAIYYAAYGAAIAniUAAAAAkRgGBpUBAgAAAAEA5wMJAAAGAQARAAAGBgAZAAAGCgApAAAGEAAx
AAAGEAA5AAAGEABBAAAGEABJAAAGEABRAAAGEABZAAAGEABhAAAGEABpAAAGBgDBAAAGBgDhAAAG
FQDxAAAGBgBxAC4HTAD5ANIGUQABAbIEVwAJAcYDXgCxAAcEYgAZAUQHZgARAVQHawAhAb8HcQD5
AIIHAQARAVQHfwAMAAAGBgAUAAAGBgCJAAAGEABBAeEEBgBJAQAGlwBRAQAGngCRAAAGBgBZAa0E
pQCRAEsHqwBpAacHsQBhAbIEtQBxAbIEvAARAcsEYgARAewHZgARAVsHwQAMAMkAyQARAekGzwCZ
AAAGEAChAAAG1wChABcH3gCJAdoD5ACZAdwHsQChARACBgCpAPUAYgAMAKcHsQAUALsE7AAhAb8H
9ACpAbEH/wC5AVQBEAEUALIEFQERAfEEHAERAVQHJwERAVQHLQEJAdADNQFxAAAGBgCxAAAGBgDB
AT0BOgHBAc8HQwHJAAAGSQHpAAAGBgAIABQAYwEIABgAaAEpAHMA0AEuAAsAqAEuABMAsQEuABsA
0AEuACMA2QEuACsAAgIuADMAAgIuADsACAIuAEMA2QEuAEsAEAIuAFMAAgIuAFsAKQJDAGMAaAFJ
AHMA0AFhAHsAaAFjAGsAaAEbAAMAAQAEAAMAAADSBZkBAAC5AZ4BAABtB6MBAgAEAAMAAgAFAAUA
AQAGAAUAAgAHAAcAhgCMAASAAAABAAAARyTcSQAAAAAAACkAAAAEAAAAAAAAAAAAAABRAaUAAAAA
ABAAAAAAAAAAAAAAAFoBFQQAAAAABAAAAAAAAAAAAAAAUQGHAAAAAAAEAAAAAAAAAAAAAABRAcQE
AAAAABAAAAAAAAAAAAAAAFoBYAAAAAAABAAAAAAAAAAAAAAAUQHwBgAAAAAEAAAAAAAAAAAAAABR
AYUBAAAAAAAAAAABAAAAUQYAAAUAAgBrAAwBAAAAAABJRW51bWVyYWJsZWAxAExpc3RgMQBJbnQz
MgBEaWN0aW9uYXJ5YDIAU1RfNmVjNDNkNWE2ZWJmNDgyODlhODc3ZTBmOTRlY2Q2NjkAPE1vZHVs
ZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3Rl
bS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5l
cmljAEFkZABPbGVEYkNvbW1hbmQAU3FsQ29tbWFuZABkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3Nh
Z2UARGF0YVRhYmxlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBHZXRGaWxlTmFtZQBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lAFR5cGUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVy
bmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRp
dG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25V
c2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJp
YnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNz
ZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRl
AEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lT
U2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1
bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBzZXRfVmFsdWUAQWRkV2l0aFZh
bHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAUGF0aABNaWNyb3Nv
ZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2Ny
aXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfNmVjNDNk
NWE2ZWJmNDgyODlhODc3ZTBmOTRlY2Q2NjkuZGxsAEZpbGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lz
dGVtAFRyaW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4ASm9pbgBNZXNzYWdlQm94
SWNvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVm
bGVjdGlvbgBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAE9sZURiQ29u
bmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3RyaW5n
Q29tcGFyaXNvbgBDdWx0dXJlSW5mbwBTeXN0ZW0uTGlucQBnZXRfUmVzb3VyY2VNYW5hZ2VyAFNx
bFBhcmFtZXRlcgBPbGVEYkRhdGFBZGFwdGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3Rp
Y3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzZl
YzQzZDVhNmViZjQ4Mjg5YTg3N2UwZjk0ZWNkNjY5LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291
cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF82ZWM0M2Q1YTZlYmY0ODI4OWE4NzdlMGY5NGVjZDY2OS5Q
cm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MARXF1YWxzAFN5c3RlbS5XaW5kb3dzLkZv
cm1zAE1lc3NhZ2VCb3hCdXR0b25zAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3Jp
cHRSZXN1bHRzAEV4aXN0cwBnZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABnZXRfRGVmYXVs
dABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9D
b3VudABGaXJzdABEYXRhUm93AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkARXhlY3V0ZU5v
blF1ZXJ5AElzTnVsbE9yRW1wdHkAAAAAJ1UAcwBlAHIAOgA6AEUAeABjAGUAbABGAGkAbABlAFAA
YQB0AGgAAAdKAGEAbgAAB0YAZQBiAAAHTQBhAHIAAAdBAHAAcgAAB00AYQB5AAAHSgB1AG4AAAdK
AHUAbAAAB0EAdQBnAAAHUwBlAHAAAAdPAGMAdAAAB04AbwB2AAAHRABlAGMAADNFAHgAYwBlAGwA
IABmAGkAbABlACAAbgBvAHQAIABmAG8AdQBuAGQAIABhAHQAOgAKAAAVRgBpAGwAZQAgAEUAcgBy
AG8AcgAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwA
RQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAGs7AEUAeAB0AGUAbgBk
AGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAnAEUAeABjAGUAbAAgADEAMgAuADAAIABYAG0A
bAA7AEgARABSAD0AWQBFAFMAOwBJAE0ARQBYAD0AMQAnADsAAQMkAAANQwA4ADoARAA1ADcAACtT
AEUATABFAEMAVAAgAFQATwBQACAANAAgACoAIABGAFIATwBNACAAWwAAA10AACtSAG8AdwAgAHsA
MAB9ADoAIABDAD0AewAxAH0ALAAgAEQAPQB7ADIAfQAAD0UAeABhAG0AcABsAGUAADNVAHMAZQBy
ADoAOgBTAFEATABDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAACA7UkATgBTAEUAUgBU
ACAASQBOAFQATwAgAFQAaQBtAGUAcwBoAGUAZQB0AC4AUAByAG8AagBlAGMAdABTAHQAYQBnAGkA
bgBnACAAKABDAGwAaQBlAG4AdABOAGEAbQBlACwAIABQAHIAbwBqAGUAYwB0AE4AYQBtAGUALAAg
AEYAaQBsAGUATgBhAG0AZQApACAAVgBBAEwAVQBFAFMAIAAoAEAAQwBsAGkAZQBuAHQATgBhAG0A
ZQAsACAAQABQAHIAbwBqAGUAYwB0AE4AYQBtAGUALAAgAEAARgBpAGwAZQBOAGEAbQBlACkAABdA
AEMAbABpAGUAbgB0AE4AYQBtAGUAABlAAFAAcgBvAGoAZQBjAHQATgBhAG0AZQAAE0AARgBpAGwA
ZQBOAGEAbQBlAAAlUwBRAEwAIABJAG4AcwBlAHIAdAAgAEUAcgByAG8AcgA6ACAAAB1EAGEAdABh
AGIAYQBzAGUAIABFAHIAcgBvAHIAAGVOAG8AIAB2AGEAbABpAGQAIABtAG8AbgB0AGgAIABzAGgA
ZQBlAHQAIAB3AGkAdABoACAAbgBvAG4ALQBuAHUAbABsACAAZABhAHQAYQAgAGYAbwB1AG4AZAAg
AGkAbgA6AAoAASFWAGEAbABpAGQAYQB0AGkAbwBuACAARQByAHIAbwByAAAXVABpAG0AZQBzAGgA
ZQBlAHQAOgAgAAAjCgAKAAUnIABVAHMAaQBuAGcAIABTAGgAZQBlAHQAOgAgAAEZCgAKAEQAYQB0
AGEAIABmAHIAbwBtACAAAEEkAEMAOAA6AEQANQA3ACAAKABUAG8AcAAgADQAIAByAG8AdwBzACwA
IABuAG8AbgAtAG4AdQBsAGwAKQA6AAoAAQMKAABXCgAKAKAmD/4gAFcAYQByAG4AaQBuAGcAOgAg
AE0AdQBsAHQAaQBwAGwAZQAgAHYAYQBsAGkAZAAgAHMAaABlAGUAdABzACAAZgBvAHUAbgBkADoA
IAABBSwAIAAAQwoATwBuAGwAeQAgAHQAaABlACAAZgBpAHIAcwB0ACAAbwBuAGUAIAB3AGkAbABs
ACAAYgBlACAAdQBzAGUAZAAuAAAdUwBoAGUAZQB0ACAAUwBlAGwAZQBjAHQAZQBkAAAhVQBzAGUA
cgA6ADoARQB4AGMAZQBsAFIAYQBuAGcAZQAADyQAQwA4ADoARAA1ADcAAA9FAHIAcgBvAHIAOgAg
AAATRQB4AGMAZQBwAHQAaQBvAG4AAHFTAFQAXwA2AGUAYwA0ADMAZAA1AGEANgBlAGIAZgA0ADgA
MgA4ADkAYQA4ADcANwBlADAAZgA5ADQAZQBjAGQANgA2ADkALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAAH1y6Hk+VdNOnHFsOcVmw7cABCABAQgDIAABBSABARERBCAB
AQ4FIAEBEW0wBxUOHQ4VEj0BDhUSQQIOFRI9AQ4SRQ4OHQ4IDg4SSQIVEj0BDggODhJNElESVRJV
BCAAEn0FIAASgIEGIAESgIUcAyAAHAMgAA4EAAECDgUAAg4ODg0ABBGAlQ4OEYCZEYCdBgADDg4O
DgUVEj0BDgoVEkECDhUSPQEOBiACAQ4SRQYgAQESgKUFIAEIEkkFIAASgLEDIAAIBiABEoC5CAQg
ARwIBwAEDg4cHBwFIAEBEwAHIAICDhGAwQYgAgEOEk0FIAASgMUHIAISgMkOHAcgAgETABMBCgAD
EYCVDg4RgJkMEAEBHgAVEoDZAR4AAwoBDgQAAQ4OBiABEwETAAoAAg4OFRKA2QEOBQABDh0OBwAE
Dg4ODg4EIAEBHAgAARKA4RGA5QUgABKA6QcgAgEOEoDpCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAE
AQAAAAMGEmUDBhJpAwYSEAIGCAMGERQEAAASZQQAABJpBQABARJpBAAAEhADAAABBAgAEmUECAAS
aQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgB
ACNTVF82ZWM0M2Q1YTZlYmY0ODI4OWE4NzdlMGY5NGVjZDY2OQAABQEAAAAABwEAAkhQAAAYAQAT
Q29weXJpZ2h0IEAgSFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRG
cmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxT
eXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4w
LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVt
LlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAIg9AAAA
AAAAAAAAAKI9AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUPQAAAAAAAAAAAAAAAF9Db3JEbGxN
YWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAIgQAAAAAAAAAAAAAIgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABANxJRyQAAAEA3ElHJD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBIIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAF4DAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAmAAMAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAEgAUAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADYAZQBjADQAMwBkADUAYQA2AGUAYgBmADQAOAAyADgAOQBhADgANwA3AGUAMABmADkA
NABlAGMAZAA2ADYAOQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA5
ADIAOAA3AC4AMQA4ADkAMAA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMA
VABfADYAZQBjADQAMwBkADUAYQA2AGUAYgBmADQAOAAyADgAOQBhADgANwA3AGUAMABmADkANABl
AGMAZAA2ADYAOQAuAGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAA
QwBvAHAAeQByAGkAZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABU
AHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADYAZQBjADQAMwBkADUAYQA2AGUAYgBmADQAOAAyADgAOQBhADgANwA3
AGUAMABmADkANABlAGMAZAA2ADYAOQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwA2AGUAYwA0ADMAZAA1AGEANgBlAGIAZgA0ADgAMgA4ADkAYQA4ADcANwBl
ADAAZgA5ADQAZQBjAGQANgA2ADkAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADkAMgA4ADcALgAxADgAOQAwADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAg
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADkAMgA4ADcALgAxADgAOQAwADgAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAALQ9AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{B69A6E4C-DA4C-41E0-884C-84CCE41FDDF6}"
              DTS:From="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Select Month Sheet"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C05828FE-DFF5-4F10-8EA2-27638A4BE8AE}"
              DTS:ObjectName="{68F0C9C0-59C9-4DC4-B758-6AB8BA7D3908}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::ExcelFilePath" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Loop Through Employee Folders ADO.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{D59F3955-8E34-465B-BFD2-907DC3EB4B7E}"
          DTS:From="Package\Loop Through Employee Folders ADO\Extract Employee Names"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Loop Through Employee Folders ADO\Loop through each Excel File" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{2381FA72-7C1B-46D3-9CF8-BE59B1E2FE78}"
          DTS:ObjectName="{FED277DB-3753-47EB-A2B1-D213B2CB2C28}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::EmployeeFolderPath" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{3D69A2C3-47D3-480F-B02E-3AEE523C04BB}"
      DTS:From="Package\Loop Employee Folders Script"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Loop Through Employee Folders ADO" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{EAC74803-3B64-49F7-8215-A14DA6C46563}"
      DTS:From="Package\Loop Through Employee Folders ADO"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Clean and Validate Timesheet Data" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{DC57A9B1-2A6B-4CED-A90C-D5D428C019BF}"
      DTS:From="Package\Clean and Validate Timesheet Data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Load Timesheet Data" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{5C95AC12-290F-4706-BD0D-066B0BCE0079}"
      DTS:From="Package\Load Timesheet Data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Forecast Summary" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{6B948E85-DF05-40A8-9F5A-5C418921F7B6}"
      DTS:From="Package\Forecast Summary"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Clear Timesheet Staging Data" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="242.4,41.6"
          Id="Package\Clean and Validate Timesheet Data"
          TopLeft="495.833306242196,859.333330573109" />
        <NodeLayout
          Size="217.6,41.6"
          Id="Package\Clear Timesheet Staging Data"
          TopLeft="504.999972408018,1137.66666297231" />
        <NodeLayout
          Size="166.4,41.6"
          Id="Package\Forecast Summary"
          TopLeft="529.999971042078,1044.93333136863" />
        <NodeLayout
          Size="177.6,41.6"
          Id="Package\Load Timesheet Data"
          TopLeft="529.166637754276,956.533330536948" />
        <NodeLayout
          Size="217.6,41.6"
          Id="Package\Loop Employee Folders Script"
          TopLeft="504.791639086068,90.9999993671974" />
        <NodeLayout
          Size="195.2,41.6"
          Id="Package\Loop Through Employee Folders ADO\Extract Employee Names"
          TopLeft="84.699976096055,45.3000010305642" />
        <NodeLayout
          Size="149.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data"
          TopLeft="94.2333040566915,190.599996004303" />
        <NodeLayout
          Size="168.8,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Select Month Sheet"
          TopLeft="82.8999752764912,108.199998824795" />
        <NodeLayout
          Size="156,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Test valid sheets"
          TopLeft="87.1333071983531,43.3999985355136" />
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File.PrecedenceConstraints[Constraint]"
          TopLeft="168.166639666591,149.799998824795">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40.799997179508"
              Start="0,0"
              End="0,33.299997179508">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.299997179508" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="335.2,287.2"
          Size="335.2,330.4"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File"
          TopLeft="16.4416488525364,144.699998309513" />
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO.PrecedenceConstraints[Constraint 1]"
          TopLeft="183.170812474296,86.9000010305642">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,57.7999972789489"
              Start="0,0"
              End="0,50.2999972789489">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.2999972789489" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="374.4,542.4"
          Size="374.4,585.6"
          Id="Package\Loop Through Employee Folders ADO"
          TopLeft="424.999976779025,196.733331965274" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="612.895807932547,132.599999367197">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,64.1333325980766"
              Start="0,0"
              End="0,56.6333325980766">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,56.6333325980766" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="614.616641510611,782.333331965274">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,76.999998607835"
              Start="0,0"
              End="0,69.499998607835">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,69.499998607835" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="617.499971998236,900.933330573109">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,55.5999999638394"
              Start="0,0"
              End="0,48.0999999638394">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.0999999638394" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="615.583304398177,998.133330536948">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46.800000831684"
              Start="0,0"
              End="0,39.300000831684">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.300000831684" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="613.499971725048,1086.53333136863">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,51.133331603676"
              Start="0,0"
              End="0,43.633331603676">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.633331603676" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="184.8,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet"
          TopLeft="354.999980603656,80.5999994395177" />
        <NodeLayout
          Size="156,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Data Conversion"
          TopLeft="363.333313481676,275.199998481274" />
        <NodeLayout
          Size="135.2,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors"
          TopLeft="835.266635978548,480.333333718048" />
        <NodeLayout
          Size="119.2,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog"
          TopLeft="917.166616991992,208.266669010056" />
        <NodeLayout
          Size="120,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Union All"
          TopLeft="835.833287665416,374.466665286554" />
        <NodeLayout
          Size="170.4,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component 1"
          TopLeft="695.833295314678,281.866665413114" />
        <NodeLayout
          Size="161.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Script Component"
          TopLeft="704.66662860248,200.399999312956" />
        <NodeLayout
          Size="193.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance"
          TopLeft="336.666648272011,348.799998553594" />
        <NodeLayout
          Size="213.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging"
          TopLeft="330.833315257398,446.333330229586" />
        <NodeLayout
          Size="119.2,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\ErrorLog 1"
          TopLeft="929.16661589924,282.800001825094" />
        <NodeLayout
          Size="236.8,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Add EmployeeNameAndFileName"
          TopLeft="325.833315530586,194.999998643994" />
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Lookup Match Output]"
          TopLeft="530.266648272011,369.599998553594">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="305.566639393405,25.6666667329603"
              Start="0,0"
              End="298.066639393405,25.6666667329603">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="148.783319696702,0" />
                  <mssgle:CubicBezierSegment
                    Point1="148.783319696702,0"
                    Point2="152.783319696702,0"
                    Point3="152.783319696702,4" />
                  <mssgle:LineSegment
                    End="152.783319696702,21.6666667329603" />
                  <mssgle:CubicBezierSegment
                    Point1="152.783319696702,21.6666667329603"
                    Point2="152.783319696702,25.6666667329603"
                    Point3="156.783319696702,25.6666667329603" />
                  <mssgle:LineSegment
                    End="298.066639393405,25.6666667329603" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="104.591932977952,-17.609375,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Excel Source Output]"
          TopLeft="445.816648067121,122.199999439518">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,72.7999992044766"
              Start="0,0"
              End="0,65.2999992044766">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65.2999992044766" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Output2]"
          TopLeft="976.766616991992,249.866669010056">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-99.5999959932427,124.599996276498"
              Start="0,0"
              End="-99.5999959932427,117.099996276498">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,69.7763135847687" />
                  <mssgle:CubicBezierSegment
                    Point1="0,69.7763135847687"
                    Point2="0,73.7763135847687"
                    Point3="-4,73.7763135847687" />
                  <mssgle:LineSegment
                    End="-95.5999959932427,73.7763135847687" />
                  <mssgle:CubicBezierSegment
                    Point1="-95.5999959932427,73.7763135847687"
                    Point2="-99.5999959932427,73.7763135847687"
                    Point3="-99.5999959932427,77.7763135847687" />
                  <mssgle:LineSegment
                    End="-99.5999959932427,117.099996276498" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Output1]"
          TopLeft="988.76661589924,324.400001825094">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-92.933328233824,50.0666634614604"
              Start="0,0"
              End="-92.933328233824,42.5666634614604">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.0333317307302" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.0333317307302"
                    Point2="0,25.0333317307302"
                    Point3="-4,25.0333317307302" />
                  <mssgle:LineSegment
                    End="-88.933328233824,25.0333317307302" />
                  <mssgle:CubicBezierSegment
                    Point1="-88.933328233824,25.0333317307302"
                    Point2="-92.933328233824,25.0333317307302"
                    Point3="-92.933328233824,29.0333317307302" />
                  <mssgle:LineSegment
                    End="-92.933328233824,42.5666634614604" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Output]"
          TopLeft="442.783314506131,236.599998643994">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38.5999998372794"
              Start="0,0"
              End="0,31.0999998372794">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.0999998372794" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Derived Column Error Output]"
          TopLeft="562.633315530586,218.499998978475">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="142.033313071894,0"
              Start="0,0"
              End="134.533313071894,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="134.533313071894,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="2.30526981719701,5,129.9227734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Data Conversion Output]"
          TopLeft="437.399980876844,316.799998481274">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,32.0000000723198"
              Start="0,0"
              End="0,24.5000000723198">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.5000000723198" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Data Conversion Error Output]"
          TopLeft="519.333313481676,299.333331947194">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="176.499981833002,0"
              Start="0,0"
              End="168.999981833002,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="168.999981833002,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="18.4136041977511,5,132.1727734375,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Union All Output 1]"
          TopLeft="899.349961821982,416.066665286554">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,64.2666684314939"
              Start="0,0"
              End="0,56.7666684314939">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,56.7666684314939" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Output 01]"
          TopLeft="866.233295314678,303.133333619104">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="62.9333205845614,0"
              Start="0,0"
              End="55.4333205845614,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="55.4333205845614,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Output 0]"
          TopLeft="866.26662860248,225.133334161506">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="50.8999883895115,0"
              Start="0,0"
              End="43.3999883895115,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="43.3999883895115,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data.Paths[Lookup Error Output]"
          TopLeft="435.549981764705,390.399998553594">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,55.933331675992"
              Start="0,0"
              End="0,48.433331675992">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.433331675992" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-45.86638671875,18.411978337996,91.7327734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Read Timesheet Sheet">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert Errors">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Validate Data Exsistance">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string"></Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Load Raw Data\Insert into Timesheet Staging">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>