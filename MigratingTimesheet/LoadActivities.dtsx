<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/5/2025 3:42:22 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-62JJ49T4"
  DTS:CreatorName="LAPTOP-62JJ49T4\MuzuvukileNqwiliso"
  DTS:DTSID="{1D49491C-E4D3-443B-B060-DE40CE4DF720}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="7177"
  DTS:ObjectName="LoadActivities"
  DTS:PackageType="5"
  DTS:VersionBuild="64"
  DTS:VersionGUID="{C9C9C7B3-1A7B-4A2A-96BC-1BC3CAB704FD}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{FAFBFD70-9B28-4D88-B61F-E690AB7A4F99}"
      DTS:ObjectName="LocalHost.TimesheetDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=TimesheetDB;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Application Name=SSIS-ImportActivities-{FAFBFD70-9B28-4D88-B61F-E690AB7A4F99}LocalHost.TimesheetDB;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{44F3C42B-68B1-4D0F-86CC-5C123CA1F3BD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFilePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Timesheets\Muzuvukile Nqwiliso\Muzuvukile Nqwiliso May Final.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D5A6DEE0-6936-4A95-8EF1-8D8AFBF0B704}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelRange">
      <DTS:VariableValue
        DTS:DataType="8">Key$F2:F39</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B16B728A-64B9-484B-9022-CCD702E4E2CF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsAffectedActivity">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{534EA6F5-2C4D-4B1D-8A51-203D2B099106}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsAffectedLeave">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D02F53CA-1AB0-4485-AF1C-5F73DE592839}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SQLConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=.;Initial Catalog=TimesheetDB;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D2E09FF6-0AC7-4E56-85A8-C59E5FF0959A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TableName">
      <DTS:VariableValue
        DTS:DataType="8">Timesheet.ActivityLeaveStaging</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Clean Staging"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{48B422D4-E63A-471C-98E8-9B1C3385E0BD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Clean Staging"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FAFBFD70-9B28-4D88-B61F-E690AB7A4F99}"
          SQLTask:SqlStatementSource=" TRUNCATE TABLE [TimesheetDB].[Timesheet].[ActivityLeaveStaging];" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Combine Data From ActivityAndLeave"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{15F8778C-E998-47E2-9665-101D676C95D4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Combine Data From ActivityAndLeave"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FAFBFD70-9B28-4D88-B61F-E690AB7A4F99}"
          SQLTask:SqlStatementSource="-- Insert Activities&#xA;INSERT INTO Timesheet.Description (DescriptionType, SourceID, DescriptionName)&#xA;SELECT 'Activity', A.ActivityID, A.ActivityName&#xA;FROM Timesheet.Activity A&#xA;WHERE NOT EXISTS (&#xA;    SELECT 1 FROM Timesheet.Description D&#xA;    WHERE D.DescriptionType = 'Activity'&#xA;      AND D.SourceID = A.ActivityID&#xA;);&#xA;&#xA;-- Insert LeaveTypes&#xA;INSERT INTO Timesheet.Description (DescriptionType, SourceID, DescriptionName)&#xA;SELECT 'Leave', L.LeaveType, L.LeaveTypeName&#xA;FROM Timesheet.LeaveType L&#xA;WHERE NOT EXISTS (&#xA;    SELECT 1 FROM Timesheet.Description D&#xA;    WHERE D.DescriptionType = 'Leave'&#xA;      AND D.SourceID = L.LeaveType&#xA;);&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Insert Activity and LeaveType"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{FB672039-683D-4F52-8BB5-F6A25DA4CE40}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Insert Activity and LeaveType"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FAFBFD70-9B28-4D88-B61F-E690AB7A4F99}"
          SQLTask:SqlStatementSource="BEGIN TRY&#xA;    DECLARE @ActivityRows INT = 0;&#xA;    DECLARE @LeaveTypeRows INT = 0;&#xA;    DECLARE @AuditMessage NVARCHAR(1000);&#xA;&#xA;    -- Create temp table for distinct employee-file combinations&#xA;    CREATE TABLE #EmployeeActivityFiles (&#xA;        EmployeeName NVARCHAR(255),&#xA;        FileName NVARCHAR(255),&#xA;        ActivityOrLeaveType NVARCHAR(255),&#xA;        IsLeaveType BIT&#xA;    );&#xA;&#xA;    -- Extract employee names and classify as activity/leave&#xA;    WITH MonthPositions AS (&#xA;        SELECT &#xA;            als.FileName,&#xA;            als.ActivityOrLeaveType,&#xA;            -- Find the earliest month position in the filename&#xA;            NULLIF(&#xA;                (SELECT MIN(pos) &#xA;                 FROM (VALUES&#xA;                     (NULLIF(CHARINDEX('January', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('February', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('March', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('April', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('May', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('June', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('July', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('August', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('September', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('October', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('November', als.FileName), 0)),&#xA;                     (NULLIF(CHARINDEX('December', als.FileName), 0))&#xA;                 ) AS positions(pos)&#xA;                 WHERE pos IS NOT NULL)&#xA;            , 0) AS MonthPosition&#xA;        FROM Timesheet.ActivityLeaveStaging als&#xA;    )&#xA;    INSERT INTO #EmployeeActivityFiles (EmployeeName, FileName, ActivityOrLeaveType, IsLeaveType)&#xA;    SELECT DISTINCT&#xA;        CASE&#xA;            WHEN MonthPosition = 0 THEN 'Unknown'&#xA;            ELSE &#xA;                LTRIM(RTRIM(&#xA;                    REPLACE(&#xA;                        CASE&#xA;                            WHEN SUBSTRING(FileName, MonthPosition-1, 1) IN ('_', ' ') &#xA;                            THEN LEFT(FileName, MonthPosition-2)&#xA;                            ELSE LEFT(FileName, MonthPosition-1)&#xA;                        END,&#xA;                        '_', ' '&#xA;                    )&#xA;                ))&#xA;        END AS EmployeeName,&#xA;        FileName,&#xA;        ActivityOrLeaveType,&#xA;        CASE WHEN LOWER(ActivityOrLeaveType) LIKE '%leave%' THEN 1 ELSE 0 END AS IsLeaveType&#xA;    FROM MonthPositions;&#xA;&#xA;    -- Step 1: Insert Activities (no 'leave' in name)&#xA;    INSERT INTO Timesheet.Activity (ActivityName)&#xA;    SELECT DISTINCT eaf.ActivityOrLeaveType&#xA;    FROM #EmployeeActivityFiles eaf&#xA;    WHERE eaf.IsLeaveType = 0&#xA;      AND NOT EXISTS (&#xA;          SELECT 1 FROM Timesheet.Activity a&#xA;          WHERE a.ActivityName = eaf.ActivityOrLeaveType&#xA;      );&#xA;    &#xA;    SET @ActivityRows = @@ROWCOUNT;&#xA;&#xA;    -- Step 2: Insert LeaveTypes (contains 'leave') if table exists&#xA;    IF OBJECT_ID('Timesheet.LeaveType', 'U') IS NOT NULL&#xA;    BEGIN&#xA;        INSERT INTO Timesheet.LeaveType (LeaveTypeName)&#xA;        SELECT DISTINCT eaf.ActivityOrLeaveType&#xA;        FROM #EmployeeActivityFiles eaf&#xA;        WHERE eaf.IsLeaveType = 1&#xA;          AND NOT EXISTS (&#xA;              SELECT 1 FROM Timesheet.LeaveType lt&#xA;              WHERE lt.LeaveTypeName = eaf.ActivityOrLeaveType&#xA;          );&#xA;        &#xA;        SET @LeaveTypeRows = @@ROWCOUNT;&#xA;    END;&#xA;&#xA;    -- Create consolidated audit message&#xA;    SET @AuditMessage = CONCAT('Inserted ', @ActivityRows, ' new activity(ies)');&#xA;    IF OBJECT_ID('Timesheet.LeaveType', 'U') IS NOT NULL&#xA;    BEGIN&#xA;        SET @AuditMessage = CONCAT(@AuditMessage, ' and ', @LeaveTypeRows, ' new leave type(s)');&#xA;    END;&#xA;&#xA;    -- Step 3: Insert audit log entries (one per unique employee-file-activity combination)&#xA;    IF OBJECT_ID('Timesheet.AuditLog', 'U') IS NOT NULL&#xA;    BEGIN&#xA;        INSERT INTO Timesheet.AuditLog (&#xA;            EmployeeName,&#xA;            FileName,&#xA;            TableName,&#xA;            Action,&#xA;            Message,&#xA;            ProcessedDate&#xA;        )&#xA;        SELECT &#xA;            eaf.EmployeeName,&#xA;            eaf.FileName,&#xA;            CASE WHEN eaf.IsLeaveType = 1 THEN 'LeaveType' ELSE 'Activity' END AS TableName,&#xA;            'Insert' AS Action,&#xA;            CASE &#xA;                WHEN eaf.IsLeaveType = 1 THEN 'New leave type inserted: ' + eaf.ActivityOrLeaveType&#xA;                ELSE 'New activity inserted: ' + eaf.ActivityOrLeaveType&#xA;            END AS Message,&#xA;            GETDATE() AS ProcessedDate&#xA;        FROM #EmployeeActivityFiles eaf&#xA;        WHERE (eaf.IsLeaveType = 0 AND @ActivityRows &gt; 0)&#xA;           OR (eaf.IsLeaveType = 1 AND @LeaveTypeRows &gt; 0);&#xA;    END;&#xA;&#xA;    -- Clean up&#xA;    DROP TABLE #EmployeeActivityFiles;&#xA;&#xA;    -- Return results&#xA;    SELECT &#xA;        @ActivityRows AS ActivitiesInserted,&#xA;        @LeaveTypeRows AS LeaveTypesInserted,&#xA;        @AuditMessage AS AuditMessage;&#xA;&#xA;END TRY&#xA;BEGIN CATCH&#xA;    -- Clean up temp table if it exists&#xA;    IF OBJECT_ID('tempdb..#EmployeeActivityFiles') IS NOT NULL&#xA;        DROP TABLE #EmployeeActivityFiles;&#xA;    &#xA;    -- Log error&#xA;    INSERT INTO Timesheet.ErrorLog (&#xA;        ErrorDate,&#xA;        ErrorTask,&#xA;        ErrorDescription,&#xA;        SourceComponent,&#xA;        UserName&#xA;    )&#xA;    VALUES (&#xA;        GETDATE(),&#xA;        'Activity/LeaveType Import Process',&#xA;        ERROR_MESSAGE(),&#xA;        'ActivityLeaveETL',&#xA;        SYSTEM_USER&#xA;    );&#xA;    &#xA;    -- Re-throw error&#xA;    THROW;&#xA;END CATCH;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Read ActivityLeave Data"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{749F9F80-F9DC-4598-8E4F-B0AC0780C2B3}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Read ActivityLeave Data"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_02bc6161639641819f8532cb18c36ba5"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ExcelFilePath,User::ExcelRange,User::SQLConnectionString,User::TableName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02bc6161639641819f8532cb18c36ba5.Properties.Settings.get_Default():ST_02bc6161639641819f8532cb18c36ba5.Properties.Sett" +
    "ings")]

namespace ST_02bc6161639641819f8532cb18c36ba5.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.IO;
using System.Text;

#endregion

namespace ST_02bc6161639641819f8532cb18c36ba5
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>


        public void Main()
        {
            StringBuilder debugInfo = new StringBuilder();
            try
            {
                string excelFilePath = Dts.Variables["User::ExcelFilePath"].Value.ToString();
                string excelRange = Dts.Variables["User::ExcelRange"].Value.ToString();
                string sqlConnStr = Dts.Variables["User::SQLConnectionString"].Value.ToString();
                string stagingTable = Dts.Variables["User::TableName"].Value.ToString();

                // Extract file name from excelFilePath
                string fileName = string.IsNullOrEmpty(excelFilePath) ? "Unknown" : System.IO.Path.GetFileName(excelFilePath);

                if (!File.Exists(excelFilePath))
                {
                    string errorMsg = $"Excel file not found:\n{excelFilePath}";
                    MessageBox.Show(errorMsg, "File Error");
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                string excelConnStr = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelFilePath};Extended Properties=\"Excel 12.0 Xml;HDR=YES;IMEX=1\";";

                using (var excelConn = new OleDbConnection(excelConnStr))
                using (var sqlConn = new SqlConnection(sqlConnStr))
                {
                    excelConn.Open();
                    sqlConn.Open();

                    var excelCmd = new OleDbCommand($"SELECT * FROM [{excelRange}]", excelConn);

                    var sqlCmd = new SqlCommand(
                        $"INSERT INTO {stagingTable} (ActivityOrLeaveType, FileName) " +
                        $"SELECT @Value, @File WHERE NOT EXISTS (SELECT 1 FROM {stagingTable} s WHERE LOWER(s.ActivityOrLeaveType) = LOWER(@Value))",
                        sqlConn);

                    sqlCmd.Parameters.Add("@Value", SqlDbType.VarChar, 50);
                    sqlCmd.Parameters.Add("@File", SqlDbType.VarChar, 255).Value = fileName; // Use extracted file name

                    using (var reader = excelCmd.ExecuteReader())
                    {
                        int insertedRows = 0;
                        while (reader.Read())
                        {
                            string value = reader.IsDBNull(0) ? "" : reader.GetString(0).Trim();
                            if (!string.IsNullOrWhiteSpace(value))
                            {
                                sqlCmd.Parameters["@Value"].Value = value;
                                int rowsAffected = sqlCmd.ExecuteNonQuery();
                                insertedRows += rowsAffected;
                            }
                            else
                            {
                                debugInfo.AppendLine("Skipped empty or null value");
                            }
                        }
                        debugInfo.AppendLine($"Total rows inserted: {insertedRows}");
                    }
                }

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                string errorMsg = $"ERROR PROCESSING FILE:\n{ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
                MessageBox.Show(errorMsg, "Processing Error");
                debugInfo.AppendLine(errorMsg);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_02bc6161639641819f8532cb18c36ba5.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{34941CD8-E94F-4CC2-A675-5DA135090271}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_02bc6161639641819f8532cb18c36ba5</RootNamespace>
    <AssemblyName>ST_02bc6161639641819f8532cb18c36ba5</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_02bc6161639641819f8532cb18c36ba5</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_02bc6161639641819f8532cb18c36ba5</msb:DisplayName>
    <msb:ProjectId>{60BF5184-6AED-4ED8-80CC-A44F41F89345}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_02bc6161639641819f8532cb18c36ba5.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_02bc6161639641819f8532cb18c36ba5")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_02bc6161639641819f8532cb18c36ba5")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02bc6161639641819f8532cb18c36ba5.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02bc6161639641819f8532cb18c36ba5.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02bc6161639641819f8532cb18c36ba5.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_02bc6161639641819f8532cb18c36ba5.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_02bc6161639641819f8532cb18c36ba5.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_02bc6161639641819f8532cb18c36ba5.dll">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
vAQSANYBKgQSADcCKgQSALYBpwQGAOsBugUKABgE7wMWAHAGNQEWAOsANQEGAMQDegQGAMsDNAAG
ACQBNAAaADAHgwYaAO0GgwYOAP0EIgUOAOMECQcOAI0FCQcOAGABZQAOAIEFIgUOAEQFIgUOAJgA
IgUGAAEAegQGAPQAegQGAGUBegQGAAABegQGAD8H0QQAAAAAKwAAAAAAAQABAAEAEACcBAcAOQAB
AAEAAAAQAOEFPQZhAAEAAwAAARAAegY9BnUAAwAHAAMBAAC3BgAAWQAEAAoAEQCLBP0AEQCKAQEB
EQDPAAUBBgZdAAkBVoCnBgwBVoBqAQwBUCAAAAAAhgCiBAYAAQBMIwAAAACGGJoFBgABAFQjAAAA
AIMYmgUGAAEAXCMAAAAAkwhtBRABAQCIIwAAAACTCHIBFQEBAI8jAAAAAJMIfgEaAQEAlyMAAAAA
lgjhBiABAgCeIwAAAACGGJoFBgACAKYjAAAAAJEYoAUlAQIAAAABAJgDCQCaBQEAEQCaBQYAGQCa
BQoAKQCaBRAAMQCaBRAAOQCaBRAAQQCaBRAASQCaBRAAUQCaBRAAWQCaBRAAYQCaBRAAaQCaBQYA
uQCaBQYA4QCaBRUA8QCaBQYAeQCaBQYAcQCvBjUA+QBsBjoAAQFxBEAACQGEA0cAwQC4A0sAEQFY
B08AGQEpAVQAIQHFBk8AEQHMBlkAKQErB18A+QD6BgEAEQHMBmcAgQCaBRAAiQCaBRAAOQGXBAYA
kQCaBW4AEQHMBnUAmQCaBXsAmQCYBoIAQQGRAIgAWQGOA5MAkQBRBZgAYQFoBJ0AYQHBA6IAEQGB
BEsAEQGtAE8AQQFxBKcAaQFIB64AeQBVAbIAYQGMALgAEQHTBrwAeQHOAQYAqQDfAEsAqQDAAEsA
EQHMBsIAcQCaBQYAwQCaBQYAgQESAcoAgQE7B9MAyQCaBdkA6QCaBQYACAAUAPMACAAYAPgAKQBz
AGABLgALADgBLgATAEEBLgAbAGABLgAjAGkBLgArAJIBLgAzAJIBLgA7AJgBLgBDAGkBLgBLAKAB
LgBTAJIBLgBbALkBQwBjAPgASQBzAGABYQB7APgAYwBrAPgAGwADAAEABAADAAAAcQUpAQAAkgEu
AQAA5QYzAQIABAADAAIABQAFAAEABgAFAAIABwAHAASAAAABAAAAUSQYdwAAAAAAAAcAAAAEAAAA
AAAAAAAAAADhAIMAAAAAABAAAAAAAAAAAAAAAOoA0AMAAAAABAAAAAAAAAAAAAAA4QBlAAAAAAAE
AAAAAAAAAAAAAADhAHoEAAAAABAAAAAAAAAAAAAAAOoAPgAAAAAABAAAAAAAAAAAAAAA4QCDBgAA
AAAAAAAAAQAAAOsFAAAFAAIAAAAAAABJbnQzMgBTVF8wMmJjNjE2MTYzOTY0MTgxOWY4NTMyY2Ix
OGMzNmJhNQA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRT
AHZhbHVlX18AU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAUmVhZABBZGQA
T2xlRGJDb21tYW5kAFNxbENvbW1hbmQASXNOdWxsT3JXaGl0ZVNwYWNlAGdldF9TdGFja1RyYWNl
AGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1l
VHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAEdldEZpbGVOYW1lAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAQXBwZW5kTGluZQBTcWxEYlR5cGUARmFpbHVyZQBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxC
YXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAGdldF9WYWx1ZQBzZXRfVmFsdWUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lv
bmluZwBUb1N0cmluZwBHZXRTdHJpbmcAUGF0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRh
c2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RN
b2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMDJiYzYxNjE2Mzk2NDE4MTlmODUzMmNiMThj
MzZiYTUuZGxsAElzREJOdWxsAGdldF9JdGVtAFN5c3RlbQBUcmltAEVudW0AcmVzb3VyY2VNYW4A
T3BlbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9u
AFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24AT2xlRGJDb25uZWN0aW9u
AFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0dXJlSW5mbwBP
bGVEYkRhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBTdHJpbmdCdWlsZGVyAGdldF9SZXNvdXJjZU1h
bmFnZXIARGJQYXJhbWV0ZXIAU3FsUGFyYW1ldGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25v
c3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNU
XzAyYmM2MTYxNjM5NjQxODE5Zjg1MzJjYjE4YzM2YmE1LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF8wMmJjNjE2MTYzOTY0MTgxOWY4NTMyY2IxOGMzNmJh
NS5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAU3lzdGVtLldpbmRvd3MuRm9ybXMA
Z2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMARXhpc3RzAENvbmNh
dABGb3JtYXQAT2JqZWN0AGdldF9EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABT
eXN0ZW0uRGF0YS5TcWxDbGllbnQAU3lzdGVtLlRleHQAU2hvdwBNZXNzYWdlQm94AGdldF9Bc3Nl
bWJseQBFeGVjdXRlTm9uUXVlcnkASXNOdWxsT3JFbXB0eQAAAAAnVQBzAGUAcgA6ADoARQB4AGMA
ZQBsAEYAaQBsAGUAUABhAHQAaAAAIVUAcwBlAHIAOgA6AEUAeABjAGUAbABSAGEAbgBnAGUAADNV
AHMAZQByADoAOgBTAFEATABDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAAAfVQBzAGUA
cgA6ADoAVABhAGIAbABlAE4AYQBtAGUAAA9VAG4AawBuAG8AdwBuAAAtRQB4AGMAZQBsACAAZgBp
AGwAZQAgAG4AbwB0ACAAZgBvAHUAbgBkADoACgAAFUYAaQBsAGUAIABFAHIAcgBvAHIAAF1QAHIA
bwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4ATwBMAEUARABCAC4AMQAy
AC4AMAA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AABrOwBFAHgAdABlAG4AZABlAGQAIABQAHIA
bwBwAGUAcgB0AGkAZQBzAD0AIgBFAHgAYwBlAGwAIAAxADIALgAwACAAWABtAGwAOwBIAEQAUgA9
AFkARQBTADsASQBNAEUAWAA9ADEAIgA7AAAfUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAFsA
AANdAAAZSQBOAFMARQBSAFQAIABJAE4AVABPACAAAICtIAAoAEEAYwB0AGkAdgBpAHQAeQBPAHIA
TABlAGEAdgBlAFQAeQBwAGUALAAgAEYAaQBsAGUATgBhAG0AZQApACAAUwBFAEwARQBDAFQAIABA
AFYAYQBsAHUAZQAsACAAQABGAGkAbABlACAAVwBIAEUAUgBFACAATgBPAFQAIABFAFgASQBTAFQA
UwAgACgAUwBFAEwARQBDAFQAIAAxACAARgBSAE8ATQAgAABtIABzACAAVwBIAEUAUgBFACAATABP
AFcARQBSACgAcwAuAEEAYwB0AGkAdgBpAHQAeQBPAHIATABlAGEAdgBlAFQAeQBwAGUAKQAgAD0A
IABMAE8AVwBFAFIAKABAAFYAYQBsAHUAZQApACkAAA1AAFYAYQBsAHUAZQAAC0AARgBpAGwAZQAA
AQA3UwBrAGkAcABwAGUAZAAgAGUAbQBwAHQAeQAgAG8AcgAgAG4AdQBsAGwAIAB2AGEAbAB1AGUA
ADFUAG8AdABhAGwAIAByAG8AdwBzACAAaQBuAHMAZQByAHQAZQBkADoAIAB7ADAAfQAAL0UAUgBS
AE8AUgAgAFAAUgBPAEMARQBTAFMASQBOAEcAIABGAEkATABFADoACgAAHwoACgBTAHQAYQBjAGsA
IABUAHIAYQBjAGUAOgAKAAAhUAByAG8AYwBlAHMAcwBpAG4AZwAgAEUAcgByAG8AcgAAcVMAVABf
ADAAMgBiAGMANgAxADYAMQA2ADMAOQA2ADQAMQA4ADEAOQBmADgANQAzADIAYwBiADEAOABjADMA
NgBiAGEANQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAR09B8
BioQQ7bcPe753UgiAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFtGQcQEj0ODg4ODhJBEkUSSRJN
ElEIDggSVQ4EIAASfQUgABKAgQYgARKAhRwDIAAcAyAADgQAAQIOBAABDg4FAAIODg4HAAIRgJkO
DgYAAw4ODg4GIAIBDhJBBQABDh0OBiACAQ4SRQUgABKAoQogAxKApQ4RgKkIBCABARwEIAASUQQg
AQIIBCABDggGIAESgKUOAyAACAUgARI9DgMgAAIFAAIODhwHAAQODg4ODggAARKAwRGAxQUgABKA
yQcgAgEOEoDJCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEmUDBhJpAwYSEAIGCAMGERQE
AAASZQQAABJpBQABARJpBAAAEhADAAABBAgAEmUECAASaQQIABIQCAEACAAAAAAAHgEAAQBUAhZX
cmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF8wMmJjNjE2MTYzOTY0MTgxOWY4
NTMyY2IxOGMzNmJhNQAABQEAAAAABwEAAkhQAAAYAQATQ29weXJpZ2h0IEAgSFAgMjAyNQAASQEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVU
IEZyYW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAABg4AAAAAAAAAAAAADI4AAAAIAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAkOAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAiBAAAAAAAAAAAAAAiBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAGHdRJAAAAQAYd1EkPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEggMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAXgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8AMAAyAGIAYwA2ADEANgAxADYAMwA5ADYANAAxADgAMQA5AGYAOAA1ADMAMgBjAGIA
MQA4AGMAMwA2AGIAYQA1AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADkAMgA5ADcALgAzADAANAA4ADgAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAA
UwBUAF8AMAAyAGIAYwA2ADEANgAxADYAMwA5ADYANAAxADgAMQA5AGYAOAA1ADMAMgBjAGIAMQA4
AGMAMwA2AGIAYQA1AC4AZABsAGwAAABMABQAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQA
AABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAFAAIAAyADAAMgA1AAAAKgABAAEATABlAGcAYQBs
AFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwA
ZQBuAGEAbQBlAAAAUwBUAF8AMAAyAGIAYwA2ADEANgAxADYAMwA5ADYANAAxADgAMQA5AGYAOAA1
ADMAMgBjAGIAMQA4AGMAMwA2AGIAYQA1AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4A
YQBtAGUAAAAAAFMAVABfADAAMgBiAGMANgAxADYAMQA2ADMAOQA2ADQAMQA4ADEAOQBmADgANQAz
ADIAYwBiADEAOABjADMANgBiAGEANQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8A
bgAAADEALgAwAC4AOQAyADkANwAuADMAMAA0ADgAOAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5
ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOQAyADkANwAuADMAMAA0ADgAOAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAARDgAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{1EFF8875-CAD7-427E-AF59-2706BF87F3DD}"
      DTS:From="Package\Read ActivityLeave Data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Insert Activity and LeaveType" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{02FC0A1F-FEBF-47ED-9F18-DA24DB82328D}"
      DTS:From="Package\Insert Activity and LeaveType"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Combine Data From ActivityAndLeave" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{4E2C08E5-8470-4FA3-A7B9-09FE0AA15910}"
      DTS:From="Package\Combine Data From ActivityAndLeave"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Clean Staging" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{94B9FA23-39A8-41B8-90A2-15318C0EBEAE}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{238D1E08-3A7B-42F7-95C9-C0F7236CA8FE}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Handle Errors"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{C1175C17-1947-436B-9270-8D26242467FD}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Handle Errors"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{FAFBFD70-9B28-4D88-B61F-E690AB7A4F99}"
              SQLTask:SqlStatementSource="INSERT INTO Timesheet.ErrorLog (ErrorTask, ErrorDescription, SourceComponent, UserName)&#xA;VALUES (?, ?, ?, ?);" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="NewParameterName"
                SQLTask:DtsVariableName="System::TaskName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="NewParameterName"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="1000" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="NewParameterName"
                SQLTask:DtsVariableName="System::SourceName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="100" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="NewParameterName"
                SQLTask:DtsVariableName="System::UserName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="100" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="144,41.6"
          Id="Package\Clean Staging"
          TopLeft="365.833313345082,327.59999772191" />
        <NodeLayout
          Size="254.4,41.6"
          Id="Package\Combine Data From ActivityAndLeave"
          TopLeft="309.999983062348,255.466665051513" />
        <NodeLayout
          Size="214.4,41.6"
          Id="Package\Insert Activity and LeaveType"
          TopLeft="330.833315257398,166.399998842875" />
        <NodeLayout
          Size="192,41.6"
          Id="Package\Read ActivityLeave Data"
          TopLeft="347.499981013438,51.9999996383985" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="440.766648135418,93.5999996383985">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,72.7999992044765"
              Start="0,0"
              End="0,65.2999992044765">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65.2999992044765" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="437.616649159873,207.999998842875">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,47.4666662086382"
              Start="0,0"
              End="0,39.9666662086382">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.9666662086382" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="437.516648203715,297.066665051513">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.5333326703969"
              Start="0,0"
              End="0,23.0333326703969">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.0333326703969" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="142.4,41.6"
          Id="Package.EventHandlers[OnError]\Handle Errors"
          TopLeft="557.999991685152,127.999998092651" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>