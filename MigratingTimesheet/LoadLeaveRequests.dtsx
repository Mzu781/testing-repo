<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/8/2025 8:55:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-62JJ49T4"
  DTS:CreatorName="LAPTOP-62JJ49T4\MuzuvukileNqwiliso"
  DTS:DTSID="{40190988-D769-4A7F-866B-FBEE741BD86C}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="7177"
  DTS:ObjectName="LoadLeaveRequests"
  DTS:PackageType="5"
  DTS:VersionBuild="116"
  DTS:VersionGUID="{7891C70A-1607-41F4-BE84-BA81FC3B3D85}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{93351117-FCE8-431F-8483-B2D00704836C}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ExcelConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="0"
          DTS:ConnectRetryInterval="0"
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.16.0;Data Source=C:\Timesheets\Muzuvukile Nqwiliso\Muzuvukile Nqwiliso May Final.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{D124B827-C7AD-4B7D-829E-75B0231DB467}"
      DTS:ObjectName="LocalHost.TimesheetDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=TimesheetDB;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Application Name=SSIS-ImportLeaveRequests-{D124B827-C7AD-4B7D-829E-75B0231DB467}LocalHost.TimesheetDB;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{140C0E30-F57F-4823-B094-1A6555E5F0F0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmployeeFolderPath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{17A6F897-E060-4B49-AE32-D3DFECCFCEB7}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmployeeName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0C4AD1C5-B869-4CB8-A330-764279869E19}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">Provider=Microsoft.ACE.OLEDB.16.0;Data Source=C:\Timesheets\Muzuvukile Nqwiliso\Muzuvukile Nqwiliso May Final.xlsx;Extended Properties="EXCEL 12.0 XML;HDR=YES";</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CD7E8054-7E6A-4928-B4CC-9C977DD275D8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFilePath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{97038319-B2EB-4358-BAAD-F37F13CDE815}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelQuery">
      <DTS:VariableValue
        DTS:DataType="8">Leave$A10:F13</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1B8B4F7E-9197-48C3-99DB-FCFA4AB5470D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FolderList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B494D337-8D19-40BC-BA06-4D13BE6FD194}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Timesheets</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AB6510DB-43F1-41B2-A891-52BA056711DE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ValidLeaveSheetName">
      <DTS:VariableValue
        DTS:DataType="8">Leave$A10:F13</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Clean Leave Requests"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E15A7807-74DC-46C5-8073-B5DE147AA3AE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Clean Leave Requests"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{D124B827-C7AD-4B7D-829E-75B0231DB467}"
          SQLTask:SqlStatementSource="UPDATE Timesheet.StagingLeaveRequest&#xA;SET &#xA;    LeaveTypeName = NULLIF(TRIM(LeaveTypeName), ''),&#xA;    StartDate = NULLIF(TRIM(StartDate), ''),&#xA;    EndDate = NULLIF(TRIM(EndDate), ''),&#xA;    ApprovalObtained = NULLIF(TRIM(UPPER(ApprovalObtained)), ''),&#xA;    SickNote = NULLIF(TRIM(UPPER(SickNote)), ''),&#xA;    EmployeeName = NULLIF(TRIM(EmployeeName), '')&#xA;WHERE ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;-- Step 2: Standardize boolean fields&#xA;UPDATE Timesheet.StagingLeaveRequest&#xA;SET &#xA;    ApprovalObtained = CASE &#xA;        WHEN ApprovalObtained IN ('YES', 'Y', 'TRUE', '1') THEN 1&#xA;        WHEN ApprovalObtained IN ('NO', 'N', 'FALSE', '0') THEN 0&#xA;        ELSE NULL&#xA;    END,&#xA;    SickNote = CASE &#xA;        WHEN SickNote IN ('YES', 'Y', 'TRUE', '1') THEN 1&#xA;        WHEN SickNote IN ('NO', 'N', 'FALSE', '0') THEN 0&#xA;        ELSE NULL&#xA;    END&#xA;WHERE ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;-- Step 3: Validate data (excluding NumberOfDays validation)&#xA;UPDATE Timesheet.StagingLeaveRequest&#xA;SET IsValid = CASE &#xA;    WHEN LeaveTypeName IS NOT NULL&#xA;      AND TRY_CONVERT(DATE, StartDate) IS NOT NULL&#xA;      AND TRY_CONVERT(DATE, EndDate) IS NOT NULL&#xA;      AND TRY_CONVERT(DATE, EndDate) &gt;= TRY_CONVERT(DATE, StartDate)&#xA;      AND ApprovalObtained IN (0, 1)&#xA;      AND EmployeeName IS NOT NULL&#xA;    THEN 1&#xA;    ELSE 0&#xA;    END&#xA;WHERE ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE());&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Leave Requests"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E52FE24C-56A9-48ED-B1F1-FEA7080A6DA5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Leave Requests"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{D124B827-C7AD-4B7D-829E-75B0231DB467}"
          SQLTask:SqlStatementSource="BEGIN TRY&#xA;    -- First, perform the MERGE&#xA;    MERGE INTO Timesheet.LeaveRequest AS target&#xA;    USING (&#xA;        SELECT &#xA;            e.EmployeeID,&#xA;            lt.LeaveType,&#xA;            MIN(TRY_CONVERT(DATE, slr.StartDate)) AS StartDate,&#xA;            MAX(TRY_CONVERT(DATE, slr.EndDate)) AS EndDate,&#xA;            CASE &#xA;                WHEN MAX(slr.ApprovalObtained) = 1 THEN 'Approved'&#xA;                ELSE 'Pending'&#xA;            END AS Status,&#xA;            MAX(slr.ApprovalObtained) AS ApprovalObtained,&#xA;            MAX(slr.SickNote) AS SickNote,&#xA;            e.EmployeeName&#xA;        FROM Timesheet.StagingLeaveRequest slr&#xA;        JOIN Timesheet.Employee e ON slr.EmployeeName = e.EmployeeName&#xA;        JOIN Timesheet.LeaveType lt ON slr.LeaveTypeName = lt.LeaveTypeName&#xA;        WHERE slr.IsValid = 1&#xA;          AND slr.ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE())&#xA;        GROUP BY e.EmployeeID, lt.LeaveType, e.EmployeeName&#xA;    ) AS source&#xA;    ON target.EmployeeID = source.EmployeeID&#xA;       AND target.LeaveTypeID = source.LeaveType&#xA;       AND target.StartDate = source.StartDate&#xA;       AND target.EndDate = source.EndDate&#xA;    WHEN MATCHED THEN&#xA;        UPDATE SET &#xA;            target.Status = source.Status,&#xA;            target.ApprovalObtained = source.ApprovalObtained,&#xA;            target.SickNoteSubmitted = source.SickNote;&#xA;&#xA;    -- Log the update action&#xA;    INSERT INTO Timesheet.AuditLog (&#xA;        EmployeeName,&#xA;        FileName,&#xA;        TableName,&#xA;        Action,&#xA;        Message,&#xA;        ProcessedDate&#xA;    )&#xA;    SELECT &#xA;        COALESCE(slr.EmployeeName, 'Unknown') AS EmployeeName,&#xA;        COALESCE(slr.FileName, 'Unknown') AS FileName,&#xA;        'LeaveRequest' AS TableName,&#xA;        'Update' AS Action,&#xA;        'Leave request updated successfully' AS Message,&#xA;        GETDATE()&#xA;    FROM Timesheet.StagingLeaveRequest slr&#xA;    JOIN Timesheet.Employee e ON slr.EmployeeName = e.EmployeeName&#xA;    WHERE slr.IsValid = 1&#xA;      AND slr.ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE())&#xA;    GROUP BY slr.EmployeeName, slr.FileName;&#xA;&#xA;    -- Now handle inserts separately (only for new records)&#xA;    INSERT INTO Timesheet.LeaveRequest (&#xA;        EmployeeID,&#xA;        LeaveTypeID,&#xA;        StartDate,&#xA;        EndDate,&#xA;        Status,&#xA;        ApprovalObtained,&#xA;        SickNoteSubmitted&#xA;    )&#xA;    SELECT &#xA;        e.EmployeeID,&#xA;        lt.LeaveType,&#xA;        MIN(TRY_CONVERT(DATE, slr.StartDate)),&#xA;        MAX(TRY_CONVERT(DATE, slr.EndDate)),&#xA;        CASE &#xA;            WHEN MAX(slr.ApprovalObtained) = 1 THEN 'Approved'&#xA;            ELSE 'Pending'&#xA;        END,&#xA;        MAX(slr.ApprovalObtained),&#xA;        MAX(slr.SickNote)&#xA;    FROM Timesheet.StagingLeaveRequest slr&#xA;    JOIN Timesheet.Employee e ON slr.EmployeeName = e.EmployeeName&#xA;    JOIN Timesheet.LeaveType lt ON slr.LeaveTypeName = lt.LeaveTypeName&#xA;    WHERE slr.IsValid = 1&#xA;      AND slr.ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE())&#xA;      AND NOT EXISTS (&#xA;          SELECT 1&#xA;          FROM Timesheet.LeaveRequest lr&#xA;          WHERE lr.EmployeeID = e.EmployeeID&#xA;            AND lr.LeaveTypeID = lt.LeaveType&#xA;            AND lr.StartDate = TRY_CONVERT(DATE, slr.StartDate)&#xA;            AND lr.EndDate = TRY_CONVERT(DATE, slr.EndDate)&#xA;      )&#xA;    GROUP BY e.EmployeeID, lt.LeaveType;&#xA;&#xA;    -- Log the insert action&#xA;    INSERT INTO Timesheet.AuditLog (&#xA;        EmployeeName,&#xA;        FileName,&#xA;        TableName,&#xA;        Action,&#xA;        Message,&#xA;        ProcessedDate&#xA;    )&#xA;    SELECT &#xA;        COALESCE(slr.EmployeeName, 'Unknown') AS EmployeeName,&#xA;        COALESCE(slr.FileName, 'Unknown') AS FileName,&#xA;        'LeaveRequest' AS TableName,&#xA;        'Insert' AS Action,&#xA;        'Leave request inserted successfully' AS Message,&#xA;        GETDATE()&#xA;    FROM Timesheet.StagingLeaveRequest slr&#xA;    JOIN Timesheet.Employee e ON slr.EmployeeName = e.EmployeeName&#xA;    WHERE slr.IsValid = 1&#xA;      AND slr.ProcessedDate &gt;= DATEADD(DAY, -1, GETDATE())&#xA;    GROUP BY slr.EmployeeName, slr.FileName;&#xA;&#xA;END TRY&#xA;BEGIN CATCH&#xA;    -- Log the error&#xA;    INSERT INTO Timesheet.ErrorLog (&#xA;        ErrorDate,&#xA;        ErrorTask,&#xA;        ErrorDescription,&#xA;        SourceComponent,&#xA;        UserName&#xA;    )&#xA;    VALUES (&#xA;        GETDATE(),&#xA;        'MERGE LeaveRequest with Audit Logging',&#xA;        ERROR_MESSAGE(),&#xA;        'LeaveRequest_Processing',&#xA;        SYSTEM_USER&#xA;    );&#xA;END CATCH;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Loop Employee Folders Script"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{3BD2CBA2-77F7-4F5C-8D46-F7B7488794B1}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop Employee Folders Script"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0"
        DTS:LoggingMode="2" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_8cf87d2884ab416c91bbddac8833c527"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::FolderPath"
          ReadWriteVariables="User::FolderList">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_5574ccf38d344d97a48f8e333ae51ec7
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                string folderPath = Dts.Variables["User::FolderPath"].Value.ToString().Trim();
                if (Directory.Exists(folderPath))
                {
                    string[] folders = Directory.GetDirectories(folderPath);
                    DataTable folderTable = new DataTable();
                    folderTable.Columns.Add("FolderPath", typeof(string));
                    foreach (string folder in folders)
                    {
                        folderTable.Rows.Add(folder);
                    }
                    Dts.Variables["User::FolderList"].Value = folderTable;
                    string folderList = folders.Length > 0 ? string.Join("\n", folders) : "No folders found";
                    //MessageBox.Show($"Folder Path: {folderPath}\nFound {folders.Length} folders:\n{folderList}", "Debug - Employee Folders");
                    //Dts.TaskResult = (int)ScriptResults.Success;
                }
                else
                {
                    MessageBox.Show($"Directory not found: {folderPath}", "Error - Invalid Path");
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error - Exception");
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_5574ccf38d344d97a48f8e333ae51ec7.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_729127a8fdea4b7f86960ec06e1ffb65</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_729127a8fdea4b7f86960ec06e1ffb65</msb:DisplayName>
    <msb:ProjectId>{740B3531-7CD6-4372-B1F4-CBC8FAD15902}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_8cf87d2884ab416c91bbddac8833c527.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Settings.get_Default():ST_5574ccf38d344d97a48f8e333ae51ec7.Properties.Sett" +
    "ings")]

namespace ST_5574ccf38d344d97a48f8e333ae51ec7.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_5574ccf38d344d97a48f8e333ae51ec7")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_5574ccf38d344d97a48f8e333ae51ec7")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ST_8cf87d2884ab416c91bbddac8833c527.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{28077679-0E06-439E-BDFE-F41A9609864C}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_5574ccf38d344d97a48f8e333ae51ec7</RootNamespace><AssemblyName>ST_8cf87d2884ab416c91bbddac8833c527</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_729127a8fdea4b7f86960ec06e1ffb65.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAK6gQWgAAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAAYjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABAxAABPAAAAAEAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABE
MQAAAAAAAEgAAAACAAUA3CEAAHwOAAABAAAAAAAAAFgwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBQAHAQAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAApvFQAACgoGKBYAAAo5hgAAAAYoFwAACgtzGAAACgwIbxkAAApyIwAAcNAdAAABKBoA
AApvGwAACiYHDRYTBCsjCREEmhMFCG8cAAAKF40TAAABJRYRBaJvHQAACiYRBBdYEwQRBAmOaTLW
AigQAAAKbxEAAApyOQAAcG8SAAAKCG8eAAAKB44sMHJbAABwBygfAAAKJisicl8AAHAGKCAAAApy
iwAAcCghAAAKJgIoEAAAChdvIgAACt4sEwZytQAAcBEGbyMAAAooIAAACnLFAABwKCEAAAomAigQ
AAAKF28iAAAK3gAqAAEQAAAAAAAA2toALBAAAAEeAigkAAAKKh4CKCUAAAoqrn4BAAAELR5y6QAA
cNADAAACKBoAAApvJgAACnMnAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIo
KAAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAHAE
AAAjfgAA3AQAAHgGAAAjU3RyaW5ncwAAAABUCwAAXAEAACNVUwCwDAAAEAAAACNHVUlEAAAAwAwA
ALwBAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAnAAAABQAAAAYAAAAJAAAA
AQAAACgAAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABgAAAAEAAAABAAAAAADTAwEAAAAA
AAYAeQLpBAYACAPpBAYAxQHWBA8AXQUAAAYA8gFmBAYAXAJmBAYAPQJmBAYA7wJmBAYAmQJmBAYA
sgJmBAYACQJmBAYAJAJAAwoAzQKCAwoARAGCAw4AuACDAAYAnwQEBAYAEAQEBAYAqAHWBAYAFwYE
BAYAuQQJBQYAqQRRBBIAeAG9AxIA2QG9AxIAYAE8BAYAjQHpBAoAqwOCAxYArgXvABYAwgDvAAYA
XAMEBAYAawZSAA4AeASDAAYADwEEBAYAywAEBA4AMQSDAA4AjQSDAA4ARgaDABoAUwbBBRoAKgbB
BQYAYgZmBAAAAABJAAAAAAABAAEAAQAQACEEJQA5AAEAAQAAABAAEAV7BU0AAQADAAABEAC4BXsF
YQADAAcAAwEAAPIFAABFAAQACgARABUEtgARADQBugARAJwAvgAGBnsAwgBWgOIFxQBWgBQBxQBQ
IAAAAACGACcEBgABAHQhAAAAAIYYyQQGAAEAfCEAAAAAgxjJBAYAAQCEIQAAAACTCLUEyQABALAh
AAAAAJMIHAHOAAEAtyEAAAAAkwgoAdMAAQC/IQAAAACWCB4G2QACAMYhAAAAAIYYyQQGAAIAziEA
AAAAkRjPBN4AAgAAAAEAOgMJAMkEAQARAMkEBgAZAMkECgApAMkEEAAxAMkEEAA5AMkEEABBAMkE
EABJAMkEEABRAMkEEABZAMkEEABhAMkEEABpAMkEBgCRAMkEBgC5AMkEFQDJAMkEBgBxAOoFKQDR
AKoFLgDZAPsDMwDhACYDOQCZAFoDPQDpAAsEPQDxAAAGQQDxAGwFRgB5AMkEBgB5ANYFTAABAd0A
UQD5AJgAWgB5AAcGZAAZAZgAagDhADADcgDpACwEdwDpABAGfgApAU4GhADRADcGAQCBAKwAPQBx
AMkEBgCZAMkEBgABAV4GjAChAMkEkgDBAMkEBgAIABQArAAIABgAsQApAHMAGQEuAAsA8QAuABMA
+gAuABsAGQEuACMAIgEuACsASwEuADMASwEuADsAUQEuAEMAIgEuAEsAWQEuAFMASwEuAFsAcgFD
AGMAsQBJAHMAGQFhAHsAsQBjAGsAsQAbAAMAAQAEAAMAAAC5BOIAAAA8AecAAAAiBuwAAgAEAAMA
AgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAABHJGdvAAAAAAAAAQAAAAQAAAAAAAAAAAAAAJoAjwAA
AAAAEAAAAAAAAAAAAAAAowBjAwAAAAAEAAAAAAAAAAAAAACaAIMAAAAAAAQAAAAAAAAAAAAAAJoA
BAQAAAAAEAAAAAAAAAAAAAAAowBcAAAAAAAEAAAAAAAAAAAAAACaAMEFAAAAAAAAAAABAAAAGgUA
AAUAAgAAAAAAAFNUXzcyOTEyN2E4ZmRlYTRiN2Y4Njk2MGVjMDZlMWZmYjY1AFNUXzU1NzRjY2Yz
OGQzNDRkOTdhNDhmOGUzMzNhZTUxZWM3ADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBBZGQAZGVmYXVs
dEluc3RhbmNlAGdldF9NZXNzYWdlAERhdGFUYWJsZQBWYXJpYWJsZQBSdW50aW1lVHlwZUhhbmRs
ZQBHZXRUeXBlRnJvbUhhbmRsZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFR5cGUA
RmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRy
aWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1i
bHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdv
cmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3Jp
cHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVBy
b2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tF
bnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0
aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAVG9TdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lz
dGVtLkNvbXBvbmVudE1vZGVsAFNUXzcyOTEyN2E4ZmRlYTRiN2Y4Njk2MGVjMDZlMWZmYjY1LmRs
bABnZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4ASm9pbgBE
YXRhQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3Rl
bS5SZWZsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAEV4Y2Vw
dGlvbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5jdG9yAC5jY3RvcgBTeXN0ZW0u
RGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3Vy
Y2VzAFNUXzU1NzRjY2YzOGQzNDRkOTdhNDhmOGUzMzNhZTUxZWM3LlByb3BlcnRpZXMuUmVzb3Vy
Y2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBHZXREaXJlY3RvcmllcwBTVF81NTc0Y2NmMzhk
MzQ0ZDk3YTQ4ZjhlMzMzYWU1MWVjNy5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MA
U3lzdGVtLldpbmRvd3MuRm9ybXMAZ2V0X0NvbHVtbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJl
c3VsdHMARXhpc3RzAGdldF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQARGlhbG9nUmVz
dWx0AHNldF9UYXNrUmVzdWx0AERhdGFSb3cAU2hvdwBNZXNzYWdlQm94AGdldF9Bc3NlbWJseQBE
aXJlY3RvcnkAAAAAACFVAHMAZQByADoAOgBGAG8AbABkAGUAcgBQAGEAdABoAAAVRgBvAGwAZABl
AHIAUABhAHQAaAAAIVUAcwBlAHIAOgA6AEYAbwBsAGQAZQByAEwAaQBzAHQAAAMKAAArRABpAHIA
ZQBjAHQAbwByAHkAIABuAG8AdAAgAGYAbwB1AG4AZAA6ACAAAClFAHIAcgBvAHIAIAAtACAASQBu
AHYAYQBsAGkAZAAgAFAAYQB0AGgAAQ9FAHIAcgBvAHIAOgAgAAAjRQByAHIAbwByACAALQAgAEUA
eABjAGUAcAB0AGkAbwBuAAFxUwBUAF8ANQA1ADcANABjAGMAZgAzADgAZAAzADQANABkADkANwBh
ADQAOABmADgAZQAzADMAMwBhAGUANQAxAGUAYwA3AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIA
ZQBzAG8AdQByAGMAZQBzAAAAhKL0W1aVl0yk9CoekUrNvgAEIAEBCAMgAAEFIAEBEREEIAEBDgUg
AQERWQ0HBw4dDhI9HQ4IDhJBBCAAEmkEIAASbQUgARJxHAMgABwDIAAOBAABAg4FAAEdDg4EIAAS
fQgAARKAgRGAhQkgAhKAiQ4SgIEFIAASgI0HIAESgJEdHAQgAQEcBgACDg4dDgUAAg4ODgcAAhGA
mQ4OBSAAEoCdByACAQ4SgJ0It3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSUQMGElUDBhIQ
AgYIAwYRFAQAABJRBAAAElUFAAEBElUEAAASEAMAAAEECAASUQQIABJVBAgAEhAIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzU1NzRjY2YzOGQz
NDRkOTdhNDhmOGUzMzNhZTUxZWM3AAAFAQAAAAAHAQACSFAAABgBABNDb3B5cmlnaHQgQCBIUCAy
MDI1AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuN7QAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5S
ZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGlt
ZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAA4MQAAAAAAAAAAAABSMQAAACAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAARDEAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAA
AAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAIgQAAAAAAAAAAAAAIgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAGdvRyQAAAEAZ29HJD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBIIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAF4DAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAmAAMAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAEgAUAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBv
AG4AAAAAAFMAVABfADUANQA3ADQAYwBjAGYAMwA4AGQAMwA0ADQAZAA5ADcAYQA0ADgAZgA4AGUA
MwAzADMAYQBlADUAMQBlAGMANwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAu
ADAALgA5ADIAOAA3AC4AMgA4ADUAMQA5AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0A
ZQAAAFMAVABfADcAMgA5ADEAMgA3AGEAOABmAGQAZQBhADQAYgA3AGYAOAA2ADkANgAwAGUAYwAw
ADYAZQAxAGYAZgBiADYANQAuAGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBn
AGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYA
aQBsAGUAbgBhAG0AZQAAAFMAVABfADcAMgA5ADEAMgA3AGEAOABmAGQAZQBhADQAYgA3AGYAOAA2
ADkANgAwAGUAYwAwADYAZQAxAGYAZgBiADYANQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMA
dABOAGEAbQBlAAAAAABTAFQAXwA1ADUANwA0AGMAYwBmADMAOABkADMANAA0AGQAOQA3AGEANAA4
AGYAOABlADMAMwAzAGEAZQA1ADEAZQBjADcAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADkAMgA4ADcALgAyADgANQAxADkAAAAAAEYADwABAEEAcwBzAGUAbQBi
AGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADkAMgA4ADcALgAyADgANQAxADkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAGQxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Loop Through Employee Folders ADO"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{1568E7AA-8738-42CB-AB4A-0D61B95520AA}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop Through Employee Folders ADO">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{86D52984-FA56-4BA8-8090-F6E2FCD7D701}"
        DTS:ObjectName="{A3FEC5D4-4251-42A6-AB24-B26F02C9E470}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::FolderList" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0"
        DTS:LoggingMode="2" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Loop Through Employee Folders ADO\Extract Employee Names"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{19B772B1-2568-4687-A60D-AC043150A56A}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Extract Employee Names"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_009fb7ae5f6d4b7bb457d14ab4237683"
              VSTAMajorVersion="16"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::EmployeeFolderPath,User::EmployeeName">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_bf3844c7364c437a8085f9930863c98d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                // 1. Get and validate folder path
                string folderPath = Dts.Variables["User::EmployeeFolderPath"].Value.ToString().Trim();

                if (string.IsNullOrWhiteSpace(folderPath))
                {
                    MessageBox.Show("Empty folder path provided!",
                                   "Validation Error",
                                   MessageBoxButtons.OK,
                                   MessageBoxIcon.Error);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                // 2. Check directory exists
                if (!Directory.Exists(folderPath))
                {
                    MessageBox.Show($"Folder not found:\n{folderPath}",
                                   "Directory Missing",
                                   MessageBoxButtons.OK,
                                   MessageBoxIcon.Warning);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                // 3. Extract employee name
                string employeeName = Path.GetFileName(folderPath.TrimEnd('\\'));

                if (string.IsNullOrWhiteSpace(employeeName))
                {
                    MessageBox.Show($"Could not extract name from path:\n{folderPath}",
                                   "Name Extraction Error",
                                   MessageBoxButtons.OK,
                                   MessageBoxIcon.Error);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                //// 4. Show confirmation
                //MessageBox.Show($"Processing timesheet for:\n{employeeName}\n\nFolder: {folderPath}",
                //               "Employee Found",
                //               MessageBoxButtons.OK,
                //               MessageBoxIcon.Information);

                // 5. Store result and complete
                Dts.Variables["User::EmployeeName"].Value = employeeName;
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Unexpected error:\n{ex.Message}\n\nPlease contact support.",
                               "Critical Error",
                               MessageBoxButtons.OK,
                               MessageBoxIcon.Error);
                Dts.Events.FireError(0, "Employee Processing", ex.Message, "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_009fb7ae5f6d4b7bb457d14ab4237683.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{AE486A85-CE67-4B66-8F51-46E72E62ECF6}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_bf3844c7364c437a8085f9930863c98d</RootNamespace><AssemblyName>ST_009fb7ae5f6d4b7bb457d14ab4237683</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_b8f8ec7544204295b1b0a59f94f8d9ff</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_b8f8ec7544204295b1b0a59f94f8d9ff</msb:DisplayName>
    <msb:ProjectId>{A5A26E63-9553-49CF-9DEF-72CF4315C33E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_009fb7ae5f6d4b7bb457d14ab4237683.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Settings.get_Default():ST_bf3844c7364c437a8085f9930863c98d.Properties.Sett" +
    "ings")]

namespace ST_bf3844c7364c437a8085f9930863c98d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_bf3844c7364c437a8085f9930863c98d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_bf3844c7364c437a8085f9930863c98d")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_bf3844c7364c437a8085f9930863c98d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_bf3844c7364c437a8085f9930863c98d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_b8f8ec7544204295b1b0a59f94f8d9ff.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMGOQWgAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAAnjIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAEwyAABPAAAAAEAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAApBIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACA
MgAAAAAAAEgAAAACAAUAHCIAAHgPAAABAAAAAAAAAJQxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgBIAQAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAApvFQAACgoGKBYAAAosJHIzAABwcmsAAHAWHxAoFwAACiYCKBAAAAoXbxgAAArd9gAA
AAYoGQAACi0qco0AAHAGKBoAAApyswAAcBYfMCgXAAAKJgIoEAAAChdvGAAACt3EAAAABheNIgAA
ASUWH1ydbxsAAAooHAAACgsHKBYAAAosJ3LXAABwBigaAAAKch0BAHAWHxAoFwAACiYCKBAAAAoX
bxgAAArefgIoEAAACm8RAAAKckkBAHBvEgAACgdvHQAACgIoEAAAChZvGAAACt5VDHJvAQBwCG8e
AAAKcpUBAHAoHwAACnLJAQBwFh8QKBcAAAomAigQAAAKbyAAAAoWcucBAHAIbx4AAApyDwIAcBZv
IQAACiYCKBAAAAoXbxgAAAreACoBEAAAAAAAAPLyAFUPAAABHgIoIgAACioeAigjAAAKKq5+AQAA
BC0echECAHDQAwAAAigkAAAKbyUAAApzJgAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4D
AAAEKh4CKCcAAAoqLnMIAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAF
AGwAAABUBAAAI34AAMAEAAB0BgAAI1N0cmluZ3MAAAAANAsAAIQCAAAjVVMAuA0AABAAAAAjR1VJ
RAAAAMgNAACwAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAJwAAAAUAAAAG
AAAACQAAAAEAAAAnAAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAUAAAABAAAAAQAAAAAA
5QMBAAAAAAAGAGIC9gQGAPEC9gQGAK4B4wQPAGoFAAAGANsBdwQGAEUCdwQGACYCdwQGANgCdwQG
AIICdwQGAJsCdwQGAPIBdwQGAA0CTQMKALYClAMKAC0BlAMGAIkEFgQGACIEFgQGAJEB4wQGAB0G
FgQGAKgEFgUGAJMEYgQOAGEBzwMOAMIBzwMOAEkBTQQGAHYB9gQKAL0DlAMSAKwF2AASAJ8A2AAG
AGkDFgQWAFEGvwUWADAGvwUWANQFvwUWAD4EvwUGAGkGCgAGAJ8EFgQGAHADCgAKALgElAMGAPgA
FgQGAKgAFgQGAGAGdwQAAAAAAQAAAAAAAQABAAEAEAAzBEQAOQABAAEAAAAQAB0FeQVJAAEAAwAA
ARAAtgV5BV0AAwAHAAMBAAD2BQAAQQAEAAoAEQAnBKoAEQAdAa4AEQCDALIABgYzALYAVoDmBbkA
VoD9ALkAUCAAAAAAhgA5BAYAAQC0IQAAAACGGNYEBgABALwhAAAAAIMY1gQGAAEAxCEAAAAAkwik
BL0AAQDwIQAAAACTCAUBwgABAPchAAAAAJMIEQHHAAEA/yEAAAAAlggkBs0AAgAGIgAAAACGGNYE
BgACAA4iAAAAAJEY3ATSAAIAAAABACMDCQDWBAEAEQDWBAYAGQDWBAoAKQDWBBAAMQDWBBAAOQDW
BBAAQQDWBBAASQDWBBAAUQDWBBAAWQDWBBAAYQDWBBAAaQDWBAYAiQDWBAYAsQDWBBUAwQDWBAYA
cQDuBSIAyQCoBScA0QANBCwA2QAPAzIAkQBnAzYA4QAdBDYA4QBwADoA6QBMBj8AyQA9BgEACQEP
BjoA4QAWBksA4QBoAFEAGQHMAFcA2QAZA1wAeQCTADYA4QAWBmEAyQAEBmgAIQHMBG4AcQDWBAYA
kQDWBAYAKQG6AHcAKQFcBoAAmQDWBIYAuQDWBAYACAAUAKAACAAYAKUAKQBzAA0BLgALAOUALgAT
AO4ALgAbAA0BLgAjABYBLgArAD8BLgAzAD8BLgA7AEUBLgBDABYBLgBLAE0BLgBTAD8BLgBbAGYB
QwBjAKUASQBzAA0BYQB7AKUAYwBrAKUAGwADAAEABAADAAAAqATWAAAAJQHbAAAAKAbgAAIABAAD
AAIABQAFAAEABgAFAAIABwAHAASAAAABAAAARyRwZgAAAAAAACkDAAAEAAAAAAAAAAAAAACOADsA
AAAAABAAAAAAAAAAAAAAAJcAdQMAAAAABAAAAAAAAAAAAAAAjgAWBAAAAAAQAAAAAAAAAAAAAACX
ABQAAAAAAAQAAAAAAAAAAAAAAI4AvwUAAAAAAAAAAAEAAAAnBQAABQACAAAAADxNb2R1bGU+AFN5
c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBtc2NvcmxpYgBT
VF9iZjM4NDRjNzM2NGM0MzdhODA4NWY5OTMwODYzYzk4ZABUcmltRW5kAElzTnVsbE9yV2hpdGVT
cGFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UAVmFyaWFibGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUAR2V0RmlsZU5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBF
ZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5v
blVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0
cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
VGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1
dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNT
SVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBT
VF9iOGY4ZWM3NTQ0MjA0Mjk1YjFiMGE1OWY5NGY4ZDlmZgBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFRvU3RyaW5nAFBhdGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVt
LkNvbXBvbmVudE1vZGVsAFNUX2I4ZjhlYzc1NDQyMDQyOTViMWIwYTU5Zjk0ZjhkOWZmLmRsbABn
ZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4ATWVzc2FnZUJv
eEljb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJl
ZmxlY3Rpb24ARXhjZXB0aW9uAEN1bHR1cmVJbmZvAENoYXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBF
dmVudHNPYmplY3RXcmFwcGVyAEZpcmVFcnJvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0
aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9i
ZjM4NDRjNzM2NGM0MzdhODA4NWY5OTMwODYzYzk4ZC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNv
dXJjZXMARGVidWdnaW5nTW9kZXMAU1RfYmYzODQ0YzczNjRjNDM3YTgwODVmOTkzMDg2M2M5OGQu
UHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAE1l
c3NhZ2VCb3hCdXR0b25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMA
RXhpc3RzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVz
dWx0AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkARGlyZWN0b3J5AAAAMVUAcwBlAHIAOgA6
AEUAbQBwAGwAbwB5AGUAZQBGAG8AbABkAGUAcgBQAGEAdABoAAA3RQBtAHAAdAB5ACAAZgBvAGwA
ZABlAHIAIABwAGEAdABoACAAcAByAG8AdgBpAGQAZQBkACEAACFWAGEAbABpAGQAYQB0AGkAbwBu
ACAARQByAHIAbwByAAAlRgBvAGwAZABlAHIAIABuAG8AdAAgAGYAbwB1AG4AZAA6AAoAACNEAGkA
cgBlAGMAdABvAHIAeQAgAE0AaQBzAHMAaQBuAGcAAEVDAG8AdQBsAGQAIABuAG8AdAAgAGUAeAB0
AHIAYQBjAHQAIABuAGEAbQBlACAAZgByAG8AbQAgAHAAYQB0AGgAOgAKAAArTgBhAG0AZQAgAEUA
eAB0AHIAYQBjAHQAaQBvAG4AIABFAHIAcgBvAHIAACVVAHMAZQByADoAOgBFAG0AcABsAG8AeQBl
AGUATgBhAG0AZQAAJVUAbgBlAHgAcABlAGMAdABlAGQAIABlAHIAcgBvAHIAOgAKAAAzCgAKAFAA
bABlAGEAcwBlACAAYwBvAG4AdABhAGMAdAAgAHMAdQBwAHAAbwByAHQALgAAHUMAcgBpAHQAaQBj
AGEAbAAgAEUAcgByAG8AcgAAJ0UAbQBwAGwAbwB5AGUAZQAgAFAAcgBvAGMAZQBzAHMAaQBuAGcA
AAEAcVMAVABfAGIAZgAzADgANAA0AGMANwAzADYANABjADQAMwA3AGEAOAAwADgANQBmADkAOQAz
ADAAOAA2ADMAYwA5ADgAZAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAAAMya/LUBbZtKu0WcCM4es0UABCABAQgDIAABBSABARERBCABAQ4FIAEBEVUGBwMODhI9BCAA
EmUEIAASaQUgARJtHAMgABwDIAAOBAABAg4LAAQReQ4OEX0RgIEFAAIODg4FIAEOHQMEAAEODgQg
AQEcBgADDg4ODgUgABKAkQggBQIIDg4OCAgAARKAlRGAmQUgABKAnQcgAgEOEoCdCLd6XFYZNOCJ
CImEXc2AgMyRBAAAAAAEAQAAAAMGEk0DBhJRAwYSEAIGCAMGERQEAAASTQQAABJRBQABARJRBAAA
EhADAAABBAgAEk0ECAASUQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQgBAAIAAAAAACgBACNTVF9iZjM4NDRjNzM2NGM0MzdhODA4NWY5OTMwODYzYzk4ZAAABQEA
AAAABwEAAkhQAAAYAQATQ29weXJpZ2h0IEAgSFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0Lje0AAAA
zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBW
ZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYx
OTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBB
RFBBRFC0AAAAdDIAAAAAAAAAAAAAjjIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAyAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAAiBAAAAAAAAAAAAAAiBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAcGZHJAAAAQBwZkckPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEggMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAXgMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBUAF8AYgBmADMAOAA0ADQAYwA3ADMANgA0AGMANAAzADcAYQA4ADAAOAA1AGYAOQA5
ADMAMAA4ADYAMwBjADkAOABkAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADkAMgA4ADcALgAyADYAMgAyADQAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBl
AAAAUwBUAF8AYgA4AGYAOABlAGMANwA1ADQANAAyADAANAAyADkANQBiADEAYgAwAGEANQA5AGYA
OQA0AGYAOABkADkAZgBmAC4AZABsAGwAAABMABQAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBo
AHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAFAAIAAyADAAMgA1AAAAKgABAAEATABlAGcA
YQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBp
AGwAZQBuAGEAbQBlAAAAUwBUAF8AYgA4AGYAOABlAGMANwA1ADQANAAyADAANAAyADkANQBiADEA
YgAwAGEANQA5AGYAOQA0AGYAOABkADkAZgBmAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0
AE4AYQBtAGUAAAAAAFMAVABfAGIAZgAzADgANAA0AGMANwAzADYANABjADQAMwA3AGEAOAAwADgA
NQBmADkAOQAzADAAOAA2ADMAYwA5ADgAZAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOQAyADgANwAuADIANgAyADIANAAAAAAARgAPAAEAQQBzAHMAZQBtAGIA
bAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOQAyADgANwAuADIANgAyADIANAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAoDIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{2A4C917B-D215-4025-8594-0C3E6F0BDC7F}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop through each Excel File">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.ForEachFileEnumerator"
            DTS:DTSID="{ED14FAF0-C3C1-463E-BE26-8FF1AFD89F71}"
            DTS:ObjectName="{33912B39-F78A-4A7B-BC4C-010A56CAD77A}">
            <DTS:PropertyExpression
              DTS:Name="Directory">@[User::EmployeeFolderPath]</DTS:PropertyExpression>
            <DTS:ObjectData>
              <ForEachFileEnumeratorProperties>
                <FEFEProperty
                  Folder="" />
                <FEFEProperty
                  FileSpec="*.xlsx" />
                <FEFEProperty
                  FileNameRetrievalType="0" />
                <FEFEProperty
                  Recurse="0" />
              </ForEachFileEnumeratorProperties>
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0"
            DTS:LoggingMode="2" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{4F116082-F2CA-4C75-A859-AC2AFB5DE0B3}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:ObjectName="Process Leave Requests">
              <DTS:Variables />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add EmployeeName and FileName"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output].Columns[EmployeeName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="RedirectRow"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output].Columns[EmployeeName]"
                              name="EmployeeName"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::EmployeeName]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::EmployeeName]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output].Columns[FileName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="RedirectRow"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output].Columns[FileName]"
                              name="FileName"
                              truncationRowDisposition="RedirectRow">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">[REVERSE]([LEFT]([REVERSE](@[User::ExcelFilePath]),[FINDSTRING]([REVERSE](@[User::ExcelFilePath]),"\\",1) - 1))</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">REVERSE(LEFT(REVERSE(@[User::ExcelFilePath]),FINDSTRING(REVERSE(@[User::ExcelFilePath]),"\\",1) - 1))</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Destination"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[Timesheet].[ErrorLog]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          connectionManagerRefId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorTask]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorTask]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].Columns[ErrorDescription]"
                              cachedDataType="nText"
                              cachedName="ErrorDescription"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[SourceComponent]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[SourceComponent]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[UserName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[UserName]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorLogID]"
                              dataType="i4"
                              name="ErrorLogID" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDate]"
                              dataType="dbTimeStamp"
                              name="ErrorDate" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              name="ErrorTask" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                              dataType="nText"
                              name="ErrorDescription" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              name="SourceComponent" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input].ExternalColumns[UserName]"
                              dataType="wstr"
                              length="100"
                              name="UserName" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Error-1"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Inputs[Derived Column Input].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[ErrorTask]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="38"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[ErrorTask]"
                              name="ErrorTask"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">"SSIS Task Error" + " From " + @[System::PackageName]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">"SSIS Task Error" + " From " + @[System::PackageName]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[ErrorDescription]"
                              dataType="nText"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[ErrorDescription]"
                              name="ErrorDescription"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NTEXT)("Error in task:- " + (DT_WSTR,4000)#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]})</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NTEXT)("Error in task:- " + (DT_WSTR,4000)ErrorColumn)</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[SourceComponent]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="14"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[SourceComponent]"
                              name="SourceComponent"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">"Derived Column"</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">"Derived Column"</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[UserName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="34"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[UserName]"
                              name="UserName"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[System::UserName]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[System::UserName]</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Errro-2"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Inputs[Derived Column Input].Columns[ErrorDescription]"
                              cachedDataType="wstr"
                              cachedLength="4000"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorDescription]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Output].Columns[ErrorDescription]"
                              dataType="nText"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Output].Columns[ErrorDescription]"
                              name="ErrorDescription"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NTEXT)#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorDescription]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NTEXT)ErrorDescription</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source"
                      componentClassID="Microsoft.ExcelSource"
                      contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Excel Source"
                      name="Excel Source"
                      usesDispositions="true"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">Leave$</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::ExcelQuery</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT * FROM [Leave$A10:F13]</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">2</property>
                        <property
                          dataType="System.String"
                          description="The mapping from parameters in the SQL command to variables."
                          name="ParameterMapping"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                          connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output]"
                          name="Excel Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Type of Leave]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Type of Leave]"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Type of Leave]"
                              name="Type of Leave"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Start Date]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Start Date]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Start Date]"
                              name="Start Date"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[End Date]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[End Date]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[End Date]"
                              name="End Date"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Number of days ]"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]"
                              name="Number of days "
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Approval Obtained]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Approval Obtained]"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Approval Obtained]"
                              name="Approval Obtained"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Sick Note]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Sick Note]"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Sick Note]"
                              name="Sick Note"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Type of Leave]"
                              dataType="wstr"
                              length="255"
                              name="Type of Leave" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Start Date]"
                              dataType="date"
                              name="Start Date" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[End Date]"
                              dataType="date"
                              name="End Date" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Number of days ]"
                              dataType="r8"
                              name="Number of days " />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Approval Obtained]"
                              dataType="wstr"
                              length="255"
                              name="Approval Obtained" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].ExternalColumns[Sick Note]"
                              dataType="wstr"
                              length="255"
                              name="Sick Note" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output]"
                          isErrorOut="true"
                          name="Excel Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Type of Leave]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Type of Leave]"
                              name="Type of Leave" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Start Date]"
                              dataType="date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Start Date]"
                              name="Start Date" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[End Date]"
                              dataType="date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[End Date]"
                              name="End Date" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Number of days ]"
                              dataType="r8"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Number of days ]"
                              name="Number of days " />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Approval Obtained]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Approval Obtained]"
                              name="Approval Obtained" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Sick Note]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[Sick Note]"
                              name="Sick Note" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows"
                      componentClassID="Microsoft.ConditionalSplit"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Filter Empty Leave Rows"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Inputs[Conditional Split Input].Columns[Number of days ]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Number of days "
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[NonEmptyRows]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="RedirectRow"
                          exclusionGroup="1"
                          name="NonEmptyRows"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Inputs[Conditional Split Input]"
                          truncationRowDisposition="RedirectRow">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">![ISNULL](#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]}) &amp;&amp; [TRIM](#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]}) != "0"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">!ISNULL([Number of days ]) &amp;&amp; TRIM([Number of days ]) != "0"</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[EmptyRows]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="EmptyRows"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="Insert into Leave Staging"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[Timesheet].[StagingLeaveRequest]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          connectionManagerRefId="Package.ConnectionManagers[LocalHost.TimesheetDB]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[EmployeeName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="EmployeeName"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[EmployeeName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output].Columns[EmployeeName]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[FileName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="FileName"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[FileName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output].Columns[FileName]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[Sick Note]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Sick Note"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[SickNote]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Sick Note]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[Approval Obtained]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Approval Obtained"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[ApprovalObtained]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Approval Obtained]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[End Date]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Date"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[EndDate]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[End Date]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[Start Date]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Date"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[StartDate]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Start Date]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[Type of Leave]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Type of Leave"
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[LeaveTypeName]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Type of Leave]" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].Columns[Number of days ]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Number of days "
                              externalMetadataColumnId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[NumberOfDays]"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                              dataType="i4"
                              name="StagingID" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[LeaveTypeName]"
                              dataType="wstr"
                              length="255"
                              name="LeaveTypeName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[StartDate]"
                              dataType="wstr"
                              length="50"
                              name="StartDate" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[EndDate]"
                              dataType="wstr"
                              length="50"
                              name="EndDate" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[NumberOfDays]"
                              dataType="wstr"
                              length="50"
                              name="NumberOfDays" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[ApprovalObtained]"
                              dataType="wstr"
                              length="50"
                              name="ApprovalObtained" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[SickNote]"
                              dataType="wstr"
                              length="50"
                              name="SickNote" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[EmployeeName]"
                              dataType="wstr"
                              length="255"
                              name="EmployeeName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[FileName]"
                              dataType="wstr"
                              length="255"
                              name="FileName" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[ProcessedDate]"
                              dataType="dbTimeStamp"
                              name="ProcessedDate" />
                            <externalMetadataColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input].ExternalColumns[IsValid]"
                              dataType="bool"
                              name="IsValid" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                      description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                      name="Script Component"
                      version="13">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_7f485a135909439ba085fa7d4eb22148")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_7f485a135909439ba085fa7d4eb22148")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        if (!Row.ErrorCode_IsNull)
        {
            Row.ErrorDescription = ComponentMetaData.GetErrorDescription(Row.ErrorCode);
            Row.ErrorTask = "Data Flow Task";  // Optional: make dynamic if needed
            Row.SourceComponent = "Derived Column";  // Update per component
            Row.UserName = Environment.UserName;
        }
    }



}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 ErrorCode
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool ErrorCode_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 ErrorColumn
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool ErrorColumn_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String ErrorDescription
    {
        set
        {
            this[2] = value;
        }
    }
    public bool ErrorDescription_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorTask
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ErrorTask_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SourceComponent
    {
        set
        {
            this[4] = value;
        }
    }
    public bool SourceComponent_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String UserName
    {
        set
        {
            this[5] = value;
        }
    }
    public bool UserName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Settings.get_Default():SC_7f485a135909439ba085fa7d4eb22148.Properties.Sett" +
    "ings")]

namespace SC_7f485a135909439ba085fa7d4eb22148.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Project]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_7f485a135909439ba085fa7d4eb22148</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_7f485a135909439ba085fa7d4eb22148</msb:DisplayName>
    <msb:ProjectId>{ABEADCB6-74C6-48DA-9905-1BFAFA8552C5}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_7f485a135909439ba085fa7d4eb22148.csproj" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_7f485a135909439ba085fa7d4eb22148.csproj]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0514D14C-2201-4C7E-8CED-A9C14B711308}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_7f485a135909439ba085fa7d4eb22148</RootNamespace>
    <AssemblyName>SC_7f485a135909439ba085fa7d4eb22148</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_7f485a135909439ba085fa7d4eb22148.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_7f485a135909439ba085fa7d4eb22148.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_7f485a135909439ba085fa7d4eb22148.dll]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPjuTWgAAAAAAAAAAOAAIiALATAAABYAAAAIAAAAAAAApjUA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFQ1AABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAArBUAAAAgAAAAFgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAYAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACI
NQAAAAAAAEgAAAACAAUAjCIAABASAAABAAAAAAAAAJw0AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACioTMAMAQQAAAAAAAAADbwgAAAYt
OAMCKBIAAAoDbwYAAAZvEwAACm8MAAAGA3IBAABwbw4AAAYDch8AAHBvEAAABgMoFAAACm8SAAAG
Kh4CKBYAAAYqKgIDBAUoFQAACipSAnsWAAAKAnsXAAAKFpRvGAAACio6AhYDjBwAAAEoGQAACioi
AhYoGgAACipaAywIAhYoGwAACipyPQAAcHMcAAAKelICexYAAAoCexcAAAoXlG8YAAAKKiICFyga
AAAKKiYCGAMoGQAACipaAywIAhgoGwAACipyPQAAcHMcAAAKeiYCGQMoGQAACipaAywIAhkoGwAA
CipyPQAAcHMcAAAKeiYCGgMoGQAACipaAywIAhooGwAACipyPQAAcHMcAAAKeiYCGwMoGQAACipa
AywIAhsoGwAACipyPQAAcHMcAAAKeh4CKB0AAAoqHgIoHgAACip+AigfAAAKAgJzGgAABn0BAAAE
AgJzGwAABn0CAAAEKpIEctoAAHAabyAAAAosFQIFAgMoIQAACg4EcwUAAAZvGAAABipKKwcCA28Z
AAAGA28UAAAGLfEqBio6AigiAAAKAgN9AwAABCo6AigiAAAKAgN9BAAABCoeAigiAAAKKq5+BQAA
BC0ecuoAAHDQBwAAAigjAAAKbyQAAApzJQAACoAFAAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqGn4H
AAAEKh4CKCYAAAoqLnMhAAAGgAcAAAQqQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBs
AAAAxAYAACN+AAAwBwAAtAcAACNTdHJpbmdzAAAAAOQOAABcAQAAI1VTAEAQAAAQAAAAI0dVSUQA
AABQEAAAwAEAACNCbG9iAAAAAAAAAAIAAAFXFaABCQEAAAD6ATMAFgAAAQAAACIAAAAIAAAABwAA
ACIAAAAXAAAAJgAAABAAAAADAAAADwAAABIAAAABAAAABQAAAAEAAAAAAGYDAQAAAAAABgBSAswF
BgDmAswFBgCeAbkFDwBABgAABgDLAZgEBgA1ApgEBgAWApgEBgDNApgEBgByApgEBgCLApgEBgDi
AZgEBgD9ASEDCgCmAusACgBiBesADgBTBesACgAKBesACgAmB+sABgDJBkAEBgCBAbkFBgBzBewF
BgD+BIMEEgBRAVADEgCyAVADEgA5AW4EBgBmAcwFFgABAIMFBgDoBkAEBgAdAEAEBgCqBEAEBgA7
A0AEBgDtBEAEBgAMAUAEBgCjAEAEBgCrB5gEAAAAAEcAAAAAAAEAAQABABAAUwQAABAAAQABAAEA
EABGBQAAOQABAAUAAQAQAAgHAABFAAEAFgABABAAvQYAAEkAAwAaAAEAEAB+BgAASQAEABsAAAAQ
APMFTwZJAAUAHAAAARAArQZPBmEABwAgAAYAvQaFAAYAfgaJAAEAFgeNAAEAFgeNABEARwSRABEA
KQGVABEAdwCZAFAgAAAAAMYABAMGAAEAWCAAAAAAxgAPAwYAAQBgIAAAAADGAIgHnQABAK0gAAAA
AIYYrAUGAAIAtSAAAAAAhhisBSkAAgDAIAAAAACGCIcAowAFANUgAAAAAIYIlQABAAUA5CAAAAAA
hgiOA0sABgDtIAAAAACGCKMDpwAGAAQhAAAAAIYIXgSjAAcAGSEAAAAAhgjhA0sABwAiIQAAAACG
CMQEEAAHACwhAAAAAIYI+AOnAAgAQyEAAAAAhghCAxAACQBNIQAAAACGCMwDpwAKAGQhAAAAAIYI
9AYQAAsAbiEAAAAAhggUBKcADACFIQAAAACGCNQAEAANAI8hAAAAAIYIuAOnAA4ApiEAAAAAhgCf
B0sADwCuIQAAAACGANAGSwAPALYhAAAAAIYYrAUGAA8A1iEAAAAAxgB7B6wADwD7IQAAAADGAXQH
nQATAA4iAAAAAMYBiAedABQAECIAAAAAhhisBbYAFQAfIgAAAACGGKwFtgAWAC4iAAAAAIMYrAUG
ABcANiIAAAAAkwhvBbwAFwBiIgAAAACTCBEBwQAXAGkiAAAAAJMIHQHGABcAcSIAAAAAlgjcBswA
GAB4IgAAAACGGKwFBgAYAIAiAAAAAJEYsgXRABgAAAABAKMHAAABAGgFAAACAIgGAAADABgFAAAB
ABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsDAAABABsD
AAABAFAAAAACAOEAAAADAGgFAAAEABgFAAABAGgFAAABAKMHAAABACwHAAABACwHAAABABsDCQCs
BQEAEQCsBQYAGQCsBQoAKQCsBRAAMQCsBRAAOQCsBRAAQQCsBRAASQCsBRAAUQCsBRAAWQCsBRAA
YQCsBRAAaQCsBQYAmQCsBQYAuQCsBRUAyQCsBQYAiQAEAwYAiQAPAwYAiQBYABsA0QDZBCAA2QDH
ACUAcQCsBSkAcQBoBTMAcQCIBjcAeQAaADsAcQA3BEAAcQAoBEYAcQAvBAEA6QCsBRAAcQCfB0sA
cQDQBksAiQCsBQYA8QC2Bk8AiQCcBlYAkQCsBQYAAQG1AFwAAQGnB2UAoQCsBWsAwQCsBQYALgAL
APAALgATAPkALgAbABgBLgAjACEBLgArAEoBLgAzAEoBLgA7AFABLgBDACEBLgBLAFgBLgBTAEoB
LgBbAHEBQwBjALsB4QB7ALsB4wBrALsBqQFzABgByQFzABgBAwABAAcADQAIAA8AAACZANUAAACn
A9kAAABiBNUAAADlA9kAAADcBN0AAAD8A9kAAABGA90AAADQA9kAAAD4Bt0AAAAYBNkAAADYAN0A
AAC8A9kAAABzBeEAAAAxAeYAAADgBusAAgAGAAMAAQAHAAMAAgAIAAUAAQAJAAUAAgAKAAcAAgAL
AAkAAQAMAAsAAQANAA0AAQAOAA8AAQAPABEAAQAQABMAAQARABUAAQASABcAAQATABkAAgAdABsA
AgAeAB0AAQAfAB0AAgAgAB8ABIAAAAEAAAAAAAAAAAAAAAAAIwAAAAQAAAAAAAAAAAAAAHMAbgAA
AAAAEAAAAAAAAAAAAAAAfAA2BwAAAAAQAAAAAAAAAAAAAAB8AFMHAAAAAAQAAAAAAAAAAAAAAHMA
QAQAAAAAEAAAAAAAAAAAAAAAfAAiBQAAAAAAAAAAAQAAAP0FAAAAAABJRFRTQ29tcG9uZW50TWV0
YURhdGExMDAAR2V0SW50MzIAU0NfN2Y0ODVhMTM1OTA5NDM5YmEwODVmYTdkNGViMjIxNDgAPE1v
ZHVsZT4ASW5wdXRJRABnZXRfQ29tcG9uZW50TWV0YURhdGEAbXNjb3JsaWIAZGVmYXVsdEluc3Rh
bmNlAGdldF9FcnJvckNvZGUAc2V0X0Vycm9yQ29kZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBnZXRfVXNlck5hbWUAc2V0X1VzZXJOYW1lAElucHV0TmFtZQBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5QaXBlbGluZQBUeXBlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291
cmNlQ3VsdHVyZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAU3RyaW5nAHNldF9FcnJvclRhc2sAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFND
XzdmNDg1YTEzNTkwOTQzOWJhMDg1ZmE3ZDRlYjIyMTQ4LmRsbABnZXRfRXJyb3JDb2RlX0lzTnVs
bABzZXRfRXJyb3JDb2RlX0lzTnVsbABzZXRfVXNlck5hbWVfSXNOdWxsAHNldF9FcnJvclRhc2tf
SXNOdWxsAGdldF9FcnJvckNvbHVtbl9Jc051bGwAc2V0X0Vycm9yRGVzY3JpcHRpb25fSXNOdWxs
AHNldF9Tb3VyY2VDb21wb25lbnRfSXNOdWxsAFNldE51bGwAc2V0X0l0ZW0AU3lzdGVtAHJlc291
cmNlTWFuAFNjcmlwdE1haW4AZ2V0X0Vycm9yQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNl
cHRpb24Ac2V0X0Vycm9yRGVzY3JpcHRpb24AR2V0RXJyb3JEZXNjcmlwdGlvbgBTdHJpbmdDb21w
YXJpc29uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRC
dWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGlu
ZS5XcmFwcGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUu
Q29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzdmNDg1YTEzNTkwOTQzOWJhMDg1
ZmE3ZDRlYjIyMTQ4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2Rl
cwBTQ183ZjQ4NWExMzU5MDk0MzliYTA4NWZhN2Q0ZWIyMjE0OC5Qcm9wZXJ0aWVzAFZhcmlhYmxl
cwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENv
bm5lY3Rpb25zAE9iamVjdABFbmRPZlJvd3NldABnZXRfRGVmYXVsdABFbnZpcm9ubWVudABzZXRf
U291cmNlQ29tcG9uZW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBv
bmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlw
ZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQASW5wdXQwX1Byb2Nlc3NJbnB1dFJvdwBOZXh0
Um93AGdldF9Bc3NlbWJseQAAHUQAYQB0AGEAIABGAGwAbwB3ACAAVABhAHMAawAAHUQAZQByAGkA
dgBlAGQAIABDAG8AbAB1AG0AbgAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMA
YQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBu
ACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUA
YQBkAC4AAA9JAG4AcAB1AHQAIAAwAABxUwBDAF8ANwBmADQAOAA1AGEAMQAzADUAOQAwADkANAAz
ADkAYgBhADAAOAA1AGYAYQA3AGQANABlAGIAMgAyADEANAA4AC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAADQet6Rm21OQa6OpR+xAQItAAQgAQEIAyAAAQUgAQEREQQg
AQEOBSABARFZBCAAEmkEIAEOCAMAAA4JIAMBEj0dCBJBAwYSPQMGHQgEIAEICAUgAgEIHAQgAQII
AyAAAgYgAgIOEX0FIAEdCAgIAAESgIERgIUFIAASgIkHIAIBDhKAiQi3elxWGTTgiQiJhF3NgIDM
kQMGEhQDBhIYAwYSRQMGElEDBhJVAwYSIAUgAQESDAMgAAgEIAEBAgkgBAEIDhI9EkEFIAEBEkUE
AAASUQQAABJVBQABARJVBAAAEiADAAABAygACAMoAAIDKAAOBAgAElEECAASVQQIABIgCAEACAAA
AAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ183ZjQ4NWEx
MzU5MDk0MzliYTA4NWZhN2Q0ZWIyMjE0OAAABQEAAAAABwEAAkhQAAAYAQATQ29weXJpZ2h0IEAg
SFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNw
bGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcEAQAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJl
c291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVy
ZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJj
ZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAB8NQAAAAAAAAAAAACW
NQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiDUAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2Nv
cmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAPQDAAAAAAAAAAAAAPQDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsARUAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAwAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAJgADAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAABIAFAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBu
AAAAAABTAEMAXwA3AGYANAA4ADUAYQAxADMANQA5ADAAOQA0ADMAOQBiAGEAMAA4ADUAZgBhADcA
ZAA0AGUAYgAyADIAMQA0ADgAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4AMAAuADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADcAZgA0ADgA
NQBhADEAMwA1ADkAMAA5ADQAMwA5AGIAYQAwADgANQBmAGEANwBkADQAZQBiADIAMgAxADQAOAAu
AGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBh
AHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMA
QwBfADcAZgA0ADgANQBhADEAMwA1ADkAMAA5ADQAMwA5AGIAYQAwADgANQBmAGEANwBkADQAZQBi
ADIAMgAxADQAOAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMA
XwA3AGYANAA4ADUAYQAxADMANQA5ADAAOQA0ADMAOQBiAGEAMAA4ADUAZgBhADcAZAA0AGUAYgAy
ADIAMQA0ADgAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAOAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAu
ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAACoNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">SC_7f485a135909439ba085fa7d4eb22148</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum140"
                          typeConverter="NOTBROWSABLE">4B</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Inputs[Input 0]"
                          hasSideEffects="true"
                          name="Input 0">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Inputs[Input 0].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              usageType="readWrite" />
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Inputs[Input 0].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorColumn]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0]"
                          name="Output 0"
                          synchronousInputId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Inputs[Input 0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorDescription]"
                              dataType="wstr"
                              length="4000"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorDescription]"
                              name="ErrorDescription" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorTask]"
                              name="ErrorTask" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[SourceComponent]"
                              name="SourceComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[UserName]"
                              dataType="wstr"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[UserName]"
                              name="UserName" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All"
                      componentClassID="Microsoft.UnionAll"
                      contactInfo="Union All;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Combines rows from multiple data flows without sorting. For example, add rows back to a data flow after correction of errors. If sorting is important, we recommend using the Merge transformation."
                      name="Union All"
                      version="1">
                      <inputs>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1]"
                          name="Union All Input 1">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[Type of Leave]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Type of Leave"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Type of Leave]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Type of Leave]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[Start Date]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Start Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Start Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[End Date]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[End Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[End Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[Approval Obtained]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Approval Obtained"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Approval Obtained]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Approval Obtained]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[Sick Note]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Sick Note"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Sick Note]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Sick Note]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorCode]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorCode]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output].Columns[ErrorColumn]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="38"
                              cachedName="ErrorTask"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[ErrorTask]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorTask]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[ErrorDescription]"
                              cachedDataType="nText"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[ErrorDescription]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="14"
                              cachedName="SourceComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[SourceComponent]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[SourceComponent]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="34"
                              cachedName="UserName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output].Columns[UserName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[UserName]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1].Columns[Number of days ]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Number of days "
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Number of days ]}</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2]"
                          hasSideEffects="true"
                          name="Union All Input 2">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[Type of Leave]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Type of Leave"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Type of Leave]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Type of Leave]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[Start Date]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Start Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Start Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Start Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[End Date]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="End Date"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[End Date]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[End Date]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[Number of days ]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Number of days "
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Number of days ]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Number of days ]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[Approval Obtained]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Approval Obtained"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Approval Obtained]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Approval Obtained]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[Sick Note]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Sick Note"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output].Columns[Sick Note]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Sick Note]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[ErrorCode]"
                              cachedDataType="i4"
                              cachedName="ErrorCode"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorCode]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorCode]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[ErrorColumn]"
                              cachedDataType="i4"
                              cachedName="ErrorColumn"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output].Columns[ErrorColumn]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[ErrorDescription]"
                              cachedDataType="nText"
                              cachedName="ErrorDescription"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Output].Columns[ErrorDescription]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[ErrorTask]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ErrorTask"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[ErrorTask]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorTask]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[SourceComponent]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SourceComponent"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[SourceComponent]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[SourceComponent]}</property>
                              </properties>
                            </inputColumn>
                            <inputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="100"
                              cachedName="UserName"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0].Columns[UserName]">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Output column lineage ID"
                                  name="OutputColumnLineageID">#{Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[UserName]}</property>
                              </properties>
                            </inputColumn>
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                        <input
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 3]"
                          dangling="true"
                          hasSideEffects="true"
                          name="Union All Input 3">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1]"
                          name="Union All Output 1">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Type of Leave]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Type of Leave]"
                              name="Type of Leave" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Start Date]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Start Date]"
                              name="Start Date" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[End Date]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[End Date]"
                              name="End Date" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Number of days ]"
                              dataType="wstr"
                              length="50"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Number of days ]"
                              name="Number of days " />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Approval Obtained]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Approval Obtained]"
                              name="Approval Obtained" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Sick Note]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[Sick Note]"
                              name="Sick Note" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorCode]"
                              name="ErrorCode" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorColumn]"
                              name="ErrorColumn" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorTask]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorTask]"
                              name="ErrorTask" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]"
                              dataType="nText"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[ErrorDescription]"
                              name="ErrorDescription" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[SourceComponent]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[SourceComponent]"
                              name="SourceComponent" />
                            <outputColumn
                              refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[UserName]"
                              dataType="wstr"
                              length="100"
                              lineageId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1].Columns[UserName]"
                              name="UserName" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Conditional Split Error Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Inputs[Input 0]"
                      name="Conditional Split Error Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[Conditional Split Error Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Error Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Inputs[Derived Column Input]"
                      name="Derived Column Error Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Error Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Inputs[Conditional Split Input]"
                      name="Derived Column Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Output1]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 1]"
                      name="Derived Column Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Output2]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Inputs[Union All Input 2]"
                      name="Derived Column Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Excel Source Output]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName.Inputs[Derived Column Input]"
                      name="Excel Source Output"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source.Outputs[Excel Source Output]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[NonEmptyRows]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging.Inputs[OLE DB Destination Input]"
                      name="NonEmptyRows"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows.Outputs[NonEmptyRows]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Output 0]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2.Inputs[Derived Column Input]"
                      name="Output 0"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component.Outputs[Output 0]" />
                    <path
                      refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Union All Output 1]"
                      endId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination.Inputs[OLE DB Destination Input]"
                      name="Union All Output 1"
                      startId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All.Outputs[Union All Output 1]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Select Month Sheet"
              DTS:CreationName="Microsoft.ScriptTask"
              DTS:Description="Script Task"
              DTS:DTSID="{770B88D1-9DA1-40FD-A639-150F1C2061D6}"
              DTS:ExecutableType="Microsoft.ScriptTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Select Month Sheet"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_1526ad78ea094d9e9730c3cc45b0474f"
                  VSTAMajorVersion="16"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::ExcelFilePath"
                  ReadWriteVariables="User::ExcelConnectionString,User::ExcelQuery,User::ValidLeaveSheetName">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_1526ad78ea094d9e9730c3cc45b0474f.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{3FE4EA49-40F9-438C-A0E3-7CB51A234E05}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_a136fd41f7184a7a96b8e8a480790b29</RootNamespace>
    <AssemblyName>ST_1526ad78ea094d9e9730c3cc45b0474f</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Settings.get_Default():ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Sett" +
    "ings")]

namespace ST_a136fd41f7184a7a96b8e8a480790b29.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Windows.Forms;
using System.Data.OleDb;
using Microsoft.SqlServer.Dts.Runtime;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using System.Runtime.Remoting.Lifetime;
#endregion

namespace ST_a136fd41f7184a7a96b8e8a480790b29
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {


            string logFilePath = @"C:\Timesheets\LeaveLog.txt";
            StringBuilder debugInfo = new StringBuilder();
            debugInfo.AppendLine($"{DateTime.Now}: Starting Leave sheet detection");

            try
            {
                string excelFilePath = Dts.Variables["User::ExcelFilePath"].Value.ToString();

                if (!File.Exists(excelFilePath))
                {
                    string errorMsg = $"Excel file not found:\n{excelFilePath}";
                    MessageBox.Show(errorMsg, "File Error");
                    debugInfo.AppendLine(errorMsg);
                    File.AppendAllText(logFilePath, debugInfo.ToString());
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                string excelConnStr = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelFilePath};Extended Properties=\"Excel 12.0 Xml;HDR=YES;IMEX=1\";";
                bool leaveSheetFound = false;

                using (var conn = new OleDbConnection(excelConnStr))
                {
                    conn.Open();
                    debugInfo.AppendLine($"Processing file: {Path.GetFileName(excelFilePath)}");
                    debugInfo.AppendLine("-------------------------------");

                    DataTable allSheets = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    debugInfo.AppendLine("Sheets found in workbook:");

                    foreach (DataRow sheet in allSheets.Rows)
                    {
                        string sheetName = sheet["TABLE_NAME"].ToString();
                        debugInfo.AppendLine($"- {sheetName}");

                        if (sheetName.StartsWith("Leave", StringComparison.OrdinalIgnoreCase))
                        {
                            leaveSheetFound = true;
                            debugInfo.AppendLine($"Leave sheet detected: {sheetName}");

                            try
                            {
                                string range = $"{sheetName}A10:F13";
                                var cmd = new OleDbCommand($"SELECT * FROM [{range}]", conn);
                                var adapter = new OleDbDataAdapter(cmd);
                                var table = new DataTable();
                                adapter.Fill(table);

                                if (table.Rows.Count == 0)
                                {
                                    debugInfo.AppendLine($"No data found in range {range}.");
                                    MessageBox.Show("No data found in the specified range.", "Empty Range");
                                    Dts.TaskResult = (int)ScriptResults.Failure;
                                    File.AppendAllText(logFilePath, debugInfo.ToString());
                                    return;
                                }

                                List<string> expectedColumns = new List<string>
                        {
                            "Type of Leave", "Start Date", "End Date", "Number of days", "Approval Obtained", "Sick Note"
                        };

                                debugInfo.AppendLine($"Leave sheet contains {table.Rows.Count} rows");
                                debugInfo.AppendLine("Columns and data types found in Leave sheet:");
                                foreach (DataColumn col in table.Columns)
                                    debugInfo.AppendLine($" - {col.ColumnName} ({col.DataType.Name})");

                                List<string> actualColumns = table.Columns
                                                                  .Cast<DataColumn>()
                                                                  .Select(col => col.ColumnName.Trim())
                                                                  .ToList();

                                var missingCols = expectedColumns.Except(actualColumns, StringComparer.OrdinalIgnoreCase).ToList();
                                var extraCols = actualColumns.Except(expectedColumns, StringComparer.OrdinalIgnoreCase).ToList();

                                if (missingCols.Any())
                                {
                                    debugInfo.AppendLine("Missing expected columns:");
                                    foreach (string missing in missingCols)
                                        debugInfo.AppendLine($" - {missing}");
                                    MessageBox.Show("Leave sheet is missing expected columns. Check log file.", "Leave Sheet Error");
                                    Dts.TaskResult = (int)ScriptResults.Failure;
                                    File.AppendAllText(logFilePath, debugInfo.ToString());
                                    return;
                                }

                                if (extraCols.Any())
                                {
                                    debugInfo.AppendLine("Extra columns found:");
                                    foreach (string extra in extraCols)
                                        debugInfo.AppendLine($" - {extra}");
                                }

                              
                                string dynamicSelectQuery = $"SELECT [Type of Leave], [Start Date], [End Date], [Number of days], [Approval Obtained], [Sick Note] FROM [{sheetName}A10:F13]";
                                Dts.Variables["User::ExcelConnectionString"].Value = excelConnStr;
                                Dts.Variables["User::ExcelQuery"].Value = dynamicSelectQuery;
                                Dts.Variables["User::ValidLeaveSheetName"].Value = sheetName;
                               
                           
                                break; 
                            }
                            catch (Exception ex)
                            {
                                debugInfo.AppendLine($"Error reading Leave sheet: {ex.Message}");
                                MessageBox.Show("Error reading Leave sheet. See log.", "Error");
                                Dts.TaskResult = (int)ScriptResults.Failure;
                                File.AppendAllText(logFilePath, debugInfo.ToString());
                                return;
                            }
                        }
                    }

                    if (!leaveSheetFound)
                    {
                        debugInfo.AppendLine("No Leave sheet found in this file.");
                        MessageBox.Show("No Leave sheet found.", "Sheet Missing");
                        Dts.TaskResult = (int)ScriptResults.Failure;
                        File.AppendAllText(logFilePath, debugInfo.ToString());
                        return;
                    }
                    else if (Dts.Variables["User::ValidLeaveSheetName"].Value == null || string.IsNullOrEmpty(Dts.Variables["User::ValidLeaveSheetName"].Value.ToString()))
                    {
                        debugInfo.AppendLine("No valid Leave sheet with data found. Skipping processing.");
                        MessageBox.Show("No valid Leave sheet with data found. Skipping processing.", "Empty or Invalid Sheet");
                        Dts.TaskResult = (int)ScriptResults.Success; // Success but no data processed
                        File.AppendAllText(logFilePath, debugInfo.ToString());
                        return;
                    }
                }

                File.AppendAllText(logFilePath, debugInfo.ToString());
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                string errorMsg = $"ERROR PROCESSING FILE:\n{ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
                MessageBox.Show(errorMsg, "Processing Error");
                debugInfo.AppendLine(errorMsg);
                File.AppendAllText(logFilePath, debugInfo.ToString());
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }
    }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_1526ad78ea094d9e9730c3cc45b0474f</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_1526ad78ea094d9e9730c3cc45b0474f</msb:DisplayName>
    <msb:ProjectId>{261A5770-927F-4ACA-A23C-EF6253948939}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_1526ad78ea094d9e9730c3cc45b0474f.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a136fd41f7184a7a96b8e8a480790b29")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_a136fd41f7184a7a96b8e8a480790b29")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a136fd41f7184a7a96b8e8a480790b29.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a136fd41f7184a7a96b8e8a480790b29.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_1526ad78ea094d9e9730c3cc45b0474f.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAO74RmgAAAAAAAAAAOAAIiALATAAACYAAAAIAAAAAAAAOkUA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOhEAABPAAAAAGAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAQCUAAAAgAAAAJgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAYAAAAAYAAAAoAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAALgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAc
RQAAAAAAAEgAAAACAAUAoCcAAJAcAAABAAAAAAAAADBEAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBQAVBgAAAQAAEXIBAABwCnMQAAAKCwdyNwAAcCgRAAAK
jCIAAAEoEgAACm8TAAAKJgIoFAAACm8VAAAKcn8AAHBvFgAACm8XAAAKbxgAAAoMCCgZAAAKLUBy
pwAAcAgoGgAAChMFEQVy1QAAcCgbAAAKJgcRBW8TAAAKJgYHbxgAAAooHAAACgIoFAAAChdvHQAA
Ct2FBQAAcusAAHAIckkBAHAoHgAACg0WEwQJcx8AAAoTBhEGbyAAAAoHcrUBAHAIKCEAAAooGgAA
Cm8TAAAKJgdy2QEAcG8TAAAKJhEGfiIAAAoUbyMAAAoHchkCAHBvEwAACiZvJAAACm8lAAAKEwc4
xAMAABEHbyYAAAp0MAAAAXJNAgBwbycAAApvGAAAChMIB3JjAgBwEQgoGgAACm8TAAAKJhEIcmkC
AHAbbygAAAo5ggMAABcTBAdydQIAcBEIKBoAAApvEwAACiYRCHKjAgBwKBoAAAoTCXKzAgBwEQly
0wIAcCgeAAAKEQZzKQAACnMqAAAKcysAAAoTChEKbywAAAomEQpvJAAACm8tAAAKLUUHctcCAHAR
CXIHAwBwKB4AAApvEwAACiZyCwMAcHJXAwBwKBsAAAomAigUAAAKF28dAAAKBgdvGAAACigcAAAK
3TAEAABzLgAACiVybwMAcG8vAAAKJXKLAwBwby8AAAolcqEDAHBvLwAACiVyswMAcG8vAAAKJXLR
AwBwby8AAAolcvUDAHBvLwAAChMLB3IJBABwEQpvJAAACm8tAAAKjDUAAAEoEgAACm8TAAAKJgdy
RQQAcG8TAAAKJhEKbzAAAApvJQAAChMQK1EREG8mAAAKdBQAAAETEQcbjSMAAAElFnKfBABwoiUX
ERFvMQAACqIlGHKnBABwoiUZERFvMgAACm8zAAAKoiUacq0EAHCiKDQAAApvEwAACiYREG81AAAK
LabeFREQdRUAAAETEhESLAcREm82AAAK3BEKbzAAAAooAQAAK34IAAAEJS0XJn4HAAAE/gYMAAAG
czgAAAolgAgAAAQoAgAAKygDAAArEwwRCxEMKDsAAAooBAAAKygDAAArEw0RDBELKDsAAAooBAAA
KygDAAArEw4RDSgFAAArLHkHcrEEAHBvEwAACiYRDW8+AAAKExMrHBITKD8AAAoTFAdynwQAcBEU
KBoAAApvEwAACiYSEyhAAAAKLdveDhIT/hYDAAAbbzYAAArccuUEAHByVwUAcCgbAAAKJgIoFAAA
ChdvHQAACgYHbxgAAAooHAAACt1VAgAAEQ4oBQAAKyxMB3J7BQBwbxMAAAomEQ5vPgAAChMTKxwS
Eyg/AAAKExUHcp8EAHARFSgaAAAKbxMAAAomEhMoQAAACi3b3g4SE/4WAwAAG282AAAK3HKlBQBw
EQhyfgYAcCgeAAAKEw8CKBQAAApvFQAACnKQBgBwbxYAAAoJb0EAAAoCKBQAAApvFQAACnLIBgBw
bxYAAAoRD29BAAAKAigUAAAKbxUAAApy6gYAcG8WAAAKEQhvQQAACt5TExYHch4HAHARFm9CAAAK
KBoAAApvEwAACiZyVgcAcHKeBwBwKBsAAAomAigUAAAKF28dAAAKBgdvGAAACigcAAAK3VEBAAAR
B281AAAKOjD8///eFREHdRUAAAETEhESLAcREm82AAAK3BEELTkHcqoHAHBvEwAACiZy8AcAcHIc
CABwKBsAAAomAigUAAAKF28dAAAKBgdvGAAACigcAAAK3fEAAAACKBQAAApvFQAACnLqBgBwbxYA
AApvFwAACiwmAigUAAAKbxUAAApy6gYAcG8WAAAKbxcAAApvGAAACihDAAAKLDYHcjgIAHBvEwAA
CiZyOAgAcHKuCABwKBsAAAomAigUAAAKFm8dAAAKBgdvGAAACigcAAAK3nneDBEGLAcRBm82AAAK
3AYHbxgAAAooHAAACgIoFAAAChZvHQAACt5RExdy3AgAcBEXb0IAAApyDAkAcBEXb0QAAAooRQAA
ChMYERhyLAkAcCgbAAAKJgcRGG8TAAAKJgYHbxgAAAooHAAACgIoFAAAChdvHQAACt4AKgAAAEGs
AAACAAAAaQIAAF4AAADHAgAAFQAAAAAAAAACAAAAWwMAACkAAACEAwAADgAAAAAAAAACAAAA3QMA
ACkAAAAGBAAADgAAAAAAAAAAAAAAVwEAACUDAAB8BAAARwAAABcAAAECAAAA+gAAANcDAADRBAAA
FQAAAAAAAAACAAAAqwAAAPIEAACdBQAADAAAAAAAAAAAAAAAJwAAAJwFAADDBQAAUQAAABcAAAEe
AihGAAAKKh4CKEcAAAoqrn4EAAAELR5yTgkAcNAEAAACKEgAAApvSQAACnNKAAAKgAQAAAR+BAAA
BCoafgUAAAQqHgKABQAABCoafgYAAAQqHgIoSwAACioucwgAAAaABgAABCoucwsAAAaABwAABCoy
A28xAAAKb0wAAAoqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAFwGAAAjfgAA
yAYAAPwIAAAjU3RyaW5ncwAAAADEDwAAwAkAACNVUwCEGQAAEAAAACNHVUlEAAAAlBkAAPwCAAAj
QmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAAA/AAAABgAAAAgAAAAMAAAAAgAAAEwA
AAACAAAAEQAAAAEAAAACAAAAAwAAAAQAAAADAAAAAQAAAAcAAAABAAAAAQAAAAUAAAAAAEYFAQAA
AAAABgC4A/gGBgBHBPgGBgAEA+UGDwBsBwAABgAxA+IFBgCbA+IFBgB8A+IFBgAuBOIFBgDYA+IF
BgDxA+IFBgBIA+IFBgBjA6MECgAMBPUECgBKAvUEBgB8BqAIDgAbBrsABgC+BukHDgBVAa8ABgA5
ANoADgCtBa8ABgB0AYAFTwDNBgAABgArBoAFBgDMAvgGBgA4CIAFBgBGAIAFBgCMBYAFBgDnAuUG
BgCOBhgHBgBZBs0FEgC3AjAFEgAYAzAFEgCBArgFBgDNAYAFBgC/BIAFCgAeBfUEFgC1B9YBFgBf
AdYBBgCkAX4AGgDPCMgHGgBSCMgHDgAeBjUGBgDGBH4ADgD5ALsABgAEAYAFDgAJBq8ADgBmAq8A
DgDCCK8ABgBIBoAFDgAJAbsADgCtBrsADgCwBjUGBgBAAIAFDgD0Ba8ABgAJAoAFBgBlBuIFHgBp
AXAGBgAXANoABgBoAekHBgCeBoAFBgAlANoABgCAAYAFBgDeCOIFAAAAAHUAAAAAAAEAAQABABAA
ogVNADkAAQABAAABAAAMCE0AbQABAAMAAAAQAB8HewdlAAQAAwAAARAAvwd7B4UABgAHAAMhEADW
AAAAZQAHAAoABganAOMBVoD8B+YBVoAaAuYBEQCRBeoBEQA6Au4BEQAlAfIBNgBxAPYBFgABAPoB
UCAAAAAAhgCoBQYAAQAgJwAAAACGGNgGBgABACgnAAAAAIMY2AYGAAEAMCcAAAAAkwiKBgMCAQBc
JwAAAACTCCICCAIBAGMnAAAAAJMILgINAgEAaycAAAAAlghGCBMCAgByJwAAAACGGNgGBgACAHon
AAAAAJEY3gYYAgIAhicAAAAAkRjeBhgCAgAoJwAAAACGGNgGBgACAJInAAAAAIMACgAcAgIAAAAB
AHkEAAABAHMFCQDYBgEAEQDYBgYAGQDYBgoAKQDYBhAAMQDYBhAAOQDYBhAAQQDYBhAASQDYBhAA
UQDYBhAAWQDYBhAAYQDYBhAAaQDYBgYAwQDYBgYA4QDYBgYAAQHYBhUAeQDYBgYAEQG6CFQAGQEx
CFoAeQD2AWAAcQAECGYAIQGxB2wAKQF3BXIAMQFlBHkAyQC9BH0AOQEaCIEAGQEqCIYAQQHKCIwA
OQGsCJQAIQFfCAEAGQEqCJoAgQDYBhAAUQGdBQYAWQGyAaEAYQGqB6YAgQBBAasAkQAhCLUAeQHK
BrsAiQBuCHkAgQF3BcAAGQHLBMUAkQHYBs0AmQHYBtQAkQDYBgYAoQFuBdsAeQF6COEADADYBgYA
DAD1AOsAkQDdB/EAoQC+AX0AoQABAvcAwQGpAX0AGQEqCP0AiQCXCAMBqQCvAgYAyQGLCAcBFADY
BiIByQE/CCgByQGQCEgB4QGZAl0ByQGECGMByQHnCIMBDADKBo8BHABuCJ4BHACXCAMBMQFvBKMB
uQA1AX0AGQHrCIEAuQAWAX0AGQEqCKgBcQDYBgYAyQDYBgYAuQGSAbABuQHaCLkB6QDYBr8BCQHY
BgYAGQGHBX0ACAAIANkBCAAMAN4BKQB7AFkCLgALADECLgATADoCLgAbAFkCLgAjAGICLgArAIsC
LgAzAIsCLgA7AJECLgBDAGICLgBLAJkCLgBTAIsCLgBbALICQwBjAN4BSQB7AFkCgwBzAN4BwQBr
AN4BwwBrAN4BGwAEAAEABQADAAAAjgYiAgAAQgInAgAASggsAgIABAADAAIABQAFAAEABgAFAAIA
BwAHAOUAGgGYAQSAAAABAAAASySHeAAAAAAAAH8EAAAEAAAAAAAAAAAAAADHAc0AAAAAABAAAAAA
AAAAAAAAANAB1gQAAAAABAAAAAAAAAAAAAAAxwGvAAAAAAAEAAAAAAAAAAAAAADHAYAFAAAAABAA
AAAAAAAAAAAAANABiAAAAAAABAAAAAAAAAAAAAAAxwHIBwAAAAAEAAAAAAAAAAAAAADHAQ4CAAAA
AAAAAAABAAAAKQcAAAYAAgBvABUBcwBCAXUAWQF5AFkBewBZAQAAADw+OV9fMF8wADxNYWluPmJf
XzBfMABJRW51bWVyYWJsZWAxAElFcXVhbGl0eUNvbXBhcmVyYDEATGlzdGAxAEludDMyAEZ1bmNg
MgBTVF9hMTM2ZmQ0MWY3MTg0YTdhOTZiOGU4YTQ4MDc5MGIyOQA8PjkAPE1vZHVsZT4AU3lzdGVt
LklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3RlbS5EYXRhAFN5
c3RlbS5EYXRhLk9sZURiAG1zY29ybGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBB
ZGQAT2xlRGJTY2hlbWFHdWlkAE9sZURiQ29tbWFuZABnZXRfU3RhY2tUcmFjZQBkZWZhdWx0SW5z
dGFuY2UAZ2V0X01lc3NhZ2UAR2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUA
SUVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5k
bGUARmlsZQBnZXRfTmFtZQBHZXRGaWxlTmFtZQBnZXRfQ29sdW1uTmFtZQBEYXRlVGltZQBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAEFwcGVuZExpbmUAZ2V0X0RhdGFUeXBlAFN5c3Rl
bS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZT
VEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBBcHBs
aWNhdGlvblNldHRpbmdzQmFzZQBnZXRfT3JkaW5hbElnbm9yZUNhc2UARGlzcG9zZQBFZGl0b3JC
cm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBTVF8xNTI2
YWQ3OGVhMDk0ZDllOTczMGMzY2M0NWIwNDc0ZgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRv
U3RyaW5nAFBhdGgAU3RhcnRzV2l0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMTUyNmFkNzhlYTA5NGQ5ZTk3MzBjM2NjNDViMDQ3NGYu
ZGxsAEZpbGwAY29sAGdldF9JdGVtAFN5c3RlbQBUcmltAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBT
Y3JpcHRNYWluAERhdGFDb2x1bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6
YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxl
Y3Rpb24AT2xlRGJDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3RyaW5n
Q29tcGFyaXNvbgBDdWx0dXJlSW5mbwBNZW1iZXJJbmZvAFN5c3RlbS5MaW5xAFN0cmluZ0J1aWxk
ZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBTdHJpbmdDb21wYXJlcgBPbGVEYkRhdGFBZGFwdGVyAElF
bnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBT
eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfYTEzNmZk
NDFmNzE4NGE3YTk2YjhlOGE0ODA3OTBiMjkuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2Vz
AERlYnVnZ2luZ01vZGVzAFNUX2ExMzZmZDQxZjcxODRhN2E5NmI4ZThhNDgwNzkwYjI5LlByb3Bl
cnRpZXMAVGFibGVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAU3lzdGVtLldpbmRvd3MuRm9ybXMA
Z2V0X0NvbHVtbnMAU3lzdGVtLkNvbGxlY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1
bHRzAEV4aXN0cwBnZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABTZWxlY3QAZ2V0X0RlZmF1
bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVzdWx0AGdldF9DdXJyZW50AGdldF9Db3VudABFeGNl
cHQAQ2FzdABUb0xpc3QATW92ZU5leHQAU3lzdGVtLlRleHQAQXBwZW5kQWxsVGV4dABnZXRfTm93
AERhdGFSb3cAU2hvdwBNZXNzYWdlQm94AGdldF9Bc3NlbWJseQBBbnkASXNOdWxsT3JFbXB0eQAA
AAAANUMAOgBcAFQAaQBtAGUAcwBoAGUAZQB0AHMAXABMAGUAYQB2AGUATABvAGcALgB0AHgAdAAA
R3sAMAB9ADoAIABTAHQAYQByAHQAaQBuAGcAIABMAGUAYQB2AGUAIABzAGgAZQBlAHQAIABkAGUA
dABlAGMAdABpAG8AbgAAJ1UAcwBlAHIAOgA6AEUAeABjAGUAbABGAGkAbABlAFAAYQB0AGgAAC1F
AHgAYwBlAGwAIABmAGkAbABlACAAbgBvAHQAIABmAG8AdQBuAGQAOgAKAAAVRgBpAGwAZQAgAEUA
cgByAG8AcgAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBP
AEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAGs7AEUAeAB0AGUA
bgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAAIABY
AG0AbAA7AEgARABSAD0AWQBFAFMAOwBJAE0ARQBYAD0AMQAiADsAACNQAHIAbwBjAGUAcwBzAGkA
bgBnACAAZgBpAGwAZQA6ACAAAD8tAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAt
AC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAAEzUwBoAGUAZQB0AHMAIABmAG8AdQBuAGQAIABpAG4A
IAB3AG8AcgBrAGIAbwBvAGsAOgAAFVQAQQBCAEwARQBfAE4AQQBNAEUAAAUtACAAAQtMAGUAYQB2
AGUAAC1MAGUAYQB2AGUAIABzAGgAZQBlAHQAIABkAGUAdABlAGMAdABlAGQAOgAgAAAPQQAxADAA
OgBGADEAMwAAH1MARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABbAAADXQAAL04AbwAgAGQAYQB0
AGEAIABmAG8AdQBuAGQAIABpAG4AIAByAGEAbgBnAGUAIAAAAy4AAEtOAG8AIABkAGEAdABhACAA
ZgBvAHUAbgBkACAAaQBuACAAdABoAGUAIABzAHAAZQBjAGkAZgBpAGUAZAAgAHIAYQBuAGcAZQAu
AAAXRQBtAHAAdAB5ACAAUgBhAG4AZwBlAAAbVAB5AHAAZQAgAG8AZgAgAEwAZQBhAHYAZQAAFVMA
dABhAHIAdAAgAEQAYQB0AGUAABFFAG4AZAAgAEQAYQB0AGUAAB1OAHUAbQBiAGUAcgAgAG8AZgAg
AGQAYQB5AHMAACNBAHAAcAByAG8AdgBhAGwAIABPAGIAdABhAGkAbgBlAGQAABNTAGkAYwBrACAA
TgBvAHQAZQAAO0wAZQBhAHYAZQAgAHMAaABlAGUAdAAgAGMAbwBuAHQAYQBpAG4AcwAgAHsAMAB9
ACAAcgBvAHcAcwAAWUMAbwBsAHUAbQBuAHMAIABhAG4AZAAgAGQAYQB0AGEAIAB0AHkAcABlAHMA
IABmAG8AdQBuAGQAIABpAG4AIABMAGUAYQB2AGUAIABzAGgAZQBlAHQAOgAAByAALQAgAAEFIAAo
AAADKQAAM00AaQBzAHMAaQBuAGcAIABlAHgAcABlAGMAdABlAGQAIABjAG8AbAB1AG0AbgBzADoA
AHFMAGUAYQB2AGUAIABzAGgAZQBlAHQAIABpAHMAIABtAGkAcwBzAGkAbgBnACAAZQB4AHAAZQBj
AHQAZQBkACAAYwBvAGwAdQBtAG4AcwAuACAAQwBoAGUAYwBrACAAbABvAGcAIABmAGkAbABlAC4A
ACNMAGUAYQB2AGUAIABTAGgAZQBlAHQAIABFAHIAcgBvAHIAAClFAHgAdAByAGEAIABjAG8AbAB1
AG0AbgBzACAAZgBvAHUAbgBkADoAAIDXUwBFAEwARQBDAFQAIABbAFQAeQBwAGUAIABvAGYAIABM
AGUAYQB2AGUAXQAsACAAWwBTAHQAYQByAHQAIABEAGEAdABlAF0ALAAgAFsARQBuAGQAIABEAGEA
dABlAF0ALAAgAFsATgB1AG0AYgBlAHIAIABvAGYAIABkAGEAeQBzAF0ALAAgAFsAQQBwAHAAcgBv
AHYAYQBsACAATwBiAHQAYQBpAG4AZQBkAF0ALAAgAFsAUwBpAGMAawAgAE4AbwB0AGUAXQAgAEYA
UgBPAE0AIABbAAARQQAxADAAOgBGADEAMwBdAAA3VQBzAGUAcgA6ADoARQB4AGMAZQBsAEMAbwBu
AG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAACFVAHMAZQByADoAOgBFAHgAYwBlAGwAUQB1AGUA
cgB5AAAzVQBzAGUAcgA6ADoAVgBhAGwAaQBkAEwAZQBhAHYAZQBTAGgAZQBlAHQATgBhAG0AZQAA
N0UAcgByAG8AcgAgAHIAZQBhAGQAaQBuAGcAIABMAGUAYQB2AGUAIABzAGgAZQBlAHQAOgAgAABH
RQByAHIAbwByACAAcgBlAGEAZABpAG4AZwAgAEwAZQBhAHYAZQAgAHMAaABlAGUAdAAuACAAUwBl
AGUAIABsAG8AZwAuAAALRQByAHIAbwByAABFTgBvACAATABlAGEAdgBlACAAcwBoAGUAZQB0ACAA
ZgBvAHUAbgBkACAAaQBuACAAdABoAGkAcwAgAGYAaQBsAGUALgAAK04AbwAgAEwAZQBhAHYAZQAg
AHMAaABlAGUAdAAgAGYAbwB1AG4AZAAuAAAbUwBoAGUAZQB0ACAATQBpAHMAcwBpAG4AZwAAdU4A
bwAgAHYAYQBsAGkAZAAgAEwAZQBhAHYAZQAgAHMAaABlAGUAdAAgAHcAaQB0AGgAIABkAGEAdABh
ACAAZgBvAHUAbgBkAC4AIABTAGsAaQBwAHAAaQBuAGcAIABwAHIAbwBjAGUAcwBzAGkAbgBnAC4A
AC1FAG0AcAB0AHkAIABvAHIAIABJAG4AdgBhAGwAaQBkACAAUwBoAGUAZQB0AAAvRQBSAFIATwBS
ACAAUABSAE8AQwBFAFMAUwBJAE4ARwAgAEYASQBMAEUAOgAKAAAfCgAKAFMAdABhAGMAawAgAFQA
cgBhAGMAZQA6AAoAACFQAHIAbwBjAGUAcwBzAGkAbgBnACAARQByAHIAbwByAABxUwBUAF8AYQAx
ADMANgBmAGQANAAxAGYANwAxADgANABhADcAYQA5ADYAYgA4AGUAOABhADQAOAAwADcAOQAwAGIA
MgA5AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAC6zzCdqd0FTq1A
aehRcwwjAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARF9OAcZDhI9Dg4CDhJBEkUODhJJFRJNAQ4V
Ek0BDhUSTQEOFRJNAQ4OEkUSURJVFRFZAQ4ODhJdEl0OBQAAEYCJBQACDg4cBSABEj0OBSAAEoCR
BSAAEoCVBiABEoCZHAMgABwDIAAOBAABAg4FAAIODg4HAAIRgKUODgUAAgEODgYAAw4ODg4EAAEO
DgQGEYC1CSACEkkRgLUdHAUgABKAuQQgABJFBCABHA4HIAICDhGAxQYgAgEOEkEGIAEBEoDJBSAB
CBJJAyAACAUVEk0BDgUgAQETAAUgABKA2QUgABKA3QUAAQ4dDgMgAAINEAEBFRKA6QEeABKA7QQK
ARJRBxUSaQISUQ4FIAIBHBgZEAICFRKA6QEeARUSgOkBHgAVEmkCHgAeAQUKAhJRDhAQAQEVEk0B
HgAVEoDpAR4AAwoBDgUAABKA8R8QAQMVEoDpAR4AFRKA6QEeABUSgOkBHgAVEoD1AR4ACxABAQIV
EoDpAR4ACCAAFRFZARMABRURWQEOBCAAEwAEIAEBHAcABA4ODg4OCAABEoDdEYD5BSAAEoD9ByAC
AQ4SgP0It3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAgYIAwYRDAMGEnUDBhJ5AwYSFAMGEhgI
BhUSaQISUQ4EAAASdQQAABJ5BQABARJ5BAAAEhQDAAABBSABDhJRBAgAEnUECAASeQQIABIUCAEA
CAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9hMTM2
ZmQ0MWY3MTg0YTdhOTZiOGU4YTQ4MDc5MGIyOQAABQEAAAAABwEAAkhQAAAYAQATQ29weXJpZ2h0
IEAgSFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtE
aXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0Lje0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNv
dXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9
bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2Vz
LlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAEEUAAAAAAAAAAAAAKkUA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxFAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAi
BAAAAAAAAAAAAAAiBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEAh3hLJAAAAQCHeEskPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
ggMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAXgMAAAEAMAAwADAAMAAwADQAYgAw
AAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBuAHkATgBhAG0A
ZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8AYQAxADMANgBmAGQANAAxAGYANwAxADgANABhADcAYQA5ADYAYgA4AGUAOABhADQAOAAwADcA
OQAwAGIAMgA5AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADkAMgA5
ADEALgAzADAAOAA1ADUAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
MQA1ADIANgBhAGQANwA4AGUAYQAwADkANABkADkAZQA5ADcAMwAwAGMAMwBjAGMANAA1AGIAMAA0
ADcANABmAC4AZABsAGwAAABMABQAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIABIAFAAIAAyADAAMgA1AAAAKgABAAEATABlAGcAYQBsAFQAcgBh
AGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEA
bQBlAAAAUwBUAF8AMQA1ADIANgBhAGQANwA4AGUAYQAwADkANABkADkAZQA5ADcAMwAwAGMAMwBj
AGMANAA1AGIAMAA0ADcANABmAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUA
AAAAAFMAVABfAGEAMQAzADYAZgBkADQAMQBmADcAMQA4ADQAYQA3AGEAOQA2AGIAOABlADgAYQA0
ADgAMAA3ADkAMABiADIAOQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEA
LgAwAC4AOQAyADkAMQAuADMAMAA4ADUANQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4AOQAyADkAMQAuADMAMAA4ADUANQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAPDUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Test valid sheets"
              DTS:CreationName="Microsoft.ScriptTask"
              DTS:Description="Script Task"
              DTS:Disabled="True"
              DTS:DTSID="{30542DC0-8C9A-4F2E-8F1D-443A491A9B3D}"
              DTS:ExecutableType="Microsoft.ScriptTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Test valid sheets"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_4449bbc54de2492b8d16a490b6589951"
                  VSTAMajorVersion="16"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::ExcelFilePath,User::ExcelRange,User::SQLConnectionString">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_6ec43d5a6ebf48289a877e0f94ecd669")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("ST_6ec43d5a6ebf48289a877e0f94ecd669")]
[assembly: AssemblyCopyright("Copyright @ HP 2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_4449bbc54de2492b8d16a490b6589951.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{8E73A9BA-AE6C-4A3B-953C-4A29C92E31EC}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_6ec43d5a6ebf48289a877e0f94ecd669</RootNamespace><AssemblyName>ST_4449bbc54de2492b8d16a490b6589951</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Data.SqlClient;

#endregion

namespace ST_6ec43d5a6ebf48289a877e0f94ecd669
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            try
            {
                string excelFilePath = Dts.Variables["User::ExcelFilePath"].Value.ToString();
                string[] monthSheets = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

                if (!File.Exists(excelFilePath))
                {
                    MessageBox.Show("Excel file not found at:\n" + excelFilePath,
                                    "File Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    return;
                }

                string excelConnStr = $@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelFilePath};Extended Properties='Excel 12.0 Xml;HDR=YES;IMEX=1';";
                var validSheets = new List<string>();
                var sheetData = new Dictionary<string, List<string>>(); // To store data for valid sheets

                using (var conn = new OleDbConnection(excelConnStr))
                {
                    conn.Open();

                    foreach (string sheet in monthSheets)
                    {
                        string sheetName = $"{sheet}$";
                        string range = $"{sheetName}C8:D57";

                        try
                        {
                            var cmd = new OleDbCommand($"SELECT TOP 4 * FROM [{range}]", conn);
                            var adapter = new OleDbDataAdapter(cmd);
                            var table = new DataTable();
                            adapter.Fill(table);

                            // Check if there's any meaningful data in C8:D57
                            if (table.Rows.Count == 0)
                                continue;

                            bool hasExample = false;

                            // Collect data for display, ensuring no nulls or empty values
                            var dataValues = new List<string>();
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                var colC = table.Rows[i][0]?.ToString().Trim();
                                var colD = table.Rows[i][1]?.ToString().Trim();

                                // Skip rows where either column C or D is null or empty
                                if (string.IsNullOrEmpty(colC) || string.IsNullOrEmpty(colD))
                                    continue;

                                dataValues.Add($"Row {i + 8}: C={colC}, D={colD}");

                                // Check D8 to D14 (i.e., rows 0–6 in column index 1) for "Example"
                                if (i < 7 && colD.Equals("Example", StringComparison.OrdinalIgnoreCase))
                                {
                                    hasExample = true;
                                    break;
                                }

                                // INSERT INTO SQL STAGING TABLE
                                try
                                {
                                    string sqlConnStr = Dts.Variables["User::SQLConnectionString"].Value.ToString();
                                    using (SqlConnection sqlConn = new SqlConnection(sqlConnStr))
                                    {
                                        sqlConn.Open();
                                        string insertQuery = "INSERT INTO Timesheet.ProjectStaging (ClientName, ProjectName, FileName) VALUES (@ClientName, @ProjectName, @FileName)";

                                        using (SqlCommand insertCmd = new SqlCommand(insertQuery, sqlConn))
                                        {
                                            insertCmd.Parameters.AddWithValue("@ClientName", colC);
                                            insertCmd.Parameters.AddWithValue("@ProjectName", colD);
                                            insertCmd.Parameters.AddWithValue("@FileName", excelFilePath);
                                            insertCmd.ExecuteNonQuery();
                                        }
                                    }
                                }
                                catch (Exception sqlEx)
                                {
                                    MessageBox.Show($"SQL Insert Error: {sqlEx.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    Dts.TaskResult = (int)ScriptResults.Failure;
                                    return;
                                }
                            }

                            // Only add to valid sheets if there are rows with non-null data and no "Example"
                            if (!hasExample && dataValues.Count > 0)
                            {
                                validSheets.Add(sheet);
                                sheetData[sheet] = dataValues; // Store the data for this sheet
                            }
                        }
                        catch
                        {
                            // If sheet not found or bad format, just skip
                            continue;
                        }
                    }

                    if (validSheets.Count == 0)
                    {
                        MessageBox.Show("No valid month sheet with non-null data found in:\n" + excelFilePath,
                                        "Validation Error", MessageBoxButtons.OK);
                        Dts.TaskResult = (int)ScriptResults.Failure;
                        return;
                    }

                    // Prepare message with selected sheet and its data
                    string chosenSheet = validSheets.First();
                    string message = $"Timesheet: {Path.GetFileName(excelFilePath)}\n\n" +
                                    $"✅ Using Sheet: {chosenSheet}\n" +
                                    $"\nData from {chosenSheet}$C8:D57 (Top 4 rows, non-null):\n" +
                                    string.Join("\n", sheetData[chosenSheet]);

                    if (validSheets.Count > 1)
                    {
                        message += $"\n\n⚠️ Warning: Multiple valid sheets found: {string.Join(", ", validSheets)}\nOnly the first one will be used.";
                    }

                    MessageBox.Show(message, "Sheet Selected", MessageBoxButtons.OK);

                    // Save selected sheet range back to SSIS variable (optional)
                    Dts.Variables["User::ExcelRange"].Value = $"{chosenSheet}$C8:D57";
                }

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message,
                                "Exception", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_6ec43d5a6ebf48289a877e0f94ecd669</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_6ec43d5a6ebf48289a877e0f94ecd669</msb:DisplayName>
    <msb:ProjectId>{C7FE7393-7C36-446E-8882-F1EE0D39D58B}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_4449bbc54de2492b8d16a490b6589951.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Settings.get_Default():ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Sett" +
    "ings")]

namespace ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_6ec43d5a6ebf48289a877e0f94ecd669.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_6ec43d5a6ebf48289a877e0f94ecd669.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJhVQWgAAAAAAAAAAOAAIiALATAAAB4AAAAIAAAAAAAAsj0A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGA9AABPAAAAAEAAAIAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAuB0AAAAgAAAAHgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIAEAAAAQAAAAAYAAAAgAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACU
PQAAAAAAAEgAAAACAAUArCUAAPwWAAABAAAAAAAAAKg8AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgBUBAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKHwyNIgAAASUWcikAAHCiJRdyMQAAcKIlGHI5AABwoiUZckEAAHCiJRpySQAAcKIl
G3JRAABwoiUcclkAAHCiJR1yYQAAcKIlHnJpAABwoiUfCXJxAABwoiUfCnJ5AABwoiUfC3KBAABw
ogsGKBUAAAotKnKJAABwBigWAAAKcr0AAHAWHxAoFwAACiYCKBAAAAoXbxgAAArdlgMAAHLTAABw
BnIxAQBwKBkAAApzGgAACgxzGwAACg1zHAAAChMEEQRvHQAACgcTBxYTCDgjAgAAEQcRCJoTCREJ
cp0BAHAoFgAACnKhAQBwKBYAAAoTCnKvAQBwEQpy2wEAcCgZAAAKEQRzHgAACnMfAAAKcyAAAAoT
CxELbyEAAAomEQtvIgAACm8jAAAKLQXdvwEAABYTDHMaAAAKEw0WEw44dQEAABELbyIAAAoRDm8k
AAAKFm8lAAAKJS0EJhQrCm8UAAAKbyYAAAoTDxELbyIAAAoRDm8kAAAKF28lAAAKJS0EJhQrCm8U
AAAKbyYAAAoTEBEPKCcAAAo6FQEAABEQKCcAAAo6CQEAABENct8BAHARDh5YjC8AAAERDxEQKCgA
AApvKQAAChEOHS8XERByCwIAcBtvKgAACiwIFxMMOOgAAAAAAigQAAAKbxEAAApyGwIAcG8SAAAK
bxMAAApvFAAACnMrAAAKExEREW8dAAAKck8CAHAREXMsAAAKExIREm8tAAAKcj4DAHARD28uAAAK
JhESby0AAApyVgMAcBEQby4AAAomERJvLQAACnJwAwBwBm8uAAAKJhESby8AAAom3gwREiwHERJv
MAAACtzeDBERLAcREW8wAAAK3N4yExNyhAMAcBETbzEAAAooFgAACnKqAwBwFh8QKBcAAAomAigQ
AAAKF28YAAAK3YIBAAARDhdYEw4RDhELbyIAAApvIwAACj94/v//EQwtHBENbzIAAAoWMRIIEQlv
KQAACgkRCRENbzMAAAreAybeABEIF1gTCBEIEQeOaT/S/f//CG8yAAAKLShyyAMAcAYoFgAACnIu
BABwFig0AAAKJgIoEAAAChdvGAAACt0DAQAACCgBAAArEwUejSIAAAElFnJQBABwoiUXBig2AAAK
oiUYcmgEAHCiJRkRBaIlGnKMBABwoiUbEQWiJRxypgQAcKIlHXLoBABwCREFbzcAAAooOAAACqIo
OQAAChMGCG8yAAAKFzEeEQZy7AQAcHJEBQBwCCg4AAAKckoFAHAoOgAAChMGEQZyjgUAcBYoNAAA
CiYCKBAAAApvEQAACnKsBQBwbxIAAAoRBXLOBQBwKBYAAApvOwAACt4MEQQsBxEEbzAAAArcAigQ
AAAKFm8YAAAK3i8TFHLeBQBwERRvMQAACigWAAAKcu4FAHAWHxAoFwAACiYCKBAAAAoXbxgAAAre
ACpBlAAAAgAAAD4CAABFAAAAgwIAAAwAAAAAAAAAAgAAACkCAABoAAAAkQIAAAwAAAAAAAAAAAAA
AAMCAACcAAAAnwIAADIAAAAVAAABAAAAABEBAAD7AQAADAMAAAMAAAAWAAABAgAAAOAAAAAqAwAA
CgQAAAwAAAAAAAAAAAAAAAAAAAAkBAAAJAQAAC8AAAAVAAABHgIoPAAACioeAig9AAAKKq5+AQAA
BC0ecgIGAHDQAwAAAig+AAAKbz8AAApzQAAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4D
AAAEKh4CKEEAAAoqLnMIAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAF
AGwAAACcBQAAI34AAAgGAAD8BwAAI1N0cmluZ3MAAAAABA4AAHQGAAAjVVMAeBQAABAAAAAjR1VJ
RAAAAIgUAAB0AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPoBMwAWAAABAAAAOgAAAAUAAAAG
AAAACQAAAAEAAABBAAAAAgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAgAAAAEAAAAHAAAAAQAAAAEA
AAABAAAAAACFBAEAAAAAAAYAGQMgBgYAqAMgBgYAZQINBg8AlAYAAAYAkgIvBQYA/AIvBQYA3QIv
BQYAjwMvBQYAOQMvBQYAUgMvBQYAqQIvBQYAxALtAwoAbQM0BAoAwQE0BAYADwCuAAYAHACuAA4A
agWTAA4AAQGHAA4AegWRBw4A2gCRBwYAiAXEBAYAYgfEBAYA0ATEBAYASAINBgYA0gVABgYAtgUa
BRIAGAJvBBIAeQJvBBIA+AEFBQYALQIgBgoAXQQ0BBYA1gZgARYACwFgAQYACQTEBAYATwFWABoA
xAfwBhoAdQfwBhoABQfwBhoA9gTwBg4AbQWSBQ4AzQCTAA4A7wWTAA4A8gWSBQ4AWAWHAA4A3QGH
AA4AtweHAAYAFgDEBAYApQXEBA4AQQWRBw4A4gWRBw4A0ACSBQYAHwHEBB4AFAHCBQYAAQCuAAYA
EARWAAYAgAHEBAYAKwHEBAYA0wcvBQAAAABNAAAAAAABAAEAAQAQAOYEKQA5AAEAAQAAABAARwaj
BlkAAQADAAABEADgBqMGdQADAAcAAwEAADYHAABdAAQACgARANUEbQERALEBcQERAOUAdQEGBn8A
eQFWgCYHfAFWgJEBfAFQIAAAAACGAOwEBgABAEQlAAAAAIYYAAYGAAEATCUAAAAAgxgABgYAAQBU
JQAAAACTCM4FgAEBAIAlAAAAAJMImQGFAQEAhyUAAAAAkwilAYoBAQCPJQAAAACWCGkHkAECAJYl
AAAAAIYYAAYGAAIAniUAAAAAkRgGBpUBAgAAAAEA5wMJAAAGAQARAAAGBgAZAAAGCgApAAAGEAAx
AAAGEAA5AAAGEABBAAAGEABJAAAGEABRAAAGEABZAAAGEABhAAAGEABpAAAGBgDBAAAGBgDhAAAG
FQDxAAAGBgBxAC4HTAD5ANIGUQABAbIEVwAJAcYDXgCxAAcEYgAZAUQHZgARAVQHawAhAb8HcQD5
AIIHAQARAVQHfwAMAAAGBgAUAAAGBgCJAAAGEABBAeEEBgBJAQAGlwBRAQAGngCRAAAGBgBZAa0E
pQCRAEsHqwBpAacHsQBhAbIEtQBxAbIEvAARAcsEYgARAewHZgARAVsHwQAMAMkAyQARAekGzwCZ
AAAGEAChAAAG1wChABcH3gCJAdoD5ACZAdwHsQChARACBgCpAPUAYgAMAKcHsQAUALsE7AAhAb8H
9ACpAbEH/wC5AVQBEAEUALIEFQERAfEEHAERAVQHJwERAVQHLQEJAdADNQFxAAAGBgCxAAAGBgDB
AT0BOgHBAc8HQwHJAAAGSQHpAAAGBgAIABQAYwEIABgAaAEpAHMA0AEuAAsAqAEuABMAsQEuABsA
0AEuACMA2QEuACsAAgIuADMAAgIuADsACAIuAEMA2QEuAEsAEAIuAFMAAgIuAFsAKQJDAGMAaAFJ
AHMA0AFhAHsAaAFjAGsAaAEbAAMAAQAEAAMAAADSBZkBAAC5AZ4BAABtB6MBAgAEAAMAAgAFAAUA
AQAGAAUAAgAHAAcAhgCMAASAAAABAAAARyTcSQAAAAAAACkAAAAEAAAAAAAAAAAAAABRAaUAAAAA
ABAAAAAAAAAAAAAAAFoBFQQAAAAABAAAAAAAAAAAAAAAUQGHAAAAAAAEAAAAAAAAAAAAAABRAcQE
AAAAABAAAAAAAAAAAAAAAFoBYAAAAAAABAAAAAAAAAAAAAAAUQHwBgAAAAAEAAAAAAAAAAAAAABR
AYUBAAAAAAAAAAABAAAAUQYAAAUAAgBrAAwBAAAAAABJRW51bWVyYWJsZWAxAExpc3RgMQBJbnQz
MgBEaWN0aW9uYXJ5YDIAU1RfNmVjNDNkNWE2ZWJmNDgyODlhODc3ZTBmOTRlY2Q2NjkAPE1vZHVs
ZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3Rl
bS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5l
cmljAEFkZABPbGVEYkNvbW1hbmQAU3FsQ29tbWFuZABkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3Nh
Z2UARGF0YVRhYmxlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBHZXRGaWxlTmFtZQBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lAFR5cGUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVy
bmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRp
dG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25V
c2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJp
YnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNz
ZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRl
AEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lT
U2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1
bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBzZXRfVmFsdWUAQWRkV2l0aFZh
bHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAUGF0aABNaWNyb3Nv
ZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2Ny
aXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfNmVjNDNk
NWE2ZWJmNDgyODlhODc3ZTBmOTRlY2Q2NjkuZGxsAEZpbGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lz
dGVtAFRyaW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4ASm9pbgBNZXNzYWdlQm94
SWNvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVm
bGVjdGlvbgBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAE9sZURiQ29u
bmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3RyaW5n
Q29tcGFyaXNvbgBDdWx0dXJlSW5mbwBTeXN0ZW0uTGlucQBnZXRfUmVzb3VyY2VNYW5hZ2VyAFNx
bFBhcmFtZXRlcgBPbGVEYkRhdGFBZGFwdGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3Rp
Y3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzZl
YzQzZDVhNmViZjQ4Mjg5YTg3N2UwZjk0ZWNkNjY5LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291
cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF82ZWM0M2Q1YTZlYmY0ODI4OWE4NzdlMGY5NGVjZDY2OS5Q
cm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MARXF1YWxzAFN5c3RlbS5XaW5kb3dzLkZv
cm1zAE1lc3NhZ2VCb3hCdXR0b25zAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3Jp
cHRSZXN1bHRzAEV4aXN0cwBnZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABnZXRfRGVmYXVs
dABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9D
b3VudABGaXJzdABEYXRhUm93AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkARXhlY3V0ZU5v
blF1ZXJ5AElzTnVsbE9yRW1wdHkAAAAAJ1UAcwBlAHIAOgA6AEUAeABjAGUAbABGAGkAbABlAFAA
YQB0AGgAAAdKAGEAbgAAB0YAZQBiAAAHTQBhAHIAAAdBAHAAcgAAB00AYQB5AAAHSgB1AG4AAAdK
AHUAbAAAB0EAdQBnAAAHUwBlAHAAAAdPAGMAdAAAB04AbwB2AAAHRABlAGMAADNFAHgAYwBlAGwA
IABmAGkAbABlACAAbgBvAHQAIABmAG8AdQBuAGQAIABhAHQAOgAKAAAVRgBpAGwAZQAgAEUAcgBy
AG8AcgAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwA
RQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAGs7AEUAeAB0AGUAbgBk
AGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAnAEUAeABjAGUAbAAgADEAMgAuADAAIABYAG0A
bAA7AEgARABSAD0AWQBFAFMAOwBJAE0ARQBYAD0AMQAnADsAAQMkAAANQwA4ADoARAA1ADcAACtT
AEUATABFAEMAVAAgAFQATwBQACAANAAgACoAIABGAFIATwBNACAAWwAAA10AACtSAG8AdwAgAHsA
MAB9ADoAIABDAD0AewAxAH0ALAAgAEQAPQB7ADIAfQAAD0UAeABhAG0AcABsAGUAADNVAHMAZQBy
ADoAOgBTAFEATABDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAACA7UkATgBTAEUAUgBU
ACAASQBOAFQATwAgAFQAaQBtAGUAcwBoAGUAZQB0AC4AUAByAG8AagBlAGMAdABTAHQAYQBnAGkA
bgBnACAAKABDAGwAaQBlAG4AdABOAGEAbQBlACwAIABQAHIAbwBqAGUAYwB0AE4AYQBtAGUALAAg
AEYAaQBsAGUATgBhAG0AZQApACAAVgBBAEwAVQBFAFMAIAAoAEAAQwBsAGkAZQBuAHQATgBhAG0A
ZQAsACAAQABQAHIAbwBqAGUAYwB0AE4AYQBtAGUALAAgAEAARgBpAGwAZQBOAGEAbQBlACkAABdA
AEMAbABpAGUAbgB0AE4AYQBtAGUAABlAAFAAcgBvAGoAZQBjAHQATgBhAG0AZQAAE0AARgBpAGwA
ZQBOAGEAbQBlAAAlUwBRAEwAIABJAG4AcwBlAHIAdAAgAEUAcgByAG8AcgA6ACAAAB1EAGEAdABh
AGIAYQBzAGUAIABFAHIAcgBvAHIAAGVOAG8AIAB2AGEAbABpAGQAIABtAG8AbgB0AGgAIABzAGgA
ZQBlAHQAIAB3AGkAdABoACAAbgBvAG4ALQBuAHUAbABsACAAZABhAHQAYQAgAGYAbwB1AG4AZAAg
AGkAbgA6AAoAASFWAGEAbABpAGQAYQB0AGkAbwBuACAARQByAHIAbwByAAAXVABpAG0AZQBzAGgA
ZQBlAHQAOgAgAAAjCgAKAAUnIABVAHMAaQBuAGcAIABTAGgAZQBlAHQAOgAgAAEZCgAKAEQAYQB0
AGEAIABmAHIAbwBtACAAAEEkAEMAOAA6AEQANQA3ACAAKABUAG8AcAAgADQAIAByAG8AdwBzACwA
IABuAG8AbgAtAG4AdQBsAGwAKQA6AAoAAQMKAABXCgAKAKAmD/4gAFcAYQByAG4AaQBuAGcAOgAg
AE0AdQBsAHQAaQBwAGwAZQAgAHYAYQBsAGkAZAAgAHMAaABlAGUAdABzACAAZgBvAHUAbgBkADoA
IAABBSwAIAAAQwoATwBuAGwAeQAgAHQAaABlACAAZgBpAHIAcwB0ACAAbwBuAGUAIAB3AGkAbABs
ACAAYgBlACAAdQBzAGUAZAAuAAAdUwBoAGUAZQB0ACAAUwBlAGwAZQBjAHQAZQBkAAAhVQBzAGUA
cgA6ADoARQB4AGMAZQBsAFIAYQBuAGcAZQAADyQAQwA4ADoARAA1ADcAAA9FAHIAcgBvAHIAOgAg
AAATRQB4AGMAZQBwAHQAaQBvAG4AAHFTAFQAXwA2AGUAYwA0ADMAZAA1AGEANgBlAGIAZgA0ADgA
MgA4ADkAYQA4ADcANwBlADAAZgA5ADQAZQBjAGQANgA2ADkALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAAH1y6Hk+VdNOnHFsOcVmw7cABCABAQgDIAABBSABARERBCAB
AQ4FIAEBEW0wBxUOHQ4VEj0BDhUSQQIOFRI9AQ4SRQ4OHQ4IDg4SSQIVEj0BDggODhJNElESVRJV
BCAAEn0FIAASgIEGIAESgIUcAyAAHAMgAA4EAAECDgUAAg4ODg0ABBGAlQ4OEYCZEYCdBgADDg4O
DgUVEj0BDgoVEkECDhUSPQEOBiACAQ4SRQYgAQESgKUFIAEIEkkFIAASgLEDIAAIBiABEoC5CAQg
ARwIBwAEDg4cHBwFIAEBEwAHIAICDhGAwQYgAgEOEk0FIAASgMUHIAISgMkOHAcgAgETABMBCgAD
EYCVDg4RgJkMEAEBHgAVEoDZAR4AAwoBDgQAAQ4OBiABEwETAAoAAg4OFRKA2QEOBQABDh0OBwAE
Dg4ODg4EIAEBHAgAARKA4RGA5QUgABKA6QcgAgEOEoDpCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAE
AQAAAAMGEmUDBhJpAwYSEAIGCAMGERQEAAASZQQAABJpBQABARJpBAAAEhADAAABBAgAEmUECAAS
aQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgB
ACNTVF82ZWM0M2Q1YTZlYmY0ODI4OWE4NzdlMGY5NGVjZDY2OQAABQEAAAAABwEAAkhQAAAYAQAT
Q29weXJpZ2h0IEAgSFAgMjAyNQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRG
cmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxT
eXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4w
LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVt
LlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAIg9AAAA
AAAAAAAAAKI9AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUPQAAAAAAAAAAAAAAAF9Db3JEbGxN
YWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAIgQAAAAAAAAAAAAAIgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABANxJRyQAAAEA3ElHJD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBIIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAF4DAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAmAAMAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAEgAUAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADYAZQBjADQAMwBkADUAYQA2AGUAYgBmADQAOAAyADgAOQBhADgANwA3AGUAMABmADkA
NABlAGMAZAA2ADYAOQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA5
ADIAOAA3AC4AMQA4ADkAMAA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMA
VABfADYAZQBjADQAMwBkADUAYQA2AGUAYgBmADQAOAAyADgAOQBhADgANwA3AGUAMABmADkANABl
AGMAZAA2ADYAOQAuAGQAbABsAAAATAAUAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAA
QwBvAHAAeQByAGkAZwBoAHQAIABAACAASABQACAAMgAwADIANQAAACoAAQABAEwAZQBnAGEAbABU
AHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADYAZQBjADQAMwBkADUAYQA2AGUAYgBmADQAOAAyADgAOQBhADgANwA3
AGUAMABmADkANABlAGMAZAA2ADYAOQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwA2AGUAYwA0ADMAZAA1AGEANgBlAGIAZgA0ADgAMgA4ADkAYQA4ADcANwBl
ADAAZgA5ADQAZQBjAGQANgA2ADkAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADkAMgA4ADcALgAxADgAOQAwADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAg
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADkAMgA4ADcALgAxADgAOQAwADgAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAALQ9AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Loop Through Employee Folders ADO\Loop through each Excel File.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{18949728-E6A4-437B-9EFB-57EED4A2008A}"
              DTS:From="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Select Month Sheet"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{61DF7078-9F94-45A8-98EC-37582F3B85DC}"
              DTS:ObjectName="{68F0C9C0-59C9-4DC4-B758-6AB8BA7D3908}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::ExcelFilePath" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Loop Through Employee Folders ADO.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{71D91F9C-8A44-4967-8E05-A8CFF338C569}"
          DTS:From="Package\Loop Through Employee Folders ADO\Extract Employee Names"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Loop Through Employee Folders ADO\Loop through each Excel File" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{6D5A18E4-A8A6-4895-9104-C327C9111713}"
          DTS:ObjectName="{FED277DB-3753-47EB-A2B1-D213B2CB2C28}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::EmployeeFolderPath" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate Staging"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{B15233A2-6991-49B5-85CB-48C38959FE53}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate Staging"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{D124B827-C7AD-4B7D-829E-75B0231DB467}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE Timesheet.StagingLeaveRequest;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{6F2CF297-3C43-40EA-8181-ED9B023457BF}"
      DTS:From="Package\Loop Employee Folders Script"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Loop Through Employee Folders ADO" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{8529B4DA-9119-4231-A04D-1DF78747794F}"
      DTS:From="Package\Loop Through Employee Folders ADO"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Clean Leave Requests" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{45A34F2B-76C4-4D32-91DB-E97B0BFDD9E5}"
      DTS:From="Package\Clean Leave Requests"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Load Leave Requests" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{C4505143-4684-4E9B-9CAA-38DD6F384E32}"
      DTS:From="Package\Load Leave Requests"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Truncate Staging" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="183.2,41.6"
          Id="Package\Clean Leave Requests"
          TopLeft="450.833308700887,740.599997269909" />
        <NodeLayout
          Size="179.2,41.6"
          Id="Package\Load Leave Requests"
          TopLeft="449.166642125283,837.399997269909" />
        <NodeLayout
          Size="217.6,41.6"
          Id="Package\Loop Employee Folders Script"
          TopLeft="431.391657253066,28.0333331766393" />
        <NodeLayout
          Size="195.2,41.6"
          Id="Package\Loop Through Employee Folders ADO\Extract Employee Names"
          TopLeft="84.699976096055,45.3000010305642" />
        <NodeLayout
          Size="193.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests"
          TopLeft="68.6999759594613,189.366663207346" />
        <NodeLayout
          Size="168.8,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Select Month Sheet"
          TopLeft="82.0666419886891,109.066665485435" />
        <NodeLayout
          Size="156,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Test valid sheets"
          TopLeft="87.1333071983531,43.3999985355136" />
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File.PrecedenceConstraints[Constraint]"
          TopLeft="165.983308974075,150.666665485435">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38.699997721911"
              Start="0,0"
              End="0,31.199997721911">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.199997721911" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="335.2,285.6"
          Size="335.2,328.8"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File"
          TopLeft="16.4416488525364,144.699998309513" />
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO.PrecedenceConstraints[Constraint 1]"
          TopLeft="183.170812474296,86.9000010305642">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,57.7999972789488"
              Start="0,0"
              End="0,50.2999972789488">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.2999972789488" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="374.4,508.8"
          Size="374.4,552"
          Id="Package\Loop Through Employee Folders ADO"
          TopLeft="359.933327824043,138.966665738556" />
        <NodeLayout
          Size="157.6,41.6"
          Id="Package\Truncate Staging"
          TopLeft="461.666641442313,929.866663966709" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="543.662492538554,69.6333331766393">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,69.3333325619167"
              Start="0,0"
              End="0,61.8333325619167">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,61.8333325619167" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="544.783318262465,690.966665738556">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,49.6333315313526"
              Start="0,0"
              End="0,42.1333315313526">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.1333315313526" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="540.599975413085,782.199997269909">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,55.1999999999999"
              Start="0,0"
              End="0,47.6999999999999">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,47.6999999999999" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="539.616641783798,878.999997269909">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,50.8666666968004"
              Start="0,0"
              End="0,43.3666666968004">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.3666666968004" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="193.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Filter Empty Leave Rows"
          TopLeft="365.833313345082,261.733331513272" />
        <NodeLayout
          Size="130.4,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination"
          TopLeft="873.333285616506,327.999998264313" />
        <NodeLayout
          Size="161.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Script Component"
          TopLeft="571.666635432179,325.399998282393" />
        <NodeLayout
          Size="192.8,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging"
          TopLeft="373.3333129353,362.99999748687" />
        <NodeLayout
          Size="110.4,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Errro-2"
          TopLeft="717.49996079753,262.666665557756" />
        <NodeLayout
          Size="110.4,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Error-1"
          TopLeft="717.49996079753,162.399999204477" />
        <NodeLayout
          Size="241.6,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Add EmployeeName and FileName"
          TopLeft="336.666648272012,167.266665503515" />
        <NodeLayout
          Size="120,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Union All"
          TopLeft="884.999951645734,205.799999114076" />
        <NodeLayout
          Size="140,41.6"
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source"
          TopLeft="383.333312388924,55.9333331223992" />
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Excel Source Output]"
          TopLeft="455.399980330468,97.5333331223992">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,69.7333323811158"
              Start="0,0"
              End="0,62.2333323811158">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,62.2333323811158" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Output2]"
          TopLeft="827.89996079753,283.466665557756">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="57.0999908482037,-51.2666664436793"
              Start="0,0"
              End="49.5999908482037,-51.2666664436793">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="28.9911058234066,0" />
                  <mssgle:CubicBezierSegment
                    Point1="28.9911058234066,0"
                    Point2="32.9911058234066,0"
                    Point3="32.9911058234066,-4" />
                  <mssgle:LineSegment
                    End="32.9911058234066,-47.2666664436793" />
                  <mssgle:CubicBezierSegment
                    Point1="32.9911058234066,-47.2666664436793"
                    Point2="32.9911058234066,-51.2666664436793"
                    Point3="36.9911058234066,-51.2666664436793" />
                  <mssgle:LineSegment
                    End="49.5999908482037,-51.2666664436793" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Output1]"
          TopLeft="827.89996079753,183.199999204477">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="57.099990848204,43.3999999095997"
              Start="0,0"
              End="49.599990848204,43.3999999095997">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="24.549995424102,0" />
                  <mssgle:CubicBezierSegment
                    Point1="24.549995424102,0"
                    Point2="28.549995424102,0"
                    Point3="28.549995424102,4" />
                  <mssgle:LineSegment
                    End="28.549995424102,39.3999999095997" />
                  <mssgle:CubicBezierSegment
                    Point1="28.549995424102,39.3999999095997"
                    Point2="28.549995424102,43.3999999095997"
                    Point3="32.549995424102,43.3999999095997" />
                  <mssgle:LineSegment
                    End="49.599990848204,43.3999999095997" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Output]"
          TopLeft="460.049980808547,208.866665503515">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,52.8666660097575"
              Start="0,0"
              End="0,45.3666660097575">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.3666660097575" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Derived Column Error Output]"
          TopLeft="578.266648272012,185.633332353996">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="139.233312525518,0"
              Start="0,0"
              End="131.733312525518,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="131.733312525518,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0.905269544009002,5,129.9227734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Conditional Split Error Output]"
          TopLeft="559.433313345082,282.533331513272">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="93.0333220870966,42.8666667691209"
              Start="0,0"
              End="93.0333220870966,35.3666667691209">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="89.0333220870966,0" />
                  <mssgle:CubicBezierSegment
                    Point1="89.0333220870966,0"
                    Point2="93.0333220870966,0"
                    Point3="93.0333220870966,4" />
                  <mssgle:LineSegment
                    End="93.0333220870966,35.3666667691209" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="27.3394158370966,-17.609375,131.3878125,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Union All Output 1]"
          TopLeft="941.76661863112,247.399999114076">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,80.5999991502364"
              Start="0,0"
              End="0,73.0999991502364">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,73.0999991502364" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[Output 0]"
          TopLeft="678.066635432179,325.399998282393">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="39.4333253653518,-41.9333327246372"
              Start="0,0"
              End="31.9333253653518,-41.9333327246372">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-37.9333327246372" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-37.9333327246372"
                    Point2="0,-41.9333327246372"
                    Point3="4,-41.9333327246372" />
                  <mssgle:LineSegment
                    End="31.9333253653518,-41.9333327246372" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests.Paths[NonEmptyRows]"
          TopLeft="466.183313140191,303.333331513272">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,59.6666659735972"
              Start="0,0"
              End="0,52.1666659735972">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.1666659735972" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-35.067578125,20.4422197055486,70.13515625,11.2822265625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Insert into Leave Staging">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Through Employee Folders ADO\Loop through each Excel File\Process Leave Requests\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>