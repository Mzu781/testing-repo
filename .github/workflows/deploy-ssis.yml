name: Deploy SSIS Packages to SQL Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SQL_SERVER: "LAPTOP-62JJ49T4"  # Your SQL Server instance name
  SSIS_CATALOG: "SSISDB"
  SSIS_FOLDER: "TimesheetDeploy"
  SSIS_PROJECT: "MigratingTimesheet"
  SQL_USERNAME: "GH_DeployUser"  # The SQL auth login you created
  BUILD_CONFIGURATION: "Development"

jobs:
  deploy-ssis:
    runs-on: self-hosted

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Debug workspace information
    - name: Debug workspace
      run: |
        Write-Output "Workspace: ${{ github.workspace }}"
        Write-Output "Runner temp: ${{ runner.temp }}"
        Get-ChildItem -Path "${{ github.workspace }}" -Recurse -Depth 1
      shell: powershell

    # Verify SSIS project exists
    - name: Verify SSIS project
      run: |
        $projectPath = "${{ github.workspace }}\MigratingTimesheet"
        if (-not (Test-Path "$projectPath\MigratingTimesheet.dtproj")) {
            Write-Error "SSIS project file not found at: $projectPath"
            exit 1
        }
        Write-Output "SSIS project verified at: $projectPath"
      shell: powershell

    # Verify required tools are available
    - name: Verify SSIS Tools
      run: |
        $tools = @{
            "SSISBuild" = "C:\ssis-tools\SSISBuild.exe"
            "dtutil" = "C:\Program Files\Microsoft SQL Server\160\DTS\Binn\dtutil.exe"
            "sqlcmd" = "sqlcmd.exe"
        }
        
        foreach ($tool in $tools.GetEnumerator()) {
            if (-not (Test-Path $tool.Value)) {
                Write-Error "$($tool.Key) not found at: $($tool.Value)"
                exit 1
            }
            Write-Output "$($tool.Key) found at: $($tool.Value)"
        }
      shell: powershell

    # Build SSIS project
    - name: Build SSIS Project
      run: |
        $projectPath = "${{ github.workspace }}\MigratingTimesheet\MigratingTimesheet.dtproj"
        $outputPath = "${{ runner.temp }}\SSISOutput"
        $config = "${{ env.BUILD_CONFIGURATION }}"

        New-Item -ItemType Directory -Path $outputPath -Force | Out-Null

        & "C:\ssis-tools\SSISBuild.exe" -p:"$projectPath" -o:"$outputPath" -c:"$config" -l:DIAG

        $ispacPath = Join-Path $outputPath "$config\MigratingTimesheet.ispac"
        if (-not (Test-Path $ispacPath)) {
            Write-Error "Build failed - .ispac not created at: $ispacPath"
            Get-ChildItem -Path $outputPath -Recurse
            exit 1
        }
        Write-Output "Build successful. ISPAC: $ispacPath"
      shell: powershell

    # Test SQL Server connection
    - name: Test SQL Server Connection
      run: |
        $query = "SELECT 'Connection successful' AS Result"
        sqlcmd -S "${{ env.SQL_SERVER }}" -d "master" -Q "$query" `
               -U "${{ env.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}"
        if ($LASTEXITCODE -ne 0) {
            Write-Error "SQL Server connection test failed"
            exit 1
        }
        Write-Output "SQL Server connection verified"
      shell: powershell

    # Deploy SSIS package
    - name: Deploy SSIS Package
      run: |
        $ispacPath = "${{ runner.temp }}\SSISOutput\${{ env.BUILD_CONFIGURATION }}\MigratingTimesheet.ispac"
        $folderPath = "/${{ env.SSIS_CATALOG }}/${{ env.SSIS_FOLDER }}/${{ env.SSIS_PROJECT }}"
        $dtutilPath = "C:\Program Files\Microsoft SQL Server\160\DTS\Binn\dtutil.exe"

        # Create folder if it doesn't exist
        $sqlQuery = @"
        IF NOT EXISTS (SELECT 1 FROM ${{ env.SSIS_CATALOG }}.catalog.folders WHERE name = '${{ env.SSIS_FOLDER }}')
        BEGIN
            EXEC ${{ env.SSIS_CATALOG }}.catalog.create_folder @folder_name = '${{ env.SSIS_FOLDER }}'
            PRINT 'Created folder: ${{ env.SSIS_FOLDER }}'
        END
        ELSE
        BEGIN
            PRINT 'Folder already exists: ${{ env.SSIS_FOLDER }}'
        END
        "@
        
        sqlcmd -S "${{ env.SQL_SERVER }}" -d "${{ env.SSIS_CATALOG }}" -Q "$sqlQuery" `
               -U "${{ env.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}"
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to create SSISDB folder"
            exit 1
        }

        # Deploy the package
        $dtutilArgs = @(
            "/FILE", "$ispacPath",
            "/DESTServer", "${{ env.SQL_SERVER }}",
            "/COPY", "SQL;$folderPath",
            "/SOURCEUSER", "${{ env.SQL_USERNAME }}",
            "/SOURCEPASSWORD", "${{ secrets.SQL_PASSWORD }}",
            "/QUIET"
        )
        
        & $dtutilPath @dtutilArgs
        if ($LASTEXITCODE -eq 0) {
            Write-Output "SSIS Project deployed successfully to ${{ env.SSIS_CATALOG }}/${{ env.SSIS_FOLDER }}"
        } else {
            Write-Error "Deployment failed with exit code $LASTEXITCODE"
            exit 1
        }

        # Verify deployment
        $verifyQuery = @"
        SELECT TOP 1 name FROM ${{ env.SSIS_CATALOG }}.catalog.projects 
        WHERE name = '${{ env.SSIS_PROJECT }}' AND folder_id = (
            SELECT folder_id FROM ${{ env.SSIS_CATALOG }}.catalog.folders 
            WHERE name = '${{ env.SSIS_FOLDER }}'
        )
        "@
        
        $result = sqlcmd -S "${{ env.SQL_SERVER }}" -d "${{ env.SSIS_CATALOG }}" -Q "$verifyQuery" `
                        -U "${{ env.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -h -1
        if ($LASTEXITCODE -ne 0 -or [string]::IsNullOrEmpty($result)) {
            Write-Error "Deployment verification failed"
            exit 1
        }
        Write-Output "Verified deployed project: $result"
      shell: powershell
