name: Deploy SSIS Packages to SQL Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-ssis:
    runs-on: self-hosted

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Debug workspace path and user context
    - name: Debug workspace path and user context
      run: |
        Write-Output "Workspace path: ${{ github.workspace }}"
        Write-Output "Current user: $env:USERDOMAIN\$env:USERNAME"
        Get-ChildItem -Path "${{ github.workspace }}" -Recurse
      shell: powershell

    # Verify SSIS project exists
    - name: Verify SSIS project exists
      run: |
        $projectPath = "${{ github.workspace }}\MigratingTimesheet"
        if (-not (Test-Path "$projectPath\MigratingTimesheet.dtproj")) {
            Write-Error "SSIS project file not found at: $projectPath"
            exit 1
        }
        Write-Output "SSIS project found at: $projectPath"
        Get-ChildItem -Path $projectPath -Recurse
      shell: powershell

    # Verify SSIS Tools
    - name: Verify SSIS Tools
      run: |
        $buildToolsPath = "C:\ssis-tools"
        $sqlcmdPath = "sqlcmd.exe"
        if (-not (Test-Path "$buildToolsPath\SSISBuild.exe")) {
            Write-Error "SSISBuild.exe not found at: $buildToolsPath"
            exit 1
        }
        if (-not (Get-Command $sqlcmdPath -ErrorAction SilentlyContinue)) {
            Write-Error "sqlcmd.exe not found. Ensure SQL Server tools are installed."
            exit 1
        }
        Write-Output "SSIS tools found: SSISBuild.exe at $buildToolsPath, sqlcmd.exe in PATH"
      shell: powershell

    # Build SSIS Project using SSISBuild.exe
    - name: Build SSIS Project
      run: |
        $projectPath = "${{ github.workspace }}\MigratingTimesheet\MigratingTimesheet.dtproj"
        $outputPath = "${{ runner.temp }}\SSISOutput"
        $config = "Development"

        if (-not (Test-Path $outputPath)) {
            New-Item -ItemType Directory -Path $outputPath -Force
        }

        & "C:\ssis-tools\SSISBuild.exe" -p:"$projectPath" -o:"$outputPath" -c:"$config" -l:DIAG

        $ispacPath = Join-Path $outputPath "$config\MigratingTimesheet.ispac"
        if (-not (Test-Path $ispacPath)) {
            Write-Error "Build failed - .ispac not created at: $ispacPath"
            Get-ChildItem -Path $outputPath -Recurse
            exit 1
        }

        Write-Output "Build completed successfully. ISPAC path: $ispacPath"
      shell: powershell

    # Deploy SSIS Project using catalog.deploy_project (with Windows Auth)
    - name: Deploy SSIS Project
      run: |
        $ispacPath = "${{ runner.temp }}\SSISOutput\Development\MigratingTimesheet.ispac"
        $sqlServer = "LAPTOP-62JJ49T4"
        $catalogName = "SSISDB"
        $folderName = "TimesheetDeploy"
        $projectName = "MigratingTimesheet"

        # Create folder if it doesn't exist and deploy project using Windows Integrated Auth (-E)
        $deployScript = @"
        DECLARE @folder_id bigint;
        SELECT @folder_id = folder_id FROM $catalogName.catalog.folders WHERE name = '$folderName';
        IF @folder_id IS NULL
        BEGIN
            EXEC $catalogName.catalog.create_folder @folder_name = '$folderName';
            PRINT 'Created folder: $folderName';
        END
        ELSE
        BEGIN
            PRINT 'Folder already exists';
        END

        EXEC $catalogName.deploy_project @folder_name = '$folderName', @project_name = '$projectName', @package_path = N'$ispacPath';
        "@

        Write-Output "Deploying SSIS project using catalog.deploy_project..."
        sqlcmd -S $sqlServer -d $catalogName -Q $deployScript -E
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "SSIS project deployment failed"
            exit 1
        }

        # Verify deployment
        $verifyQuery = @"
        SELECT name FROM $catalogName.catalog.projects 
        WHERE name = '$projectName' 
        AND folder_id = (
            SELECT folder_id FROM $catalogName.catalog.folders 
            WHERE name = '$folderName'
        )
        "@

        Write-Output "Verifying deployment..."
        $result = sqlcmd -S $sqlServer -d $catalogName -Q $verifyQuery -E -h -1

        if ($LASTEXITCODE -ne 0 -or [string]::IsNullOrEmpty($result)) {
            Write-Error "Deployment verification failed"
            exit 1
        }

        Write-Output "SUCCESS: Package '$projectName' deployed to $catalogName/$folderName"
        Write-Output "Verification result: $result"
      shell: powershell
